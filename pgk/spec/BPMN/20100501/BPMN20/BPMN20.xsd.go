//	Auto-generated by the "go-xsd" package located at:
//		github.com/UNO-SOFT/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.omg.org/spec/BPMN/20100501/BPMN20.xsd
package BPMN20

import (
	bpmndi "github.com/nitram509/golib-bpmn-model/pgk/spec/BPMN/20100501/BPMNDI"
	xsdt "github.com/nitram509/golib-bpmn-model/pgk/xsdtypes"
)

type XsdGoPkgHasAttr_TargetNamespace_XsdtAnyURI_ struct {
	TargetNamespace xsdt.AnyURI `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL targetNamespace,attr"`
}

type XsdGoPkgHasAttr_ExpressionLanguage_XsdtAnyURI_HttpWwwW3Org1999XPath struct {
	ExpressionLanguage xsdt.AnyURI `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL expressionLanguage,attr"`
}

//	Returns the default value for ExpressionLanguage -- "http://www.w3.org/1999/XPath"
func (me XsdGoPkgHasAttr_ExpressionLanguage_XsdtAnyURI_HttpWwwW3Org1999XPath) ExpressionLanguageDefault() xsdt.AnyURI {
	return xsdt.AnyURI("http://www.w3.org/1999/XPath")
}

type XsdGoPkgHasAttr_Namespace_XsdtAnyURI_ struct {
	Namespace xsdt.AnyURI `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL namespace,attr"`
}

type XsdGoPkgHasAttr_Location_XsdtString_ struct {
	Location xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL location,attr"`
}

type XsdGoPkgHasAttr_ImportType_XsdtAnyURI_ struct {
	ImportType xsdt.AnyURI `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL importType,attr"`
}

type TtImport struct {
	XsdGoPkgHasAttr_Namespace_XsdtAnyURI_

	XsdGoPkgHasAttr_Location_XsdtString_

	XsdGoPkgHasAttr_ImportType_XsdtAnyURI_
}

//	If the WalkHandlers.TtImport function is not nil (ie. was set by outside code), calls it with this TtImport instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TtImport instance.
func (me *TtImport) Walk() (err error) {
	if fn := WalkHandlers.TtImport; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Import struct {
	Imports []*TtImport `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL import"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Import function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Import instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Import instance.
func (me *XsdGoPkgHasElems_Import) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Import; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Imports {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_TextFormat_XsdtString_TextPlain struct {
	TextFormat xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL textFormat,attr"`
}

//	Returns the default value for TextFormat -- "text/plain"
func (me XsdGoPkgHasAttr_TextFormat_XsdtString_TextPlain) TextFormatDefault() xsdt.String {
	return xsdt.String("text/plain")
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL id,attr"`
}

type TtDocumentation struct {
	XsdGoPkgHasAttr_TextFormat_XsdtString_TextPlain

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TtDocumentation function is not nil (ie. was set by outside code), calls it with this TtDocumentation instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtDocumentation instance.
func (me *TtDocumentation) Walk() (err error) {
	if fn := WalkHandlers.TtDocumentation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Documentation struct {
	Documentations []*TtDocumentation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Documentation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Documentation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Documentation instance.
func (me *XsdGoPkgHasElems_Documentation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Documentation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Documentations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Definition_XsdtQName_ struct {
	Definition xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL definition,attr"`
}

type XsdGoPkgHasAttr_MustUnderstand_XsdtBoolean_False struct {
	MustUnderstand xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL mustUnderstand,attr"`
}

//	Returns the default value for MustUnderstand -- false
func (me XsdGoPkgHasAttr_MustUnderstand_XsdtBoolean_False) MustUnderstandDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type TtExtension struct {
	XsdGoPkgHasElems_Documentation

	XsdGoPkgHasAttr_Definition_XsdtQName_

	XsdGoPkgHasAttr_MustUnderstand_XsdtBoolean_False
}

//	If the WalkHandlers.TtExtension function is not nil (ie. was set by outside code), calls it with this TtExtension instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtExtension instance.
func (me *TtExtension) Walk() (err error) {
	if fn := WalkHandlers.TtExtension; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Documentation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Extension struct {
	Extensions []*TtExtension `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extension"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Extension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Extension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Extension instance.
func (me *XsdGoPkgHasElems_Extension) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Extension; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extensions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtExtensionElements struct {
}

//	If the WalkHandlers.TtExtensionElements function is not nil (ie. was set by outside code), calls it with this TtExtensionElements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TtExtensionElements instance.
func (me *TtExtensionElements) Walk() (err error) {
	if fn := WalkHandlers.TtExtensionElements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExtensionElements struct {
	ExtensionElements *TtExtensionElements `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExtensionElements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExtensionElements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExtensionElements instance.
func (me *XsdGoPkgHasElem_ExtensionElements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExtensionElements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExtensionElements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtBaseElement struct {
	XsdGoPkgHasElems_Documentation

	XsdGoPkgHasElem_ExtensionElements

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TtBaseElement function is not nil (ie. was set by outside code), calls it with this TtBaseElement instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtBaseElement instance.
func (me *TtBaseElement) Walk() (err error) {
	if fn := WalkHandlers.TtBaseElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ExtensionElements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Documentation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtRootElement struct {
	TtBaseElement
}

//	If the WalkHandlers.TtRootElement function is not nil (ie. was set by outside code), calls it with this TtRootElement instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtRootElement instance.
func (me *TtRootElement) Walk() (err error) {
	if fn := WalkHandlers.TtRootElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_ struct {
	SupportedInterfaceRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supportedInterfaceRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_ struct {
	WhileExecutingOutputRefses []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL whileExecutingOutputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_ struct {
	InputSetRefses []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSetRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL name,attr"`
}

type XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_ struct {
	DataOutputRefses []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_ struct {
	OptionalOutputRefses []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL optionalOutputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtOutputSet struct {
	TtBaseElement

	XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_

	XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_

	XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_

	XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtOutputSet function is not nil (ie. was set by outside code), calls it with this TtOutputSet instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TtOutputSet instance.
func (me *TtOutputSet) Walk() (err error) {
	if fn := WalkHandlers.TtOutputSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OutputSet struct {
	OutputSets []*TtOutputSet `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OutputSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OutputSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OutputSet instance.
func (me *XsdGoPkgHasElems_OutputSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OutputSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OutputSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtDataState struct {
	TtBaseElement

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtDataState function is not nil (ie. was set by outside code), calls it with this TtDataState instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtDataState instance.
func (me *TtDataState) Walk() (err error) {
	if fn := WalkHandlers.TtDataState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataState struct {
	DataState *TtDataState `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataState"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataState instance.
func (me *XsdGoPkgHasElem_DataState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ItemSubjectRef_XsdtQName_ struct {
	ItemSubjectRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL itemSubjectRef,attr"`
}

type XsdGoPkgHasAttr_IsCollection_XsdtBoolean_False struct {
	IsCollection xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL isCollection,attr"`
}

//	Returns the default value for IsCollection -- false
func (me XsdGoPkgHasAttr_IsCollection_XsdtBoolean_False) IsCollectionDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type TtDataInput struct {
	TtBaseElement

	XsdGoPkgHasElem_DataState

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_ItemSubjectRef_XsdtQName_

	XsdGoPkgHasAttr_IsCollection_XsdtBoolean_False
}

//	If the WalkHandlers.TtDataInput function is not nil (ie. was set by outside code), calls it with this TtDataInput instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TtDataInput instance.
func (me *TtDataInput) Walk() (err error) {
	if fn := WalkHandlers.TtDataInput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataInput struct {
	DataInputs []*TtDataInput `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInput"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataInput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataInput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataInput instance.
func (me *XsdGoPkgHasElems_DataInput) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataInput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataInputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtDataOutput struct {
	XsdGoPkgHasAttr_ItemSubjectRef_XsdtQName_

	XsdGoPkgHasAttr_IsCollection_XsdtBoolean_False

	TtBaseElement

	XsdGoPkgHasElem_DataState

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtDataOutput function is not nil (ie. was set by outside code), calls it with this TtDataOutput instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TtDataOutput instance.
func (me *TtDataOutput) Walk() (err error) {
	if fn := WalkHandlers.TtDataOutput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataOutput struct {
	DataOutputs []*TtDataOutput `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutput"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataOutput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataOutput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataOutput instance.
func (me *XsdGoPkgHasElems_DataOutput) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataOutput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataOutputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_ struct {
	OutputSetRefses []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSetRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_ struct {
	DataInputRefses []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_ struct {
	OptionalInputRefses []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL optionalInputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_ struct {
	WhileExecutingInputRefses []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL whileExecutingInputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtInputSet struct {
	XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_

	XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_

	XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_

	XsdGoPkgHasAttr_Name_XsdtString_

	TtBaseElement

	XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_
}

//	If the WalkHandlers.TtInputSet function is not nil (ie. was set by outside code), calls it with this TtInputSet instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TtInputSet instance.
func (me *TtInputSet) Walk() (err error) {
	if fn := WalkHandlers.TtInputSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InputSet struct {
	InputSets []*TtInputSet `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InputSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InputSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InputSet instance.
func (me *XsdGoPkgHasElems_InputSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InputSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InputSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtInputOutputSpecification struct {
	XsdGoPkgHasElems_OutputSet

	TtBaseElement

	XsdGoPkgHasElems_DataInput

	XsdGoPkgHasElems_DataOutput

	XsdGoPkgHasElems_InputSet
}

//	If the WalkHandlers.TtInputOutputSpecification function is not nil (ie. was set by outside code), calls it with this TtInputOutputSpecification instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TtInputOutputSpecification instance.
func (me *TtInputOutputSpecification) Walk() (err error) {
	if fn := WalkHandlers.TtInputOutputSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataInput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataOutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InputSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OutputSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IoSpecification struct {
	IoSpecification *TtInputOutputSpecification `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IoSpecification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IoSpecification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IoSpecification instance.
func (me *XsdGoPkgHasElem_IoSpecification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IoSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IoSpecification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_OperationRef_XsdtQName_ struct {
	OperationRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL operationRef,attr"`
}

type XsdGoPkgHasAttr_InputDataRef_XsdtIdref_ struct {
	InputDataRef xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputDataRef,attr"`
}

type XsdGoPkgHasAttr_OutputDataRef_XsdtIdref_ struct {
	OutputDataRef xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputDataRef,attr"`
}

type TtInputOutputBinding struct {
	TtBaseElement

	XsdGoPkgHasAttr_OperationRef_XsdtQName_

	XsdGoPkgHasAttr_InputDataRef_XsdtIdref_

	XsdGoPkgHasAttr_OutputDataRef_XsdtIdref_
}

//	If the WalkHandlers.TtInputOutputBinding function is not nil (ie. was set by outside code), calls it with this TtInputOutputBinding instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TtInputOutputBinding instance.
func (me *TtInputOutputBinding) Walk() (err error) {
	if fn := WalkHandlers.TtInputOutputBinding; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IoBinding struct {
	IoBindings []*TtInputOutputBinding `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioBinding"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IoBinding function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IoBinding instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IoBinding instance.
func (me *XsdGoPkgHasElems_IoBinding) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IoBinding; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IoBindings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtCallableElement struct {
	TtRootElement

	XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_

	XsdGoPkgHasElem_IoSpecification

	XsdGoPkgHasElems_IoBinding

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtCallableElement function is not nil (ie. was set by outside code), calls it with this TtCallableElement instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TtCallableElement instance.
func (me *TtCallableElement) Walk() (err error) {
	if fn := WalkHandlers.TtCallableElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IoSpecification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IoBinding.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtBaseElementWithMixedContent struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Documentation

	XsdGoPkgHasElem_ExtensionElements

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TtBaseElementWithMixedContent function is not nil (ie. was set by outside code), calls it with this TtBaseElementWithMixedContent instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TtBaseElementWithMixedContent instance.
func (me *TtBaseElementWithMixedContent) Walk() (err error) {
	if fn := WalkHandlers.TtBaseElementWithMixedContent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Documentation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExtensionElements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtExpression struct {
	TtBaseElementWithMixedContent
}

//	If the WalkHandlers.TtExpression function is not nil (ie. was set by outside code), calls it with this TtExpression instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtExpression instance.
func (me *TtExpression) Walk() (err error) {
	if fn := WalkHandlers.TtExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElementWithMixedContent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Language_XsdtAnyURI_ struct {
	Language xsdt.AnyURI `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL language,attr"`
}

type XsdGoPkgHasAttr_EvaluatesToTypeRef_XsdtQName_ struct {
	EvaluatesToTypeRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL evaluatesToTypeRef,attr"`
}

type TtFormalExpression struct {
	XsdGoPkgHasAttr_EvaluatesToTypeRef_XsdtQName_

	TtExpression

	XsdGoPkgHasAttr_Language_XsdtAnyURI_
}

//	If the WalkHandlers.TtFormalExpression function is not nil (ie. was set by outside code), calls it with this TtFormalExpression instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtFormalExpression instance.
func (me *TtFormalExpression) Walk() (err error) {
	if fn := WalkHandlers.TtFormalExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FormalExpression struct {
	FormalExpression *TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL formalExpression"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FormalExpression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FormalExpression instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FormalExpression instance.
func (me *XsdGoPkgHasElem_FormalExpression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FormalExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FormalExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Expression struct {
	Expression *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL expression"`

	XsdGoPkgHasElem_FormalExpression
}

//	If the WalkHandlers.XsdGoPkgHasElem_Expression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Expression instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Expression instance.
func (me *XsdGoPkgHasElem_Expression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Expression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FormalExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Expression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtResourceAssignmentExpression struct {
	TtBaseElement

	XsdGoPkgHasElem_Expression
}

//	If the WalkHandlers.TtResourceAssignmentExpression function is not nil (ie. was set by outside code), calls it with this TtResourceAssignmentExpression instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TtResourceAssignmentExpression instance.
func (me *TtResourceAssignmentExpression) Walk() (err error) {
	if fn := WalkHandlers.TtResourceAssignmentExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Expression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResourceAssignmentExpression struct {
	ResourceAssignmentExpression *TtResourceAssignmentExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceAssignmentExpression"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResourceAssignmentExpression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResourceAssignmentExpression instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResourceAssignmentExpression instance.
func (me *XsdGoPkgHasElem_ResourceAssignmentExpression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResourceAssignmentExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ResourceAssignmentExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_ struct {
	ResourceRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ParameterRef_XsdtQName_ struct {
	ParameterRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL parameterRef,attr"`
}

type TtResourceParameterBinding struct {
	TtBaseElement

	XsdGoPkgHasElem_Expression

	XsdGoPkgHasAttr_ParameterRef_XsdtQName_
}

//	If the WalkHandlers.TtResourceParameterBinding function is not nil (ie. was set by outside code), calls it with this TtResourceParameterBinding instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtResourceParameterBinding instance.
func (me *TtResourceParameterBinding) Walk() (err error) {
	if fn := WalkHandlers.TtResourceParameterBinding; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Expression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResourceParameterBinding struct {
	ResourceParameterBindings []*TtResourceParameterBinding `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceParameterBinding"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResourceParameterBinding function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResourceParameterBinding instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResourceParameterBinding instance.
func (me *XsdGoPkgHasElems_ResourceParameterBinding) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResourceParameterBinding; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ResourceParameterBindings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtResourceRole struct {
	XsdGoPkgHasElem_ResourceAssignmentExpression

	XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_

	XsdGoPkgHasElems_ResourceParameterBinding

	XsdGoPkgHasAttr_Name_XsdtString_

	TtBaseElement
}

//	If the WalkHandlers.TtResourceRole function is not nil (ie. was set by outside code), calls it with this TtResourceRole instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TtResourceRole instance.
func (me *TtResourceRole) Walk() (err error) {
	if fn := WalkHandlers.TtResourceRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ResourceAssignmentExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResourceParameterBinding.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtPerformer struct {
	TtResourceRole
}

//	If the WalkHandlers.TtPerformer function is not nil (ie. was set by outside code), calls it with this TtPerformer instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtPerformer instance.
func (me *TtPerformer) Walk() (err error) {
	if fn := WalkHandlers.TtPerformer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtResourceRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtHumanPerformer struct {
	TtPerformer
}

//	If the WalkHandlers.TtHumanPerformer function is not nil (ie. was set by outside code), calls it with this TtHumanPerformer instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtHumanPerformer instance.
func (me *TtHumanPerformer) Walk() (err error) {
	if fn := WalkHandlers.TtHumanPerformer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtPerformer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HumanPerformer struct {
	HumanPerformers []*TtHumanPerformer `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL humanPerformer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HumanPerformer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HumanPerformer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HumanPerformer instance.
func (me *XsdGoPkgHasElems_HumanPerformer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HumanPerformer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HumanPerformers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtPotentialOwner struct {
	TtHumanPerformer
}

//	If the WalkHandlers.TtPotentialOwner function is not nil (ie. was set by outside code), calls it with this TtPotentialOwner instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtPotentialOwner instance.
func (me *TtPotentialOwner) Walk() (err error) {
	if fn := WalkHandlers.TtPotentialOwner; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtHumanPerformer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PotentialOwner struct {
	PotentialOwners []*TtPotentialOwner `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL potentialOwner"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PotentialOwner function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PotentialOwner instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PotentialOwner instance.
func (me *XsdGoPkgHasElems_PotentialOwner) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PotentialOwner; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PotentialOwners {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Performer struct {
	Performers []*TtPerformer `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL performer"`

	XsdGoPkgHasElems_HumanPerformer

	XsdGoPkgHasElems_PotentialOwner
}

//	If the WalkHandlers.XsdGoPkgHasElems_Performer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Performer instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Performer instance.
func (me *XsdGoPkgHasElems_Performer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Performer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_HumanPerformer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PotentialOwner.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.Performers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResourceRole struct {
	ResourceRoles []*TtResourceRole `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole"`

	XsdGoPkgHasElems_Performer
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResourceRole function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResourceRole instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResourceRole instance.
func (me *XsdGoPkgHasElems_ResourceRole) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResourceRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Performer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.ResourceRoles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtGlobalTask struct {
	TtCallableElement

	XsdGoPkgHasElems_ResourceRole
}

//	If the WalkHandlers.TtGlobalTask function is not nil (ie. was set by outside code), calls it with this TtGlobalTask instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TtGlobalTask instance.
func (me *TtGlobalTask) Walk() (err error) {
	if fn := WalkHandlers.TtGlobalTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtCallableElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResourceRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtImplementation xsdt.String

//	This convenience method just performs a simple type conversion to TtImplementation's alias type xsdt.String.
func (me TtImplementation) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TtImplementation is just a simple String type, this merely sets the current value from the specified string.
func (me *TtImplementation) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TtImplementation is just a simple String type, this merely returns the current string value.
func (me TtImplementation) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Implementation_TtImplementation_Unspecified struct {
	Implementation TtImplementation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL implementation,attr"`
}

//	Returns the default value for Implementation -- "##unspecified"
func (me XsdGoPkgHasAttr_Implementation_TtImplementation_Unspecified) ImplementationDefault() TtImplementation {
	return TtImplementation("##unspecified")
}

type TtGlobalBusinessRuleTask struct {
	TtGlobalTask

	XsdGoPkgHasAttr_Implementation_TtImplementation_Unspecified
}

//	If the WalkHandlers.TtGlobalBusinessRuleTask function is not nil (ie. was set by outside code), calls it with this TtGlobalBusinessRuleTask instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtGlobalBusinessRuleTask instance.
func (me *TtGlobalBusinessRuleTask) Walk() (err error) {
	if fn := WalkHandlers.TtGlobalBusinessRuleTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtGlobalTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GlobalBusinessRuleTask struct {
	GlobalBusinessRuleTasks []*TtGlobalBusinessRuleTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalBusinessRuleTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GlobalBusinessRuleTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GlobalBusinessRuleTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GlobalBusinessRuleTask instance.
func (me *XsdGoPkgHasElems_GlobalBusinessRuleTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GlobalBusinessRuleTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GlobalBusinessRuleTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtGlobalManualTask struct {
	TtGlobalTask
}

//	If the WalkHandlers.TtGlobalManualTask function is not nil (ie. was set by outside code), calls it with this TtGlobalManualTask instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtGlobalManualTask instance.
func (me *TtGlobalManualTask) Walk() (err error) {
	if fn := WalkHandlers.TtGlobalManualTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtGlobalTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GlobalManualTask struct {
	GlobalManualTasks []*TtGlobalManualTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalManualTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GlobalManualTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GlobalManualTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GlobalManualTask instance.
func (me *XsdGoPkgHasElems_GlobalManualTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GlobalManualTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GlobalManualTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ImplementationRef_XsdtQName_ struct {
	ImplementationRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL implementationRef,attr"`
}

type XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_ struct {
	OutMessageRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outMessageRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_ struct {
	ErrorRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL errorRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_ struct {
	InMessageRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inMessageRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtOperation struct {
	TtBaseElement

	XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_

	XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_

	XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_ImplementationRef_XsdtQName_
}

//	If the WalkHandlers.TtOperation function is not nil (ie. was set by outside code), calls it with this TtOperation instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TtOperation instance.
func (me *TtOperation) Walk() (err error) {
	if fn := WalkHandlers.TtOperation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Operation struct {
	Operations []*TtOperation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL operation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Operation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Operation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Operation instance.
func (me *XsdGoPkgHasElems_Operation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Operation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Operations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtInterface struct {
	TtRootElement

	XsdGoPkgHasElems_Operation

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_ImplementationRef_XsdtQName_
}

//	If the WalkHandlers.TtInterface function is not nil (ie. was set by outside code), calls it with this TtInterface instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TtInterface instance.
func (me *TtInterface) Walk() (err error) {
	if fn := WalkHandlers.TtInterface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Operation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Interface struct {
	Interfaces []*TtInterface `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL interface"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Interface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Interface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Interface instance.
func (me *XsdGoPkgHasElems_Interface) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Interface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Interfaces {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Type_XsdtQName_ struct {
	Type xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL type,attr"`
}

type XsdGoPkgHasAttr_IsRequired_XsdtBoolean_ struct {
	IsRequired xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL isRequired,attr"`
}

type TtResourceParameter struct {
	XsdGoPkgHasAttr_Type_XsdtQName_

	XsdGoPkgHasAttr_IsRequired_XsdtBoolean_

	TtBaseElement

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtResourceParameter function is not nil (ie. was set by outside code), calls it with this TtResourceParameter instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TtResourceParameter instance.
func (me *TtResourceParameter) Walk() (err error) {
	if fn := WalkHandlers.TtResourceParameter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResourceParameter struct {
	ResourceParameters []*TtResourceParameter `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceParameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResourceParameter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResourceParameter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResourceParameter instance.
func (me *XsdGoPkgHasElems_ResourceParameter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResourceParameter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ResourceParameters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtResource struct {
	XsdGoPkgHasAttr_Name_XsdtString_

	TtRootElement

	XsdGoPkgHasElems_ResourceParameter
}

//	If the WalkHandlers.TtResource function is not nil (ie. was set by outside code), calls it with this TtResource instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtResource instance.
func (me *TtResource) Walk() (err error) {
	if fn := WalkHandlers.TtResource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResourceParameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Resource struct {
	Resources []*TtResource `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resource"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Resource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Resource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Resource instance.
func (me *XsdGoPkgHasElems_Resource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Resource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Resources {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtString_ struct {
	Value xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL value,attr"`
}

type TtCategoryValue struct {
	TtBaseElement

	XsdGoPkgHasAttr_Value_XsdtString_
}

//	If the WalkHandlers.TtCategoryValue function is not nil (ie. was set by outside code), calls it with this TtCategoryValue instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtCategoryValue instance.
func (me *TtCategoryValue) Walk() (err error) {
	if fn := WalkHandlers.TtCategoryValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CategoryValue struct {
	CategoryValues []*TtCategoryValue `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CategoryValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CategoryValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CategoryValue instance.
func (me *XsdGoPkgHasElems_CategoryValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CategoryValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CategoryValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtCategory struct {
	XsdGoPkgHasAttr_Name_XsdtString_

	TtRootElement

	XsdGoPkgHasElems_CategoryValue
}

//	If the WalkHandlers.TtCategory function is not nil (ie. was set by outside code), calls it with this TtCategory instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtCategory instance.
func (me *TtCategory) Walk() (err error) {
	if fn := WalkHandlers.TtCategory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CategoryValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Category struct {
	Categories []*TtCategory `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL category"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Category function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Category instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Category instance.
func (me *XsdGoPkgHasElems_Category) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Category; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Categories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ErrorCode_XsdtString_ struct {
	ErrorCode xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL errorCode,attr"`
}

type XsdGoPkgHasAttr_StructureRef_XsdtQName_ struct {
	StructureRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL structureRef,attr"`
}

type TtError struct {
	TtRootElement

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_ErrorCode_XsdtString_

	XsdGoPkgHasAttr_StructureRef_XsdtQName_
}

//	If the WalkHandlers.TtError function is not nil (ie. was set by outside code), calls it with this TtError instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TtError instance.
func (me *TtError) Walk() (err error) {
	if fn := WalkHandlers.TtError; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Error struct {
	Errors []*TtError `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL error"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Error function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Error instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Error instance.
func (me *XsdGoPkgHasElems_Error) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Error; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Errors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GlobalTask struct {
	GlobalTasks []*TtGlobalTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GlobalTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GlobalTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GlobalTask instance.
func (me *XsdGoPkgHasElems_GlobalTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GlobalTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GlobalTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_ struct {
	ParticipantRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtPartnerEntity struct {
	TtRootElement

	XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtPartnerEntity function is not nil (ie. was set by outside code), calls it with this TtPartnerEntity instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtPartnerEntity instance.
func (me *TtPartnerEntity) Walk() (err error) {
	if fn := WalkHandlers.TtPartnerEntity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PartnerEntity struct {
	PartnerEntities []*TtPartnerEntity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL partnerEntity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PartnerEntity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PartnerEntity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PartnerEntity instance.
func (me *XsdGoPkgHasElems_PartnerEntity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PartnerEntity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PartnerEntities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_EscalationCode_XsdtString_ struct {
	EscalationCode xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL escalationCode,attr"`
}

type TtEscalation struct {
	XsdGoPkgHasAttr_EscalationCode_XsdtString_

	XsdGoPkgHasAttr_StructureRef_XsdtQName_

	TtRootElement

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtEscalation function is not nil (ie. was set by outside code), calls it with this TtEscalation instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TtEscalation instance.
func (me *TtEscalation) Walk() (err error) {
	if fn := WalkHandlers.TtEscalation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Escalation struct {
	Escalations []*TtEscalation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL escalation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Escalation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Escalation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Escalation instance.
func (me *XsdGoPkgHasElems_Escalation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Escalation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Escalations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtEventDefinition struct {
	TtRootElement
}

//	If the WalkHandlers.TtEventDefinition function is not nil (ie. was set by outside code), calls it with this TtEventDefinition instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtEventDefinition instance.
func (me *TtEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ErrorRef_XsdtQName_ struct {
	ErrorRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL errorRef,attr"`
}

type TtErrorEventDefinition struct {
	TtEventDefinition

	XsdGoPkgHasAttr_ErrorRef_XsdtQName_
}

//	If the WalkHandlers.TtErrorEventDefinition function is not nil (ie. was set by outside code), calls it with this TtErrorEventDefinition instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtErrorEventDefinition instance.
func (me *TtErrorEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtErrorEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ErrorEventDefinition struct {
	ErrorEventDefinitions []*TtErrorEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL errorEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ErrorEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ErrorEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ErrorEventDefinition instance.
func (me *XsdGoPkgHasElems_ErrorEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ErrorEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ErrorEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_EscalationRef_XsdtQName_ struct {
	EscalationRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL escalationRef,attr"`
}

type TtEscalationEventDefinition struct {
	TtEventDefinition

	XsdGoPkgHasAttr_EscalationRef_XsdtQName_
}

//	If the WalkHandlers.TtEscalationEventDefinition function is not nil (ie. was set by outside code), calls it with this TtEscalationEventDefinition instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtEscalationEventDefinition instance.
func (me *TtEscalationEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtEscalationEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EscalationEventDefinition struct {
	EscalationEventDefinitions []*TtEscalationEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL escalationEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EscalationEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EscalationEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EscalationEventDefinition instance.
func (me *XsdGoPkgHasElems_EscalationEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EscalationEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EscalationEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_ struct {
	OperationRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL operationRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_MessageRef_XsdtQName_ struct {
	MessageRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageRef,attr"`
}

type TtMessageEventDefinition struct {
	XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_

	XsdGoPkgHasAttr_MessageRef_XsdtQName_

	TtEventDefinition
}

//	If the WalkHandlers.TtMessageEventDefinition function is not nil (ie. was set by outside code), calls it with this TtMessageEventDefinition instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtMessageEventDefinition instance.
func (me *TtMessageEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtMessageEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MessageEventDefinition struct {
	MessageEventDefinitions []*TtMessageEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MessageEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MessageEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MessageEventDefinition instance.
func (me *XsdGoPkgHasElems_MessageEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MessageEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MessageEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtTerminateEventDefinition struct {
	TtEventDefinition
}

//	If the WalkHandlers.TtTerminateEventDefinition function is not nil (ie. was set by outside code), calls it with this TtTerminateEventDefinition instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtTerminateEventDefinition instance.
func (me *TtTerminateEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtTerminateEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TerminateEventDefinition struct {
	TerminateEventDefinitions []*TtTerminateEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL terminateEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TerminateEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TerminateEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TerminateEventDefinition instance.
func (me *XsdGoPkgHasElems_TerminateEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TerminateEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TerminateEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_ struct {
	TimeDate *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timeDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_ instance.
func (me *XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimeDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_ struct {
	TimeDuration *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timeDuration"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_ instance.
func (me *XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimeDuration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_ struct {
	TimeCycle *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timeCycle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_ instance.
func (me *XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimeCycle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtTimerEventDefinition struct {
	XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_

	TtEventDefinition

	XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_

	XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_
}

//	If the WalkHandlers.TtTimerEventDefinition function is not nil (ie. was set by outside code), calls it with this TtTimerEventDefinition instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TtTimerEventDefinition instance.
func (me *TtTimerEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtTimerEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TimerEventDefinition struct {
	TimerEventDefinitions []*TtTimerEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timerEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimerEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimerEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimerEventDefinition instance.
func (me *XsdGoPkgHasElems_TimerEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TimerEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TimerEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_ struct {
	Condition *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL condition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_ instance.
func (me *XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Condition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtConditionalEventDefinition struct {
	TtEventDefinition

	XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_
}

//	If the WalkHandlers.TtConditionalEventDefinition function is not nil (ie. was set by outside code), calls it with this TtConditionalEventDefinition instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TtConditionalEventDefinition instance.
func (me *TtConditionalEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtConditionalEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConditionalEventDefinition struct {
	ConditionalEventDefinitions []*TtConditionalEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conditionalEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConditionalEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConditionalEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConditionalEventDefinition instance.
func (me *XsdGoPkgHasElems_ConditionalEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConditionalEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConditionalEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_WaitForCompletion_XsdtBoolean_ struct {
	WaitForCompletion xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL waitForCompletion,attr"`
}

type XsdGoPkgHasAttr_ActivityRef_XsdtQName_ struct {
	ActivityRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL activityRef,attr"`
}

type TtCompensateEventDefinition struct {
	TtEventDefinition

	XsdGoPkgHasAttr_WaitForCompletion_XsdtBoolean_

	XsdGoPkgHasAttr_ActivityRef_XsdtQName_
}

//	If the WalkHandlers.TtCompensateEventDefinition function is not nil (ie. was set by outside code), calls it with this TtCompensateEventDefinition instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtCompensateEventDefinition instance.
func (me *TtCompensateEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtCompensateEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompensateEventDefinition struct {
	CompensateEventDefinitions []*TtCompensateEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL compensateEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompensateEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompensateEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompensateEventDefinition instance.
func (me *XsdGoPkgHasElems_CompensateEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompensateEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompensateEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_ struct {
	Sources []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL source"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_ struct {
	Target xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL target"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtLinkEventDefinition struct {
	TtEventDefinition

	XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_

	XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtLinkEventDefinition function is not nil (ie. was set by outside code), calls it with this TtLinkEventDefinition instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TtLinkEventDefinition instance.
func (me *TtLinkEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtLinkEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LinkEventDefinition struct {
	LinkEventDefinitions []*TtLinkEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL linkEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LinkEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LinkEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LinkEventDefinition instance.
func (me *XsdGoPkgHasElems_LinkEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LinkEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LinkEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_SignalRef_XsdtQName_ struct {
	SignalRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL signalRef,attr"`
}

type TtSignalEventDefinition struct {
	TtEventDefinition

	XsdGoPkgHasAttr_SignalRef_XsdtQName_
}

//	If the WalkHandlers.TtSignalEventDefinition function is not nil (ie. was set by outside code), calls it with this TtSignalEventDefinition instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtSignalEventDefinition instance.
func (me *TtSignalEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtSignalEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SignalEventDefinition struct {
	SignalEventDefinitions []*TtSignalEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL signalEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SignalEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SignalEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SignalEventDefinition instance.
func (me *XsdGoPkgHasElems_SignalEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SignalEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignalEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtCancelEventDefinition struct {
	TtEventDefinition
}

//	If the WalkHandlers.TtCancelEventDefinition function is not nil (ie. was set by outside code), calls it with this TtCancelEventDefinition instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtCancelEventDefinition instance.
func (me *TtCancelEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtCancelEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CancelEventDefinition struct {
	CancelEventDefinitions []*TtCancelEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL cancelEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CancelEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CancelEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CancelEventDefinition instance.
func (me *XsdGoPkgHasElems_CancelEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CancelEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CancelEventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EventDefinition struct {
	EventDefinitions []*TtEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition"`

	XsdGoPkgHasElems_EscalationEventDefinition

	XsdGoPkgHasElems_MessageEventDefinition

	XsdGoPkgHasElems_TerminateEventDefinition

	XsdGoPkgHasElems_TimerEventDefinition

	XsdGoPkgHasElems_ConditionalEventDefinition

	XsdGoPkgHasElems_ErrorEventDefinition

	XsdGoPkgHasElems_LinkEventDefinition

	XsdGoPkgHasElems_SignalEventDefinition

	XsdGoPkgHasElems_CancelEventDefinition

	XsdGoPkgHasElems_CompensateEventDefinition
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventDefinition instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventDefinition instance.
func (me *XsdGoPkgHasElems_EventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_CancelEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CompensateEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LinkEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SignalEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ConditionalEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ErrorEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EscalationEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MessageEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TerminateEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TimerEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.EventDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtEndPoint struct {
	TtRootElement
}

//	If the WalkHandlers.TtEndPoint function is not nil (ie. was set by outside code), calls it with this TtEndPoint instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtEndPoint instance.
func (me *TtEndPoint) Walk() (err error) {
	if fn := WalkHandlers.TtEndPoint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EndPoint struct {
	EndPoints []*TtEndPoint `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL endPoint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndPoint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndPoint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndPoint instance.
func (me *XsdGoPkgHasElems_EndPoint) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndPoint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EndPoints {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtPartnerRole struct {
	TtRootElement

	XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtPartnerRole function is not nil (ie. was set by outside code), calls it with this TtPartnerRole instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtPartnerRole instance.
func (me *TtPartnerRole) Walk() (err error) {
	if fn := WalkHandlers.TtPartnerRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PartnerRole struct {
	PartnerRoles []*TtPartnerRole `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL partnerRole"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PartnerRole function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PartnerRole instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PartnerRole instance.
func (me *XsdGoPkgHasElems_PartnerRole) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PartnerRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PartnerRoles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Capacity_XsdtInteger_ struct {
	Capacity xsdt.Integer `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL capacity,attr"`
}

type XsdGoPkgHasAttr_IsUnlimited_XsdtBoolean_True struct {
	IsUnlimited xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL isUnlimited,attr"`
}

//	Returns the default value for IsUnlimited -- true
func (me XsdGoPkgHasAttr_IsUnlimited_XsdtBoolean_True) IsUnlimitedDefault() xsdt.Boolean {
	return xsdt.Boolean(true)
}

type TtDataStore struct {
	XsdGoPkgHasAttr_ItemSubjectRef_XsdtQName_

	TtRootElement

	XsdGoPkgHasElem_DataState

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Capacity_XsdtInteger_

	XsdGoPkgHasAttr_IsUnlimited_XsdtBoolean_True
}

//	If the WalkHandlers.TtDataStore function is not nil (ie. was set by outside code), calls it with this TtDataStore instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TtDataStore instance.
func (me *TtDataStore) Walk() (err error) {
	if fn := WalkHandlers.TtDataStore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataStore struct {
	DataStores []*TtDataStore `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataStore"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataStore function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataStore instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataStore instance.
func (me *XsdGoPkgHasElems_DataStore) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataStore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataStores {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtScript struct {
	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TtScript function is not nil (ie. was set by outside code), calls it with this TtScript instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtScript instance.
func (me *TtScript) Walk() (err error) {
	if fn := WalkHandlers.TtScript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Script struct {
	Script *TtScript `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL script"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Script function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Script instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Script instance.
func (me *XsdGoPkgHasElem_Script) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Script; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Script.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ScriptLanguage_XsdtAnyURI_ struct {
	ScriptLanguage xsdt.AnyURI `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL scriptLanguage,attr"`
}

type TtGlobalScriptTask struct {
	XsdGoPkgHasAttr_ScriptLanguage_XsdtAnyURI_

	TtGlobalTask

	XsdGoPkgHasElem_Script
}

//	If the WalkHandlers.TtGlobalScriptTask function is not nil (ie. was set by outside code), calls it with this TtGlobalScriptTask instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtGlobalScriptTask instance.
func (me *TtGlobalScriptTask) Walk() (err error) {
	if fn := WalkHandlers.TtGlobalScriptTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtGlobalTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Script.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GlobalScriptTask struct {
	GlobalScriptTasks []*TtGlobalScriptTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalScriptTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GlobalScriptTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GlobalScriptTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GlobalScriptTask instance.
func (me *XsdGoPkgHasElems_GlobalScriptTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GlobalScriptTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GlobalScriptTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtRendering struct {
	TtBaseElement
}

//	If the WalkHandlers.TtRendering function is not nil (ie. was set by outside code), calls it with this TtRendering instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtRendering instance.
func (me *TtRendering) Walk() (err error) {
	if fn := WalkHandlers.TtRendering; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Rendering struct {
	Renderings []*TtRendering `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL rendering"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Rendering function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Rendering instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Rendering instance.
func (me *XsdGoPkgHasElems_Rendering) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Rendering; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Renderings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtGlobalUserTask struct {
	XsdGoPkgHasElems_Rendering

	XsdGoPkgHasAttr_Implementation_TtImplementation_Unspecified

	TtGlobalTask
}

//	If the WalkHandlers.TtGlobalUserTask function is not nil (ie. was set by outside code), calls it with this TtGlobalUserTask instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtGlobalUserTask instance.
func (me *TtGlobalUserTask) Walk() (err error) {
	if fn := WalkHandlers.TtGlobalUserTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtGlobalTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Rendering.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GlobalUserTask struct {
	GlobalUserTasks []*TtGlobalUserTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalUserTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GlobalUserTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GlobalUserTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GlobalUserTask instance.
func (me *XsdGoPkgHasElems_GlobalUserTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GlobalUserTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GlobalUserTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtItemKind xsdt.String

//	Since TtItemKind is just a simple String type, this merely sets the current value from the specified string.
func (me *TtItemKind) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TtItemKind is just a simple String type, this merely returns the current string value.
func (me TtItemKind) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TtItemKind's alias type xsdt.String.
func (me TtItemKind) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TtItemKind is "Information".
func (me TtItemKind) IsInformation() bool { return me.String() == "Information" }

//	Returns true if the value of this enumerated TtItemKind is "Physical".
func (me TtItemKind) IsPhysical() bool { return me.String() == "Physical" }

type XsdGoPkgHasAttr_ItemKind_TtItemKind_Information struct {
	ItemKind TtItemKind `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL itemKind,attr"`
}

//	Returns the default value for ItemKind -- "Information"
func (me XsdGoPkgHasAttr_ItemKind_TtItemKind_Information) ItemKindDefault() TtItemKind {
	return TtItemKind("Information")
}

type TtItemDefinition struct {
	TtRootElement

	XsdGoPkgHasAttr_StructureRef_XsdtQName_

	XsdGoPkgHasAttr_IsCollection_XsdtBoolean_False

	XsdGoPkgHasAttr_ItemKind_TtItemKind_Information
}

//	If the WalkHandlers.TtItemDefinition function is not nil (ie. was set by outside code), calls it with this TtItemDefinition instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TtItemDefinition instance.
func (me *TtItemDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtItemDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ItemDefinition struct {
	ItemDefinitions []*TtItemDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL itemDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ItemDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ItemDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ItemDefinition instance.
func (me *XsdGoPkgHasElems_ItemDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ItemDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ItemDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ItemRef_XsdtQName_ struct {
	ItemRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL itemRef,attr"`
}

type TtMessage struct {
	TtRootElement

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_ItemRef_XsdtQName_
}

//	If the WalkHandlers.TtMessage function is not nil (ie. was set by outside code), calls it with this TtMessage instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtMessage instance.
func (me *TtMessage) Walk() (err error) {
	if fn := WalkHandlers.TtMessage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Message struct {
	Messages []*TtMessage `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL message"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Message function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Message instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Message instance.
func (me *XsdGoPkgHasElems_Message) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Message; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Messages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtArtifact struct {
	TtBaseElement
}

//	If the WalkHandlers.TtArtifact function is not nil (ie. was set by outside code), calls it with this TtArtifact instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtArtifact instance.
func (me *TtArtifact) Walk() (err error) {
	if fn := WalkHandlers.TtArtifact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtText struct {
	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TtText function is not nil (ie. was set by outside code), calls it with this TtText instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtText instance.
func (me *TtText) Walk() (err error) {
	if fn := WalkHandlers.TtText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Text struct {
	Text *TtText `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL text"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Text function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Text instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Text instance.
func (me *XsdGoPkgHasElem_Text) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Text; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Text.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtTextAnnotation struct {
	TtArtifact

	XsdGoPkgHasElem_Text

	XsdGoPkgHasAttr_TextFormat_XsdtString_TextPlain
}

//	If the WalkHandlers.TtTextAnnotation function is not nil (ie. was set by outside code), calls it with this TtTextAnnotation instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtTextAnnotation instance.
func (me *TtTextAnnotation) Walk() (err error) {
	if fn := WalkHandlers.TtTextAnnotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtArtifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Text.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TextAnnotation struct {
	TextAnnotations []*TtTextAnnotation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL textAnnotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TextAnnotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TextAnnotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TextAnnotation instance.
func (me *XsdGoPkgHasElems_TextAnnotation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TextAnnotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TextAnnotations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtAssociationDirection xsdt.String

//	Returns true if the value of this enumerated TtAssociationDirection is "None".
func (me TtAssociationDirection) IsNone() bool { return me.String() == "None" }

//	Returns true if the value of this enumerated TtAssociationDirection is "One".
func (me TtAssociationDirection) IsOne() bool { return me.String() == "One" }

//	Returns true if the value of this enumerated TtAssociationDirection is "Both".
func (me TtAssociationDirection) IsBoth() bool { return me.String() == "Both" }

//	Since TtAssociationDirection is just a simple String type, this merely sets the current value from the specified string.
func (me *TtAssociationDirection) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TtAssociationDirection is just a simple String type, this merely returns the current string value.
func (me TtAssociationDirection) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TtAssociationDirection's alias type xsdt.String.
func (me TtAssociationDirection) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_AssociationDirection_TtAssociationDirection_None struct {
	AssociationDirection TtAssociationDirection `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL associationDirection,attr"`
}

//	Returns the default value for AssociationDirection -- "None"
func (me XsdGoPkgHasAttr_AssociationDirection_TtAssociationDirection_None) AssociationDirectionDefault() TtAssociationDirection {
	return TtAssociationDirection("None")
}

type XsdGoPkgHasAttr_SourceRef_XsdtQName_ struct {
	SourceRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sourceRef,attr"`
}

type XsdGoPkgHasAttr_TargetRef_XsdtQName_ struct {
	TargetRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL targetRef,attr"`
}

type TtAssociation struct {
	XsdGoPkgHasAttr_TargetRef_XsdtQName_

	XsdGoPkgHasAttr_AssociationDirection_TtAssociationDirection_None

	TtArtifact

	XsdGoPkgHasAttr_SourceRef_XsdtQName_
}

//	If the WalkHandlers.TtAssociation function is not nil (ie. was set by outside code), calls it with this TtAssociation instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TtAssociation instance.
func (me *TtAssociation) Walk() (err error) {
	if fn := WalkHandlers.TtAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtArtifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Association struct {
	Associations []*TtAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL association"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Association function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Association instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Association instance.
func (me *XsdGoPkgHasElems_Association) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Association; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Associations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CategoryValueRef_XsdtQName_ struct {
	CategoryValueRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,attr"`
}

type TtGroup struct {
	XsdGoPkgHasAttr_CategoryValueRef_XsdtQName_

	TtArtifact
}

//	If the WalkHandlers.TtGroup function is not nil (ie. was set by outside code), calls it with this TtGroup instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtGroup instance.
func (me *TtGroup) Walk() (err error) {
	if fn := WalkHandlers.TtGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtArtifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Group struct {
	Groups []*TtGroup `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL group"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Group function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Group instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Group instance.
func (me *XsdGoPkgHasElems_Group) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Group; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Groups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Artifact struct {
	Artifacts []*TtArtifact `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact"`

	XsdGoPkgHasElems_Association

	XsdGoPkgHasElems_Group

	XsdGoPkgHasElems_TextAnnotation
}

//	If the WalkHandlers.XsdGoPkgHasElems_Artifact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Artifact instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Artifact instance.
func (me *XsdGoPkgHasElems_Artifact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Artifact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Association.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Group.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TextAnnotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.Artifacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_ struct {
	Supportses []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supports"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtProcessType xsdt.String

//	Since TtProcessType is just a simple String type, this merely returns the current string value.
func (me TtProcessType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TtProcessType's alias type xsdt.String.
func (me TtProcessType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TtProcessType is "None".
func (me TtProcessType) IsNone() bool { return me.String() == "None" }

//	Returns true if the value of this enumerated TtProcessType is "Public".
func (me TtProcessType) IsPublic() bool { return me.String() == "Public" }

//	Returns true if the value of this enumerated TtProcessType is "Private".
func (me TtProcessType) IsPrivate() bool { return me.String() == "Private" }

//	Since TtProcessType is just a simple String type, this merely sets the current value from the specified string.
func (me *TtProcessType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_ProcessType_TtProcessType_None struct {
	ProcessType TtProcessType `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL processType,attr"`
}

//	Returns the default value for ProcessType -- "None"
func (me XsdGoPkgHasAttr_ProcessType_TtProcessType_None) ProcessTypeDefault() TtProcessType {
	return TtProcessType("None")
}

type XsdGoPkgHasAttr_IsClosed_XsdtBoolean_False struct {
	IsClosed xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL isClosed,attr"`
}

//	Returns the default value for IsClosed -- false
func (me XsdGoPkgHasAttr_IsClosed_XsdtBoolean_False) IsClosedDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type TtAuditing struct {
	TtBaseElement
}

//	If the WalkHandlers.TtAuditing function is not nil (ie. was set by outside code), calls it with this TtAuditing instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtAuditing instance.
func (me *TtAuditing) Walk() (err error) {
	if fn := WalkHandlers.TtAuditing; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Auditing struct {
	Auditing *TtAuditing `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Auditing function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Auditing instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Auditing instance.
func (me *XsdGoPkgHasElem_Auditing) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Auditing; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Auditing.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtProperty struct {
	TtBaseElement

	XsdGoPkgHasElem_DataState

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_ItemSubjectRef_XsdtQName_
}

//	If the WalkHandlers.TtProperty function is not nil (ie. was set by outside code), calls it with this TtProperty instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TtProperty instance.
func (me *TtProperty) Walk() (err error) {
	if fn := WalkHandlers.TtProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Property struct {
	Properties []*TtProperty `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Property function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Property instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Property instance.
func (me *XsdGoPkgHasElems_Property) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Property; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Properties {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_PartitionElementRef_XsdtQName_ struct {
	PartitionElementRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL partitionElementRef,attr"`
}

type XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_ struct {
	PartitionElement *TtBaseElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL partitionElement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_ instance.
func (me *XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PartitionElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_ struct {
	FlowNodeRefs []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowNodeRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_ struct {
	ChildLaneSet *TtLaneSet `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL childLaneSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_ instance.
func (me *XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtLane struct {
	XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_

	XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_

	XsdGoPkgHasAttr_PartitionElementRef_XsdtQName_

	XsdGoPkgHasAttr_Name_XsdtString_

	TtBaseElement

	XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_
}

//	If the WalkHandlers.TtLane function is not nil (ie. was set by outside code), calls it with this TtLane instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TtLane instance.
func (me *TtLane) Walk() (err error) {
	if fn := WalkHandlers.TtLane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Lane struct {
	Lanes []*TtLane `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL lane"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lane function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lane instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lane instance.
func (me *XsdGoPkgHasElems_Lane) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Lane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lanes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtLaneSet struct {
	TtBaseElement

	XsdGoPkgHasElems_Lane

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtLaneSet function is not nil (ie. was set by outside code), calls it with this TtLaneSet instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtLaneSet instance.
func (me *TtLaneSet) Walk() (err error) {
	if fn := WalkHandlers.TtLaneSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LaneSet struct {
	LaneSets []*TtLaneSet `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL laneSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LaneSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LaneSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LaneSet instance.
func (me *XsdGoPkgHasElems_LaneSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LaneSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LaneSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtMonitoring struct {
	TtBaseElement
}

//	If the WalkHandlers.TtMonitoring function is not nil (ie. was set by outside code), calls it with this TtMonitoring instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtMonitoring instance.
func (me *TtMonitoring) Walk() (err error) {
	if fn := WalkHandlers.TtMonitoring; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Monitoring struct {
	Monitoring *TtMonitoring `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Monitoring function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Monitoring instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Monitoring instance.
func (me *XsdGoPkgHasElem_Monitoring) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Monitoring; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Monitoring.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_ struct {
	Incomings []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_ struct {
	Outgoings []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_ struct {
	CategoryValueRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtFlowElement struct {
	TtBaseElement

	XsdGoPkgHasElem_Auditing

	XsdGoPkgHasElem_Monitoring

	XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtFlowElement function is not nil (ie. was set by outside code), calls it with this TtFlowElement instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TtFlowElement instance.
func (me *TtFlowElement) Walk() (err error) {
	if fn := WalkHandlers.TtFlowElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Monitoring.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Auditing.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtFlowNode struct {
	XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_

	TtFlowElement

	XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_
}

//	If the WalkHandlers.TtFlowNode function is not nil (ie. was set by outside code), calls it with this TtFlowNode instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TtFlowNode instance.
func (me *TtFlowNode) Walk() (err error) {
	if fn := WalkHandlers.TtFlowNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtFlowElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_ struct {
	CorrelationPropertyRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtCorrelationKey struct {
	TtBaseElement

	XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtCorrelationKey function is not nil (ie. was set by outside code), calls it with this TtCorrelationKey instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtCorrelationKey instance.
func (me *TtCorrelationKey) Walk() (err error) {
	if fn := WalkHandlers.TtCorrelationKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CorrelationKey struct {
	CorrelationKeys []*TtCorrelationKey `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CorrelationKey function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CorrelationKey instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CorrelationKey instance.
func (me *XsdGoPkgHasElems_CorrelationKey) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CorrelationKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CorrelationKeys {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_InitiatingParticipantRef_XsdtQName_ struct {
	InitiatingParticipantRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL initiatingParticipantRef,attr"`
}

type TtChoreographyLoopType xsdt.String

//	Returns true if the value of this enumerated TtChoreographyLoopType is "None".
func (me TtChoreographyLoopType) IsNone() bool { return me.String() == "None" }

//	Returns true if the value of this enumerated TtChoreographyLoopType is "Standard".
func (me TtChoreographyLoopType) IsStandard() bool { return me.String() == "Standard" }

//	Returns true if the value of this enumerated TtChoreographyLoopType is "MultiInstanceSequential".
func (me TtChoreographyLoopType) IsMultiInstanceSequential() bool {
	return me.String() == "MultiInstanceSequential"
}

//	Returns true if the value of this enumerated TtChoreographyLoopType is "MultiInstanceParallel".
func (me TtChoreographyLoopType) IsMultiInstanceParallel() bool {
	return me.String() == "MultiInstanceParallel"
}

//	Since TtChoreographyLoopType is just a simple String type, this merely sets the current value from the specified string.
func (me *TtChoreographyLoopType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TtChoreographyLoopType is just a simple String type, this merely returns the current string value.
func (me TtChoreographyLoopType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TtChoreographyLoopType's alias type xsdt.String.
func (me TtChoreographyLoopType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_LoopType_TtChoreographyLoopType_None struct {
	LoopType TtChoreographyLoopType `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopType,attr"`
}

//	Returns the default value for LoopType -- "None"
func (me XsdGoPkgHasAttr_LoopType_TtChoreographyLoopType_None) LoopTypeDefault() TtChoreographyLoopType {
	return TtChoreographyLoopType("None")
}

type TtChoreographyActivity struct {
	TtFlowNode

	XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_

	XsdGoPkgHasElems_CorrelationKey

	XsdGoPkgHasAttr_InitiatingParticipantRef_XsdtQName_

	XsdGoPkgHasAttr_LoopType_TtChoreographyLoopType_None
}

//	If the WalkHandlers.TtChoreographyActivity function is not nil (ie. was set by outside code), calls it with this TtChoreographyActivity instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TtChoreographyActivity instance.
func (me *TtChoreographyActivity) Walk() (err error) {
	if fn := WalkHandlers.TtChoreographyActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtFlowNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CorrelationKey.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_ struct {
	OuterParticipantRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outerParticipantRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_ struct {
	InnerParticipantRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL innerParticipantRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtParticipantAssociation struct {
	XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_

	TtBaseElement

	XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_
}

//	If the WalkHandlers.TtParticipantAssociation function is not nil (ie. was set by outside code), calls it with this TtParticipantAssociation instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TtParticipantAssociation instance.
func (me *TtParticipantAssociation) Walk() (err error) {
	if fn := WalkHandlers.TtParticipantAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ParticipantAssociation struct {
	ParticipantAssociations []*TtParticipantAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ParticipantAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ParticipantAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ParticipantAssociation instance.
func (me *XsdGoPkgHasElems_ParticipantAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ParticipantAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ParticipantAssociations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CalledChoreographyRef_XsdtQName_ struct {
	CalledChoreographyRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL calledChoreographyRef,attr"`
}

type TtCallChoreography struct {
	TtChoreographyActivity

	XsdGoPkgHasElems_ParticipantAssociation

	XsdGoPkgHasAttr_CalledChoreographyRef_XsdtQName_
}

//	If the WalkHandlers.TtCallChoreography function is not nil (ie. was set by outside code), calls it with this TtCallChoreography instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtCallChoreography instance.
func (me *TtCallChoreography) Walk() (err error) {
	if fn := WalkHandlers.TtCallChoreography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ParticipantAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtChoreographyActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CallChoreography struct {
	CallChoreographies []*TtCallChoreography `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL callChoreography"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CallChoreography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CallChoreography instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CallChoreography instance.
func (me *XsdGoPkgHasElems_CallChoreography) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CallChoreography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CallChoreographies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_ struct {
	EventDefinitionRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ParallelMultiple_XsdtBoolean_False struct {
	ParallelMultiple xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL parallelMultiple,attr"`
}

//	Returns the default value for ParallelMultiple -- false
func (me XsdGoPkgHasAttr_ParallelMultiple_XsdtBoolean_False) ParallelMultipleDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type TtEvent struct {
	TtFlowNode

	XsdGoPkgHasElems_Property
}

//	If the WalkHandlers.TtEvent function is not nil (ie. was set by outside code), calls it with this TtEvent instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TtEvent instance.
func (me *TtEvent) Walk() (err error) {
	if fn := WalkHandlers.TtEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtFlowNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_ struct {
	SourceRefs []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sourceRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_ struct {
	TargetRef xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL targetRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_ struct {
	Transformation *TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL transformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_ instance.
func (me *XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_ struct {
	To *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL to"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_ instance.
func (me *XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.To.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_ struct {
	From *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL from"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_ instance.
func (me *XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.From.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtAssignment struct {
	TtBaseElement

	XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_

	XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_
}

//	If the WalkHandlers.TtAssignment function is not nil (ie. was set by outside code), calls it with this TtAssignment instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TtAssignment instance.
func (me *TtAssignment) Walk() (err error) {
	if fn := WalkHandlers.TtAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Assignment struct {
	Assignments []*TtAssignment `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL assignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Assignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Assignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Assignment instance.
func (me *XsdGoPkgHasElems_Assignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Assignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Assignments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtDataAssociation struct {
	TtBaseElement

	XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_

	XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_

	XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_

	XsdGoPkgHasElems_Assignment
}

//	If the WalkHandlers.TtDataAssociation function is not nil (ie. was set by outside code), calls it with this TtDataAssociation instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TtDataAssociation instance.
func (me *TtDataAssociation) Walk() (err error) {
	if fn := WalkHandlers.TtDataAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Assignment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtDataOutputAssociation struct {
	TtDataAssociation
}

//	If the WalkHandlers.TtDataOutputAssociation function is not nil (ie. was set by outside code), calls it with this TtDataOutputAssociation instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtDataOutputAssociation instance.
func (me *TtDataOutputAssociation) Walk() (err error) {
	if fn := WalkHandlers.TtDataOutputAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtDataAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataOutputAssociation struct {
	DataOutputAssociations []*TtDataOutputAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataOutputAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataOutputAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataOutputAssociation instance.
func (me *XsdGoPkgHasElems_DataOutputAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataOutputAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataOutputAssociations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OutputSet struct {
	OutputSet *TtOutputSet `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OutputSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OutputSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OutputSet instance.
func (me *XsdGoPkgHasElem_OutputSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OutputSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OutputSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtCatchEvent struct {
	TtEvent

	XsdGoPkgHasElems_DataOutput

	XsdGoPkgHasElems_DataOutputAssociation

	XsdGoPkgHasElem_OutputSet

	XsdGoPkgHasElems_EventDefinition

	XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_

	XsdGoPkgHasAttr_ParallelMultiple_XsdtBoolean_False
}

//	If the WalkHandlers.TtCatchEvent function is not nil (ie. was set by outside code), calls it with this TtCatchEvent instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TtCatchEvent instance.
func (me *TtCatchEvent) Walk() (err error) {
	if fn := WalkHandlers.TtCatchEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_EventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataOutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataOutputAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OutputSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtIntermediateCatchEvent struct {
	TtCatchEvent
}

//	If the WalkHandlers.TtIntermediateCatchEvent function is not nil (ie. was set by outside code), calls it with this TtIntermediateCatchEvent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtIntermediateCatchEvent instance.
func (me *TtIntermediateCatchEvent) Walk() (err error) {
	if fn := WalkHandlers.TtIntermediateCatchEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtCatchEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IntermediateCatchEvent struct {
	IntermediateCatchEvents []*TtIntermediateCatchEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL intermediateCatchEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IntermediateCatchEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntermediateCatchEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntermediateCatchEvent instance.
func (me *XsdGoPkgHasElems_IntermediateCatchEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IntermediateCatchEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IntermediateCatchEvents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Implementation_TtImplementation_WebService struct {
	Implementation TtImplementation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL implementation,attr"`
}

//	Returns the default value for Implementation -- "##WebService"
func (me XsdGoPkgHasAttr_Implementation_TtImplementation_WebService) ImplementationDefault() TtImplementation {
	return TtImplementation("##WebService")
}

type XsdGoPkgHasAttr_Instantiate_XsdtBoolean_False struct {
	Instantiate xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL instantiate,attr"`
}

//	Returns the default value for Instantiate -- false
func (me XsdGoPkgHasAttr_Instantiate_XsdtBoolean_False) InstantiateDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_ struct {
	LoopDataOutputRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopDataOutputRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_ struct {
	InputDataItem *TtDataInput `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputDataItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_ instance.
func (me *XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InputDataItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_ struct {
	OutputDataItem *TtDataOutput `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputDataItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_ instance.
func (me *XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OutputDataItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_ struct {
	CompletionCondition *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL completionCondition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_ instance.
func (me *XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompletionCondition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_IsSequential_XsdtBoolean_False struct {
	IsSequential xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL isSequential,attr"`
}

//	Returns the default value for IsSequential -- false
func (me XsdGoPkgHasAttr_IsSequential_XsdtBoolean_False) IsSequentialDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type TtMultiInstanceFlowCondition xsdt.String

//	This convenience method just performs a simple type conversion to TtMultiInstanceFlowCondition's alias type xsdt.String.
func (me TtMultiInstanceFlowCondition) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TtMultiInstanceFlowCondition is "None".
func (me TtMultiInstanceFlowCondition) IsNone() bool { return me.String() == "None" }

//	Returns true if the value of this enumerated TtMultiInstanceFlowCondition is "One".
func (me TtMultiInstanceFlowCondition) IsOne() bool { return me.String() == "One" }

//	Returns true if the value of this enumerated TtMultiInstanceFlowCondition is "All".
func (me TtMultiInstanceFlowCondition) IsAll() bool { return me.String() == "All" }

//	Returns true if the value of this enumerated TtMultiInstanceFlowCondition is "Complex".
func (me TtMultiInstanceFlowCondition) IsComplex() bool { return me.String() == "Complex" }

//	Since TtMultiInstanceFlowCondition is just a simple String type, this merely sets the current value from the specified string.
func (me *TtMultiInstanceFlowCondition) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TtMultiInstanceFlowCondition is just a simple String type, this merely returns the current string value.
func (me TtMultiInstanceFlowCondition) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Behavior_TtMultiInstanceFlowCondition_All struct {
	Behavior TtMultiInstanceFlowCondition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL behavior,attr"`
}

//	Returns the default value for Behavior -- "All"
func (me XsdGoPkgHasAttr_Behavior_TtMultiInstanceFlowCondition_All) BehaviorDefault() TtMultiInstanceFlowCondition {
	return TtMultiInstanceFlowCondition("All")
}

type TtLoopCharacteristics struct {
	TtBaseElement
}

//	If the WalkHandlers.TtLoopCharacteristics function is not nil (ie. was set by outside code), calls it with this TtLoopCharacteristics instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtLoopCharacteristics instance.
func (me *TtLoopCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.TtLoopCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_ struct {
	LoopCardinality *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCardinality"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_ instance.
func (me *XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LoopCardinality.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_ struct {
	LoopDataInputRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopDataInputRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_ struct {
	Condition *TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL condition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_ instance.
func (me *XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Condition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtDataInputAssociation struct {
	TtDataAssociation
}

//	If the WalkHandlers.TtDataInputAssociation function is not nil (ie. was set by outside code), calls it with this TtDataInputAssociation instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtDataInputAssociation instance.
func (me *TtDataInputAssociation) Walk() (err error) {
	if fn := WalkHandlers.TtDataInputAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtDataAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataInputAssociation struct {
	DataInputAssociations []*TtDataInputAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataInputAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataInputAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataInputAssociation instance.
func (me *XsdGoPkgHasElems_DataInputAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataInputAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataInputAssociations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InputSet struct {
	InputSet *TtInputSet `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InputSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InputSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InputSet instance.
func (me *XsdGoPkgHasElem_InputSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InputSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InputSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtThrowEvent struct {
	TtEvent

	XsdGoPkgHasElems_DataInput

	XsdGoPkgHasElems_DataInputAssociation

	XsdGoPkgHasElem_InputSet

	XsdGoPkgHasElems_EventDefinition

	XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_
}

//	If the WalkHandlers.TtThrowEvent function is not nil (ie. was set by outside code), calls it with this TtThrowEvent instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TtThrowEvent instance.
func (me *TtThrowEvent) Walk() (err error) {
	if fn := WalkHandlers.TtThrowEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DataInputAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InputSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataInput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtImplicitThrowEvent struct {
	TtThrowEvent
}

//	If the WalkHandlers.TtImplicitThrowEvent function is not nil (ie. was set by outside code), calls it with this TtImplicitThrowEvent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtImplicitThrowEvent instance.
func (me *TtImplicitThrowEvent) Walk() (err error) {
	if fn := WalkHandlers.TtImplicitThrowEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_ struct {
	Event *TtImplicitThrowEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL event"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_ instance.
func (me *XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Event.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtComplexBehaviorDefinition struct {
	TtBaseElement

	XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_

	XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_
}

//	If the WalkHandlers.TtComplexBehaviorDefinition function is not nil (ie. was set by outside code), calls it with this TtComplexBehaviorDefinition instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TtComplexBehaviorDefinition instance.
func (me *TtComplexBehaviorDefinition) Walk() (err error) {
	if fn := WalkHandlers.TtComplexBehaviorDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ComplexBehaviorDefinition struct {
	ComplexBehaviorDefinitions []*TtComplexBehaviorDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL complexBehaviorDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ComplexBehaviorDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ComplexBehaviorDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ComplexBehaviorDefinition instance.
func (me *XsdGoPkgHasElems_ComplexBehaviorDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ComplexBehaviorDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ComplexBehaviorDefinitions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_OneBehaviorEventRef_XsdtQName_ struct {
	OneBehaviorEventRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL oneBehaviorEventRef,attr"`
}

type XsdGoPkgHasAttr_NoneBehaviorEventRef_XsdtQName_ struct {
	NoneBehaviorEventRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL noneBehaviorEventRef,attr"`
}

type TtMultiInstanceLoopCharacteristics struct {
	XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_

	XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_

	XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_

	XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_

	XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_

	XsdGoPkgHasElems_ComplexBehaviorDefinition

	XsdGoPkgHasAttr_OneBehaviorEventRef_XsdtQName_

	XsdGoPkgHasAttr_NoneBehaviorEventRef_XsdtQName_

	XsdGoPkgHasAttr_IsSequential_XsdtBoolean_False

	XsdGoPkgHasAttr_Behavior_TtMultiInstanceFlowCondition_All

	TtLoopCharacteristics

	XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_
}

//	If the WalkHandlers.TtMultiInstanceLoopCharacteristics function is not nil (ie. was set by outside code), calls it with this TtMultiInstanceLoopCharacteristics instance as the single argument. Then calls the Walk() method on 8/12 embed(s) and 0/0 field(s) belonging to this TtMultiInstanceLoopCharacteristics instance.
func (me *TtMultiInstanceLoopCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.TtMultiInstanceLoopCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtLoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ComplexBehaviorDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MultiInstanceLoopCharacteristics struct {
	MultiInstanceLoopCharacteristics *TtMultiInstanceLoopCharacteristics `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL multiInstanceLoopCharacteristics"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MultiInstanceLoopCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MultiInstanceLoopCharacteristics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MultiInstanceLoopCharacteristics instance.
func (me *XsdGoPkgHasElem_MultiInstanceLoopCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MultiInstanceLoopCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MultiInstanceLoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_ struct {
	LoopCondition *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCondition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_ instance.
func (me *XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LoopCondition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_LoopMaximum_XsdtInteger_ struct {
	LoopMaximum xsdt.Integer `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopMaximum,attr"`
}

type XsdGoPkgHasAttr_TestBefore_XsdtBoolean_False struct {
	TestBefore xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL testBefore,attr"`
}

//	Returns the default value for TestBefore -- false
func (me XsdGoPkgHasAttr_TestBefore_XsdtBoolean_False) TestBeforeDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type TtStandardLoopCharacteristics struct {
	XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_

	XsdGoPkgHasAttr_LoopMaximum_XsdtInteger_

	XsdGoPkgHasAttr_TestBefore_XsdtBoolean_False

	TtLoopCharacteristics
}

//	If the WalkHandlers.TtStandardLoopCharacteristics function is not nil (ie. was set by outside code), calls it with this TtStandardLoopCharacteristics instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TtStandardLoopCharacteristics instance.
func (me *TtStandardLoopCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.TtStandardLoopCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtLoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StandardLoopCharacteristics struct {
	StandardLoopCharacteristics *TtStandardLoopCharacteristics `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL standardLoopCharacteristics"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StandardLoopCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StandardLoopCharacteristics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StandardLoopCharacteristics instance.
func (me *XsdGoPkgHasElem_StandardLoopCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StandardLoopCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StandardLoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LoopCharacteristics struct {
	LoopCharacteristics *TtLoopCharacteristics `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics"`

	XsdGoPkgHasElem_MultiInstanceLoopCharacteristics

	XsdGoPkgHasElem_StandardLoopCharacteristics
}

//	If the WalkHandlers.XsdGoPkgHasElem_LoopCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LoopCharacteristics instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LoopCharacteristics instance.
func (me *XsdGoPkgHasElem_LoopCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LoopCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MultiInstanceLoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StandardLoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.LoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_IsForCompensation_XsdtBoolean_False struct {
	IsForCompensation xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL isForCompensation,attr"`
}

//	Returns the default value for IsForCompensation -- false
func (me XsdGoPkgHasAttr_IsForCompensation_XsdtBoolean_False) IsForCompensationDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type XsdGoPkgHasAttr_Default_XsdtIdref_ struct {
	Default xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL default,attr"`
}

type XsdGoPkgHasAttr_StartQuantity_XsdtInteger_1 struct {
	StartQuantity xsdt.Integer `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL startQuantity,attr"`
}

//	Returns the default value for StartQuantity -- 1
func (me XsdGoPkgHasAttr_StartQuantity_XsdtInteger_1) StartQuantityDefault() xsdt.Integer {
	return xsdt.Integer(1)
}

type XsdGoPkgHasAttr_CompletionQuantity_XsdtInteger_1 struct {
	CompletionQuantity xsdt.Integer `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL completionQuantity,attr"`
}

//	Returns the default value for CompletionQuantity -- 1
func (me XsdGoPkgHasAttr_CompletionQuantity_XsdtInteger_1) CompletionQuantityDefault() xsdt.Integer {
	return xsdt.Integer(1)
}

type TtActivity struct {
	XsdGoPkgHasElems_ResourceRole

	XsdGoPkgHasAttr_Default_XsdtIdref_

	XsdGoPkgHasAttr_StartQuantity_XsdtInteger_1

	XsdGoPkgHasAttr_CompletionQuantity_XsdtInteger_1

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_DataInputAssociation

	XsdGoPkgHasElems_DataOutputAssociation

	XsdGoPkgHasElem_LoopCharacteristics

	XsdGoPkgHasAttr_IsForCompensation_XsdtBoolean_False

	TtFlowNode

	XsdGoPkgHasElem_IoSpecification
}

//	If the WalkHandlers.TtActivity function is not nil (ie. was set by outside code), calls it with this TtActivity instance as the single argument. Then calls the Walk() method on 7/11 embed(s) and 0/0 field(s) belonging to this TtActivity instance.
func (me *TtActivity) Walk() (err error) {
	if fn := WalkHandlers.TtActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DataOutputAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtFlowNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IoSpecification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResourceRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataInputAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtTask struct {
	TtActivity
}

//	If the WalkHandlers.TtTask function is not nil (ie. was set by outside code), calls it with this TtTask instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtTask instance.
func (me *TtTask) Walk() (err error) {
	if fn := WalkHandlers.TtTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtReceiveTask struct {
	XsdGoPkgHasAttr_Implementation_TtImplementation_WebService

	XsdGoPkgHasAttr_Instantiate_XsdtBoolean_False

	XsdGoPkgHasAttr_MessageRef_XsdtQName_

	XsdGoPkgHasAttr_OperationRef_XsdtQName_

	TtTask
}

//	If the WalkHandlers.TtReceiveTask function is not nil (ie. was set by outside code), calls it with this TtReceiveTask instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TtReceiveTask instance.
func (me *TtReceiveTask) Walk() (err error) {
	if fn := WalkHandlers.TtReceiveTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReceiveTask struct {
	ReceiveTasks []*TtReceiveTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL receiveTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReceiveTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReceiveTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReceiveTask instance.
func (me *XsdGoPkgHasElems_ReceiveTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReceiveTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReceiveTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ScriptFormat_XsdtString_ struct {
	ScriptFormat xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL scriptFormat,attr"`
}

type TtScriptTask struct {
	TtTask

	XsdGoPkgHasElem_Script

	XsdGoPkgHasAttr_ScriptFormat_XsdtString_
}

//	If the WalkHandlers.TtScriptTask function is not nil (ie. was set by outside code), calls it with this TtScriptTask instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtScriptTask instance.
func (me *TtScriptTask) Walk() (err error) {
	if fn := WalkHandlers.TtScriptTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Script.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ScriptTask struct {
	ScriptTasks []*TtScriptTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL scriptTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ScriptTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ScriptTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ScriptTask instance.
func (me *XsdGoPkgHasElems_ScriptTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ScriptTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ScriptTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtServiceTask struct {
	TtTask

	XsdGoPkgHasAttr_Implementation_TtImplementation_WebService

	XsdGoPkgHasAttr_OperationRef_XsdtQName_
}

//	If the WalkHandlers.TtServiceTask function is not nil (ie. was set by outside code), calls it with this TtServiceTask instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtServiceTask instance.
func (me *TtServiceTask) Walk() (err error) {
	if fn := WalkHandlers.TtServiceTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ServiceTask struct {
	ServiceTasks []*TtServiceTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL serviceTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ServiceTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ServiceTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ServiceTask instance.
func (me *XsdGoPkgHasElems_ServiceTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ServiceTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_TriggeredByEvent_XsdtBoolean_False struct {
	TriggeredByEvent xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL triggeredByEvent,attr"`
}

//	Returns the default value for TriggeredByEvent -- false
func (me XsdGoPkgHasAttr_TriggeredByEvent_XsdtBoolean_False) TriggeredByEventDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type TtSubProcess struct {
	TtActivity

	XsdGoPkgHasElems_LaneSet

	XsdGoPkgHasElems_FlowElement

	XsdGoPkgHasElems_Artifact

	XsdGoPkgHasAttr_TriggeredByEvent_XsdtBoolean_False
}

//	If the WalkHandlers.TtSubProcess function is not nil (ie. was set by outside code), calls it with this TtSubProcess instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TtSubProcess instance.
func (me *TtSubProcess) Walk() (err error) {
	if fn := WalkHandlers.TtSubProcess; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LaneSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Artifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CancelRemainingInstances_XsdtBoolean_True struct {
	CancelRemainingInstances xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL cancelRemainingInstances,attr"`
}

//	Returns the default value for CancelRemainingInstances -- true
func (me XsdGoPkgHasAttr_CancelRemainingInstances_XsdtBoolean_True) CancelRemainingInstancesDefault() xsdt.Boolean {
	return xsdt.Boolean(true)
}

type TtAdHocOrdering xsdt.String

//	This convenience method just performs a simple type conversion to TtAdHocOrdering's alias type xsdt.String.
func (me TtAdHocOrdering) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TtAdHocOrdering is "Parallel".
func (me TtAdHocOrdering) IsParallel() bool { return me.String() == "Parallel" }

//	Returns true if the value of this enumerated TtAdHocOrdering is "Sequential".
func (me TtAdHocOrdering) IsSequential() bool { return me.String() == "Sequential" }

//	Since TtAdHocOrdering is just a simple String type, this merely sets the current value from the specified string.
func (me *TtAdHocOrdering) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TtAdHocOrdering is just a simple String type, this merely returns the current string value.
func (me TtAdHocOrdering) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Ordering_TtAdHocOrdering_ struct {
	Ordering TtAdHocOrdering `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ordering,attr"`
}

type TtAdHocSubProcess struct {
	TtSubProcess

	XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_

	XsdGoPkgHasAttr_CancelRemainingInstances_XsdtBoolean_True

	XsdGoPkgHasAttr_Ordering_TtAdHocOrdering_
}

//	If the WalkHandlers.TtAdHocSubProcess function is not nil (ie. was set by outside code), calls it with this TtAdHocSubProcess instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TtAdHocSubProcess instance.
func (me *TtAdHocSubProcess) Walk() (err error) {
	if fn := WalkHandlers.TtAdHocSubProcess; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtSubProcess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AdHocSubProcess struct {
	AdHocSubProcesses []*TtAdHocSubProcess `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL adHocSubProcess"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AdHocSubProcess function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AdHocSubProcess instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AdHocSubProcess instance.
func (me *XsdGoPkgHasElems_AdHocSubProcess) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AdHocSubProcess; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AdHocSubProcesses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Task struct {
	Tasks []*TtTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL task"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Task function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Task instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Task instance.
func (me *XsdGoPkgHasElems_Task) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Task; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtTransactionMethod xsdt.String

//	Since TtTransactionMethod is just a simple String type, this merely sets the current value from the specified string.
func (me *TtTransactionMethod) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TtTransactionMethod is just a simple String type, this merely returns the current string value.
func (me TtTransactionMethod) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TtTransactionMethod's alias type xsdt.String.
func (me TtTransactionMethod) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Method_TtTransactionMethod_Compensate struct {
	Method TtTransactionMethod `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL method,attr"`
}

//	Returns the default value for Method -- "##Compensate"
func (me XsdGoPkgHasAttr_Method_TtTransactionMethod_Compensate) MethodDefault() TtTransactionMethod {
	return TtTransactionMethod("##Compensate")
}

type TtTransaction struct {
	XsdGoPkgHasAttr_Method_TtTransactionMethod_Compensate

	TtSubProcess
}

//	If the WalkHandlers.TtTransaction function is not nil (ie. was set by outside code), calls it with this TtTransaction instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtTransaction instance.
func (me *TtTransaction) Walk() (err error) {
	if fn := WalkHandlers.TtTransaction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtSubProcess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Transaction struct {
	Transactions []*TtTransaction `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL transaction"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Transaction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Transaction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Transaction instance.
func (me *XsdGoPkgHasElems_Transaction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Transaction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transactions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtUserTask struct {
	TtTask

	XsdGoPkgHasElems_Rendering

	XsdGoPkgHasAttr_Implementation_TtImplementation_Unspecified
}

//	If the WalkHandlers.TtUserTask function is not nil (ie. was set by outside code), calls it with this TtUserTask instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtUserTask instance.
func (me *TtUserTask) Walk() (err error) {
	if fn := WalkHandlers.TtUserTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Rendering.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UserTask struct {
	UserTasks []*TtUserTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL userTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UserTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UserTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UserTask instance.
func (me *XsdGoPkgHasElems_UserTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UserTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UserTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_DataObjectRef_XsdtIdref_ struct {
	DataObjectRef xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataObjectRef,attr"`
}

type TtDataObjectReference struct {
	TtFlowElement

	XsdGoPkgHasElem_DataState

	XsdGoPkgHasAttr_ItemSubjectRef_XsdtQName_

	XsdGoPkgHasAttr_DataObjectRef_XsdtIdref_
}

//	If the WalkHandlers.TtDataObjectReference function is not nil (ie. was set by outside code), calls it with this TtDataObjectReference instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TtDataObjectReference instance.
func (me *TtDataObjectReference) Walk() (err error) {
	if fn := WalkHandlers.TtDataObjectReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtFlowElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataObjectReference struct {
	DataObjectReferences []*TtDataObjectReference `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataObjectReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataObjectReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataObjectReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataObjectReference instance.
func (me *XsdGoPkgHasElems_DataObjectReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataObjectReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataObjectReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtGatewayDirection xsdt.String

//	Since TtGatewayDirection is just a simple String type, this merely returns the current string value.
func (me TtGatewayDirection) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TtGatewayDirection's alias type xsdt.String.
func (me TtGatewayDirection) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TtGatewayDirection is "Unspecified".
func (me TtGatewayDirection) IsUnspecified() bool { return me.String() == "Unspecified" }

//	Returns true if the value of this enumerated TtGatewayDirection is "Converging".
func (me TtGatewayDirection) IsConverging() bool { return me.String() == "Converging" }

//	Returns true if the value of this enumerated TtGatewayDirection is "Diverging".
func (me TtGatewayDirection) IsDiverging() bool { return me.String() == "Diverging" }

//	Returns true if the value of this enumerated TtGatewayDirection is "Mixed".
func (me TtGatewayDirection) IsMixed() bool { return me.String() == "Mixed" }

//	Since TtGatewayDirection is just a simple String type, this merely sets the current value from the specified string.
func (me *TtGatewayDirection) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_GatewayDirection_TtGatewayDirection_Unspecified struct {
	GatewayDirection TtGatewayDirection `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL gatewayDirection,attr"`
}

//	Returns the default value for GatewayDirection -- "Unspecified"
func (me XsdGoPkgHasAttr_GatewayDirection_TtGatewayDirection_Unspecified) GatewayDirectionDefault() TtGatewayDirection {
	return TtGatewayDirection("Unspecified")
}

type TtGateway struct {
	TtFlowNode

	XsdGoPkgHasAttr_GatewayDirection_TtGatewayDirection_Unspecified
}

//	If the WalkHandlers.TtGateway function is not nil (ie. was set by outside code), calls it with this TtGateway instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtGateway instance.
func (me *TtGateway) Walk() (err error) {
	if fn := WalkHandlers.TtGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtFlowNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_ struct {
	ActivationCondition *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL activationCondition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_ instance.
func (me *XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ActivationCondition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtComplexGateway struct {
	XsdGoPkgHasAttr_Default_XsdtIdref_

	TtGateway

	XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_
}

//	If the WalkHandlers.TtComplexGateway function is not nil (ie. was set by outside code), calls it with this TtComplexGateway instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtComplexGateway instance.
func (me *TtComplexGateway) Walk() (err error) {
	if fn := WalkHandlers.TtComplexGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ComplexGateway struct {
	ComplexGateways []*TtComplexGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL complexGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ComplexGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ComplexGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ComplexGateway instance.
func (me *XsdGoPkgHasElems_ComplexGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ComplexGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ComplexGateways {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_DataStoreRef_XsdtQName_ struct {
	DataStoreRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataStoreRef,attr"`
}

type TtDataStoreReference struct {
	XsdGoPkgHasAttr_ItemSubjectRef_XsdtQName_

	XsdGoPkgHasAttr_DataStoreRef_XsdtQName_

	TtFlowElement

	XsdGoPkgHasElem_DataState
}

//	If the WalkHandlers.TtDataStoreReference function is not nil (ie. was set by outside code), calls it with this TtDataStoreReference instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TtDataStoreReference instance.
func (me *TtDataStoreReference) Walk() (err error) {
	if fn := WalkHandlers.TtDataStoreReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtFlowElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataStoreReference struct {
	DataStoreReferences []*TtDataStoreReference `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataStoreReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataStoreReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataStoreReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataStoreReference instance.
func (me *XsdGoPkgHasElems_DataStoreReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataStoreReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataStoreReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtManualTask struct {
	TtTask
}

//	If the WalkHandlers.TtManualTask function is not nil (ie. was set by outside code), calls it with this TtManualTask instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtManualTask instance.
func (me *TtManualTask) Walk() (err error) {
	if fn := WalkHandlers.TtManualTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ManualTask struct {
	ManualTasks []*TtManualTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL manualTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ManualTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ManualTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ManualTask instance.
func (me *XsdGoPkgHasElems_ManualTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ManualTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManualTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtParallelGateway struct {
	TtGateway
}

//	If the WalkHandlers.TtParallelGateway function is not nil (ie. was set by outside code), calls it with this TtParallelGateway instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtParallelGateway instance.
func (me *TtParallelGateway) Walk() (err error) {
	if fn := WalkHandlers.TtParallelGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ParallelGateway struct {
	ParallelGateways []*TtParallelGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL parallelGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ParallelGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ParallelGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ParallelGateway instance.
func (me *XsdGoPkgHasElems_ParallelGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ParallelGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ParallelGateways {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubProcess struct {
	SubProcesses []*TtSubProcess `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL subProcess"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubProcess function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubProcess instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubProcess instance.
func (me *XsdGoPkgHasElems_SubProcess) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubProcess; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubProcesses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_ struct {
	MessageFlowRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtChoreographyTask struct {
	TtChoreographyActivity

	XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_
}

//	If the WalkHandlers.TtChoreographyTask function is not nil (ie. was set by outside code), calls it with this TtChoreographyTask instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TtChoreographyTask instance.
func (me *TtChoreographyTask) Walk() (err error) {
	if fn := WalkHandlers.TtChoreographyTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtChoreographyActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChoreographyTask struct {
	ChoreographyTasks []*TtChoreographyTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChoreographyTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChoreographyTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChoreographyTask instance.
func (me *XsdGoPkgHasElems_ChoreographyTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChoreographyTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ChoreographyTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtInclusiveGateway struct {
	TtGateway

	XsdGoPkgHasAttr_Default_XsdtIdref_
}

//	If the WalkHandlers.TtInclusiveGateway function is not nil (ie. was set by outside code), calls it with this TtInclusiveGateway instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtInclusiveGateway instance.
func (me *TtInclusiveGateway) Walk() (err error) {
	if fn := WalkHandlers.TtInclusiveGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InclusiveGateway struct {
	InclusiveGateways []*TtInclusiveGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inclusiveGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InclusiveGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InclusiveGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InclusiveGateway instance.
func (me *XsdGoPkgHasElems_InclusiveGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InclusiveGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InclusiveGateways {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_ struct {
	ConditionExpression *TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conditionExpression"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_ instance.
func (me *XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConditionExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_IsImmediate_XsdtBoolean_ struct {
	IsImmediate xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL isImmediate,attr"`
}

type XsdGoPkgHasAttr_SourceRef_XsdtIdref_ struct {
	SourceRef xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sourceRef,attr"`
}

type XsdGoPkgHasAttr_TargetRef_XsdtIdref_ struct {
	TargetRef xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL targetRef,attr"`
}

type TtSequenceFlow struct {
	XsdGoPkgHasAttr_IsImmediate_XsdtBoolean_

	XsdGoPkgHasAttr_SourceRef_XsdtIdref_

	XsdGoPkgHasAttr_TargetRef_XsdtIdref_

	TtFlowElement

	XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_
}

//	If the WalkHandlers.TtSequenceFlow function is not nil (ie. was set by outside code), calls it with this TtSequenceFlow instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TtSequenceFlow instance.
func (me *TtSequenceFlow) Walk() (err error) {
	if fn := WalkHandlers.TtSequenceFlow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtFlowElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SequenceFlow struct {
	SequenceFlows []*TtSequenceFlow `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sequenceFlow"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SequenceFlow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SequenceFlow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SequenceFlow instance.
func (me *XsdGoPkgHasElems_SequenceFlow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SequenceFlow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SequenceFlows {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtExclusiveGateway struct {
	TtGateway

	XsdGoPkgHasAttr_Default_XsdtIdref_
}

//	If the WalkHandlers.TtExclusiveGateway function is not nil (ie. was set by outside code), calls it with this TtExclusiveGateway instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtExclusiveGateway instance.
func (me *TtExclusiveGateway) Walk() (err error) {
	if fn := WalkHandlers.TtExclusiveGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExclusiveGateway struct {
	ExclusiveGateways []*TtExclusiveGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL exclusiveGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExclusiveGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExclusiveGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExclusiveGateway instance.
func (me *XsdGoPkgHasElems_ExclusiveGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExclusiveGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExclusiveGateways {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Event struct {
	Events []*TtEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL event"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Event function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Event instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Event instance.
func (me *XsdGoPkgHasElems_Event) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Event; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Events {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtIntermediateThrowEvent struct {
	TtThrowEvent
}

//	If the WalkHandlers.TtIntermediateThrowEvent function is not nil (ie. was set by outside code), calls it with this TtIntermediateThrowEvent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtIntermediateThrowEvent instance.
func (me *TtIntermediateThrowEvent) Walk() (err error) {
	if fn := WalkHandlers.TtIntermediateThrowEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IntermediateThrowEvent struct {
	IntermediateThrowEvents []*TtIntermediateThrowEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL intermediateThrowEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IntermediateThrowEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntermediateThrowEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntermediateThrowEvent instance.
func (me *XsdGoPkgHasElems_IntermediateThrowEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IntermediateThrowEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IntermediateThrowEvents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_IsInterrupting_XsdtBoolean_True struct {
	IsInterrupting xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL isInterrupting,attr"`
}

//	Returns the default value for IsInterrupting -- true
func (me XsdGoPkgHasAttr_IsInterrupting_XsdtBoolean_True) IsInterruptingDefault() xsdt.Boolean {
	return xsdt.Boolean(true)
}

type TtStartEvent struct {
	TtCatchEvent

	XsdGoPkgHasAttr_IsInterrupting_XsdtBoolean_True
}

//	If the WalkHandlers.TtStartEvent function is not nil (ie. was set by outside code), calls it with this TtStartEvent instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtStartEvent instance.
func (me *TtStartEvent) Walk() (err error) {
	if fn := WalkHandlers.TtStartEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtCatchEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StartEvent struct {
	StartEvents []*TtStartEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL startEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StartEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StartEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StartEvent instance.
func (me *XsdGoPkgHasElems_StartEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StartEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StartEvents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtDataObject struct {
	TtFlowElement

	XsdGoPkgHasElem_DataState

	XsdGoPkgHasAttr_ItemSubjectRef_XsdtQName_

	XsdGoPkgHasAttr_IsCollection_XsdtBoolean_False
}

//	If the WalkHandlers.TtDataObject function is not nil (ie. was set by outside code), calls it with this TtDataObject instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TtDataObject instance.
func (me *TtDataObject) Walk() (err error) {
	if fn := WalkHandlers.TtDataObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtFlowElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataObject struct {
	DataObjects []*TtDataObject `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataObject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataObject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataObject instance.
func (me *XsdGoPkgHasElems_DataObject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataObjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ImplicitThrowEvent struct {
	ImplicitThrowEvents []*TtImplicitThrowEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL implicitThrowEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ImplicitThrowEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ImplicitThrowEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ImplicitThrowEvent instance.
func (me *XsdGoPkgHasElems_ImplicitThrowEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ImplicitThrowEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ImplicitThrowEvents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtSendTask struct {
	XsdGoPkgHasAttr_OperationRef_XsdtQName_

	TtTask

	XsdGoPkgHasAttr_Implementation_TtImplementation_WebService

	XsdGoPkgHasAttr_MessageRef_XsdtQName_
}

//	If the WalkHandlers.TtSendTask function is not nil (ie. was set by outside code), calls it with this TtSendTask instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TtSendTask instance.
func (me *TtSendTask) Walk() (err error) {
	if fn := WalkHandlers.TtSendTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SendTask struct {
	SendTasks []*TtSendTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sendTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SendTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SendTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SendTask instance.
func (me *XsdGoPkgHasElems_SendTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SendTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SendTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtSubChoreography struct {
	TtChoreographyActivity

	XsdGoPkgHasElems_FlowElement

	XsdGoPkgHasElems_Artifact
}

//	If the WalkHandlers.TtSubChoreography function is not nil (ie. was set by outside code), calls it with this TtSubChoreography instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtSubChoreography instance.
func (me *TtSubChoreography) Walk() (err error) {
	if fn := WalkHandlers.TtSubChoreography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtChoreographyActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Artifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubChoreography struct {
	SubChoreographies []*TtSubChoreography `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL subChoreography"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubChoreography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubChoreography instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubChoreography instance.
func (me *XsdGoPkgHasElems_SubChoreography) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubChoreography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubChoreographies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtEventBasedGatewayType xsdt.String

//	Since TtEventBasedGatewayType is just a simple String type, this merely returns the current string value.
func (me TtEventBasedGatewayType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TtEventBasedGatewayType's alias type xsdt.String.
func (me TtEventBasedGatewayType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TtEventBasedGatewayType is "Exclusive".
func (me TtEventBasedGatewayType) IsExclusive() bool { return me.String() == "Exclusive" }

//	Returns true if the value of this enumerated TtEventBasedGatewayType is "Parallel".
func (me TtEventBasedGatewayType) IsParallel() bool { return me.String() == "Parallel" }

//	Since TtEventBasedGatewayType is just a simple String type, this merely sets the current value from the specified string.
func (me *TtEventBasedGatewayType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_EventGatewayType_TtEventBasedGatewayType_Exclusive struct {
	EventGatewayType TtEventBasedGatewayType `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventGatewayType,attr"`
}

//	Returns the default value for EventGatewayType -- "Exclusive"
func (me XsdGoPkgHasAttr_EventGatewayType_TtEventBasedGatewayType_Exclusive) EventGatewayTypeDefault() TtEventBasedGatewayType {
	return TtEventBasedGatewayType("Exclusive")
}

type TtEventBasedGateway struct {
	TtGateway

	XsdGoPkgHasAttr_Instantiate_XsdtBoolean_False

	XsdGoPkgHasAttr_EventGatewayType_TtEventBasedGatewayType_Exclusive
}

//	If the WalkHandlers.TtEventBasedGateway function is not nil (ie. was set by outside code), calls it with this TtEventBasedGateway instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtEventBasedGateway instance.
func (me *TtEventBasedGateway) Walk() (err error) {
	if fn := WalkHandlers.TtEventBasedGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EventBasedGateway struct {
	EventBasedGateways []*TtEventBasedGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventBasedGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventBasedGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventBasedGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventBasedGateway instance.
func (me *XsdGoPkgHasElems_EventBasedGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventBasedGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EventBasedGateways {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtBusinessRuleTask struct {
	TtTask

	XsdGoPkgHasAttr_Implementation_TtImplementation_Unspecified
}

//	If the WalkHandlers.TtBusinessRuleTask function is not nil (ie. was set by outside code), calls it with this TtBusinessRuleTask instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtBusinessRuleTask instance.
func (me *TtBusinessRuleTask) Walk() (err error) {
	if fn := WalkHandlers.TtBusinessRuleTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BusinessRuleTask struct {
	BusinessRuleTasks []*TtBusinessRuleTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL businessRuleTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BusinessRuleTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BusinessRuleTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BusinessRuleTask instance.
func (me *XsdGoPkgHasElems_BusinessRuleTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BusinessRuleTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BusinessRuleTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CalledElement_XsdtQName_ struct {
	CalledElement xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL calledElement,attr"`
}

type TtCallActivity struct {
	TtActivity

	XsdGoPkgHasAttr_CalledElement_XsdtQName_
}

//	If the WalkHandlers.TtCallActivity function is not nil (ie. was set by outside code), calls it with this TtCallActivity instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtCallActivity instance.
func (me *TtCallActivity) Walk() (err error) {
	if fn := WalkHandlers.TtCallActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CallActivity struct {
	CallActivities []*TtCallActivity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL callActivity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CallActivity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CallActivity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CallActivity instance.
func (me *XsdGoPkgHasElems_CallActivity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CallActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CallActivities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtEndEvent struct {
	TtThrowEvent
}

//	If the WalkHandlers.TtEndEvent function is not nil (ie. was set by outside code), calls it with this TtEndEvent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtEndEvent instance.
func (me *TtEndEvent) Walk() (err error) {
	if fn := WalkHandlers.TtEndEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EndEvent struct {
	EndEvents []*TtEndEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL endEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndEvent instance.
func (me *XsdGoPkgHasElems_EndEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EndEvents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CancelActivity_XsdtBoolean_True struct {
	CancelActivity xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL cancelActivity,attr"`
}

//	Returns the default value for CancelActivity -- true
func (me XsdGoPkgHasAttr_CancelActivity_XsdtBoolean_True) CancelActivityDefault() xsdt.Boolean {
	return xsdt.Boolean(true)
}

type XsdGoPkgHasAttr_AttachedToRef_XsdtQName_ struct {
	AttachedToRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL attachedToRef,attr"`
}

type TtBoundaryEvent struct {
	TtCatchEvent

	XsdGoPkgHasAttr_CancelActivity_XsdtBoolean_True

	XsdGoPkgHasAttr_AttachedToRef_XsdtQName_
}

//	If the WalkHandlers.TtBoundaryEvent function is not nil (ie. was set by outside code), calls it with this TtBoundaryEvent instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtBoundaryEvent instance.
func (me *TtBoundaryEvent) Walk() (err error) {
	if fn := WalkHandlers.TtBoundaryEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtCatchEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BoundaryEvent struct {
	BoundaryEvents []*TtBoundaryEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL boundaryEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BoundaryEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BoundaryEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BoundaryEvent instance.
func (me *XsdGoPkgHasElems_BoundaryEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BoundaryEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BoundaryEvents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FlowElement struct {
	FlowElements []*TtFlowElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowElement"`

	XsdGoPkgHasElems_ExclusiveGateway

	XsdGoPkgHasElems_InclusiveGateway

	XsdGoPkgHasElems_SequenceFlow

	XsdGoPkgHasElems_StartEvent

	XsdGoPkgHasElems_DataObject

	XsdGoPkgHasElems_Event

	XsdGoPkgHasElems_IntermediateThrowEvent

	XsdGoPkgHasElems_SubChoreography

	XsdGoPkgHasElems_EventBasedGateway

	XsdGoPkgHasElems_ImplicitThrowEvent

	XsdGoPkgHasElems_SendTask

	XsdGoPkgHasElems_EndEvent

	XsdGoPkgHasElems_BoundaryEvent

	XsdGoPkgHasElems_BusinessRuleTask

	XsdGoPkgHasElems_CallActivity

	XsdGoPkgHasElems_ReceiveTask

	XsdGoPkgHasElems_ScriptTask

	XsdGoPkgHasElems_ServiceTask

	XsdGoPkgHasElems_AdHocSubProcess

	XsdGoPkgHasElems_CallChoreography

	XsdGoPkgHasElems_IntermediateCatchEvent

	XsdGoPkgHasElems_UserTask

	XsdGoPkgHasElems_DataObjectReference

	XsdGoPkgHasElems_Task

	XsdGoPkgHasElems_Transaction

	XsdGoPkgHasElems_ComplexGateway

	XsdGoPkgHasElems_ParallelGateway

	XsdGoPkgHasElems_SubProcess

	XsdGoPkgHasElems_ChoreographyTask

	XsdGoPkgHasElems_DataStoreReference

	XsdGoPkgHasElems_ManualTask
}

//	If the WalkHandlers.XsdGoPkgHasElems_FlowElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FlowElement instance as the single argument. Then calls the Walk() method on 31/31 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FlowElement instance.
func (me *XsdGoPkgHasElems_FlowElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FlowElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ChoreographyTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataStoreReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ManualTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ParallelGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SubProcess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ExclusiveGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InclusiveGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SequenceFlow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Event.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IntermediateThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_StartEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EventBasedGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ImplicitThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SendTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SubChoreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_BoundaryEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_BusinessRuleTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CallActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EndEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdHocSubProcess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CallChoreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IntermediateCatchEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ReceiveTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ScriptTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ServiceTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataObjectReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Transaction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_UserTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ComplexGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.FlowElements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_ struct {
	DataPath *TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataPath"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_ instance.
func (me *XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CorrelationPropertyRef_XsdtQName_ struct {
	CorrelationPropertyRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyRef,attr"`
}

type TtCorrelationPropertyBinding struct {
	TtBaseElement

	XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_

	XsdGoPkgHasAttr_CorrelationPropertyRef_XsdtQName_
}

//	If the WalkHandlers.TtCorrelationPropertyBinding function is not nil (ie. was set by outside code), calls it with this TtCorrelationPropertyBinding instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtCorrelationPropertyBinding instance.
func (me *TtCorrelationPropertyBinding) Walk() (err error) {
	if fn := WalkHandlers.TtCorrelationPropertyBinding; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CorrelationPropertyBinding struct {
	CorrelationPropertyBindings []*TtCorrelationPropertyBinding `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyBinding"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CorrelationPropertyBinding function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CorrelationPropertyBinding instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CorrelationPropertyBinding instance.
func (me *XsdGoPkgHasElems_CorrelationPropertyBinding) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CorrelationPropertyBinding; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CorrelationPropertyBindings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CorrelationKeyRef_XsdtQName_ struct {
	CorrelationKeyRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKeyRef,attr"`
}

type TtCorrelationSubscription struct {
	XsdGoPkgHasElems_CorrelationPropertyBinding

	XsdGoPkgHasAttr_CorrelationKeyRef_XsdtQName_

	TtBaseElement
}

//	If the WalkHandlers.TtCorrelationSubscription function is not nil (ie. was set by outside code), calls it with this TtCorrelationSubscription instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtCorrelationSubscription instance.
func (me *TtCorrelationSubscription) Walk() (err error) {
	if fn := WalkHandlers.TtCorrelationSubscription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CorrelationPropertyBinding.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CorrelationSubscription struct {
	CorrelationSubscriptions []*TtCorrelationSubscription `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationSubscription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CorrelationSubscription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CorrelationSubscription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CorrelationSubscription instance.
func (me *XsdGoPkgHasElems_CorrelationSubscription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CorrelationSubscription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CorrelationSubscriptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_DefinitionalCollaborationRef_XsdtQName_ struct {
	DefinitionalCollaborationRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL definitionalCollaborationRef,attr"`
}

type XsdGoPkgHasAttr_IsExecutable_XsdtBoolean_ struct {
	IsExecutable xsdt.Boolean `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL isExecutable,attr"`
}

type TtProcess struct {
	XsdGoPkgHasElems_Artifact

	XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_

	XsdGoPkgHasAttr_ProcessType_TtProcessType_None

	XsdGoPkgHasAttr_IsClosed_XsdtBoolean_False

	TtCallableElement

	XsdGoPkgHasElems_Property

	XsdGoPkgHasElems_LaneSet

	XsdGoPkgHasElem_Auditing

	XsdGoPkgHasElems_FlowElement

	XsdGoPkgHasElem_Monitoring

	XsdGoPkgHasElems_CorrelationSubscription

	XsdGoPkgHasAttr_DefinitionalCollaborationRef_XsdtQName_

	XsdGoPkgHasAttr_IsExecutable_XsdtBoolean_

	XsdGoPkgHasElems_ResourceRole
}

//	If the WalkHandlers.TtProcess function is not nil (ie. was set by outside code), calls it with this TtProcess instance as the single argument. Then calls the Walk() method on 10/14 embed(s) and 0/0 field(s) belonging to this TtProcess instance.
func (me *TtProcess) Walk() (err error) {
	if fn := WalkHandlers.TtProcess; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ResourceRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CorrelationSubscription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtCallableElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Artifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Auditing.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LaneSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Monitoring.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FlowElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Process struct {
	Processes []*TtProcess `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL process"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Process function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Process instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Process instance.
func (me *XsdGoPkgHasElems_Process) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Process; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Processes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtMessageFlow struct {
	XsdGoPkgHasAttr_SourceRef_XsdtQName_

	XsdGoPkgHasAttr_TargetRef_XsdtQName_

	XsdGoPkgHasAttr_MessageRef_XsdtQName_

	TtBaseElement

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtMessageFlow function is not nil (ie. was set by outside code), calls it with this TtMessageFlow instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TtMessageFlow instance.
func (me *TtMessageFlow) Walk() (err error) {
	if fn := WalkHandlers.TtMessageFlow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MessageFlow struct {
	MessageFlows []*TtMessageFlow `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlow"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MessageFlow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MessageFlow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MessageFlow instance.
func (me *XsdGoPkgHasElems_MessageFlow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MessageFlow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MessageFlows {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtConversationNode struct {
	TtBaseElement

	XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_

	XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_

	XsdGoPkgHasElems_CorrelationKey

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtConversationNode function is not nil (ie. was set by outside code), calls it with this TtConversationNode instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TtConversationNode instance.
func (me *TtConversationNode) Walk() (err error) {
	if fn := WalkHandlers.TtConversationNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CorrelationKey.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_CalledCollaborationRef_XsdtQName_ struct {
	CalledCollaborationRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL calledCollaborationRef,attr"`
}

type TtCallConversation struct {
	XsdGoPkgHasElems_ParticipantAssociation

	XsdGoPkgHasAttr_CalledCollaborationRef_XsdtQName_

	TtConversationNode
}

//	If the WalkHandlers.TtCallConversation function is not nil (ie. was set by outside code), calls it with this TtCallConversation instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtCallConversation instance.
func (me *TtCallConversation) Walk() (err error) {
	if fn := WalkHandlers.TtCallConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ParticipantAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtConversationNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CallConversation struct {
	CallConversations []*TtCallConversation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL callConversation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CallConversation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CallConversation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CallConversation instance.
func (me *XsdGoPkgHasElems_CallConversation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CallConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CallConversations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtConversation struct {
	TtConversationNode
}

//	If the WalkHandlers.TtConversation function is not nil (ie. was set by outside code), calls it with this TtConversation instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtConversation instance.
func (me *TtConversation) Walk() (err error) {
	if fn := WalkHandlers.TtConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtConversationNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Conversation struct {
	Conversations []*TtConversation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Conversation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Conversation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Conversation instance.
func (me *XsdGoPkgHasElems_Conversation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Conversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conversations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtSubConversation struct {
	TtConversationNode

	XsdGoPkgHasElems_ConversationNode
}

//	If the WalkHandlers.TtSubConversation function is not nil (ie. was set by outside code), calls it with this TtSubConversation instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtSubConversation instance.
func (me *TtSubConversation) Walk() (err error) {
	if fn := WalkHandlers.TtSubConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtConversationNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubConversation struct {
	SubConversations []*TtSubConversation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL subConversation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubConversation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubConversation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubConversation instance.
func (me *XsdGoPkgHasElems_SubConversation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubConversations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConversationNode struct {
	ConversationNodes []*TtConversationNode `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationNode"`

	XsdGoPkgHasElems_CallConversation

	XsdGoPkgHasElems_Conversation

	XsdGoPkgHasElems_SubConversation
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConversationNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConversationNode instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConversationNode instance.
func (me *XsdGoPkgHasElems_ConversationNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConversationNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_CallConversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Conversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SubConversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.ConversationNodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_OuterConversationNodeRef_XsdtQName_ struct {
	OuterConversationNodeRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outerConversationNodeRef,attr"`
}

type XsdGoPkgHasAttr_InnerConversationNodeRef_XsdtQName_ struct {
	InnerConversationNodeRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL innerConversationNodeRef,attr"`
}

type TtConversationAssociation struct {
	XsdGoPkgHasAttr_InnerConversationNodeRef_XsdtQName_

	TtBaseElement

	XsdGoPkgHasAttr_OuterConversationNodeRef_XsdtQName_
}

//	If the WalkHandlers.TtConversationAssociation function is not nil (ie. was set by outside code), calls it with this TtConversationAssociation instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtConversationAssociation instance.
func (me *TtConversationAssociation) Walk() (err error) {
	if fn := WalkHandlers.TtConversationAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConversationAssociation struct {
	ConversationAssociations []*TtConversationAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConversationAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConversationAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConversationAssociation instance.
func (me *XsdGoPkgHasElems_ConversationAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConversationAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConversationAssociations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtConversationLink struct {
	TtBaseElement

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_SourceRef_XsdtQName_

	XsdGoPkgHasAttr_TargetRef_XsdtQName_
}

//	If the WalkHandlers.TtConversationLink function is not nil (ie. was set by outside code), calls it with this TtConversationLink instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TtConversationLink instance.
func (me *TtConversationLink) Walk() (err error) {
	if fn := WalkHandlers.TtConversationLink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConversationLink struct {
	ConversationLinks []*TtConversationLink `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationLink"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConversationLink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConversationLink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConversationLink instance.
func (me *XsdGoPkgHasElems_ConversationLink) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConversationLink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConversationLinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_ struct {
	InterfaceRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL interfaceRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_ struct {
	EndPointRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL endPointRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Maximum_XsdtInt_1 struct {
	Maximum xsdt.Int `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL maximum,attr"`
}

//	Returns the default value for Maximum -- 1
func (me XsdGoPkgHasAttr_Maximum_XsdtInt_1) MaximumDefault() xsdt.Int { return xsdt.Int(1) }

type XsdGoPkgHasAttr_Minimum_XsdtInt_0 struct {
	Minimum xsdt.Int `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL minimum,attr"`
}

//	Returns the default value for Minimum -- 0
func (me XsdGoPkgHasAttr_Minimum_XsdtInt_0) MinimumDefault() xsdt.Int { return xsdt.Int(0) }

type TtParticipantMultiplicity struct {
	XsdGoPkgHasAttr_Maximum_XsdtInt_1

	TtBaseElement

	XsdGoPkgHasAttr_Minimum_XsdtInt_0
}

//	If the WalkHandlers.TtParticipantMultiplicity function is not nil (ie. was set by outside code), calls it with this TtParticipantMultiplicity instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtParticipantMultiplicity instance.
func (me *TtParticipantMultiplicity) Walk() (err error) {
	if fn := WalkHandlers.TtParticipantMultiplicity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ParticipantMultiplicity struct {
	ParticipantMultiplicity *TtParticipantMultiplicity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantMultiplicity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ParticipantMultiplicity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ParticipantMultiplicity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ParticipantMultiplicity instance.
func (me *XsdGoPkgHasElem_ParticipantMultiplicity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ParticipantMultiplicity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ParticipantMultiplicity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ProcessRef_XsdtQName_ struct {
	ProcessRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL processRef,attr"`
}

type TtParticipant struct {
	TtBaseElement

	XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_

	XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_

	XsdGoPkgHasElem_ParticipantMultiplicity

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_ProcessRef_XsdtQName_
}

//	If the WalkHandlers.TtParticipant function is not nil (ie. was set by outside code), calls it with this TtParticipant instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TtParticipant instance.
func (me *TtParticipant) Walk() (err error) {
	if fn := WalkHandlers.TtParticipant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ParticipantMultiplicity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Participant struct {
	Participants []*TtParticipant `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participant"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Participant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Participant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Participant instance.
func (me *XsdGoPkgHasElems_Participant) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Participant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Participants {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_InnerMessageFlowRef_XsdtQName_ struct {
	InnerMessageFlowRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL innerMessageFlowRef,attr"`
}

type XsdGoPkgHasAttr_OuterMessageFlowRef_XsdtQName_ struct {
	OuterMessageFlowRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outerMessageFlowRef,attr"`
}

type TtMessageFlowAssociation struct {
	TtBaseElement

	XsdGoPkgHasAttr_InnerMessageFlowRef_XsdtQName_

	XsdGoPkgHasAttr_OuterMessageFlowRef_XsdtQName_
}

//	If the WalkHandlers.TtMessageFlowAssociation function is not nil (ie. was set by outside code), calls it with this TtMessageFlowAssociation instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtMessageFlowAssociation instance.
func (me *TtMessageFlowAssociation) Walk() (err error) {
	if fn := WalkHandlers.TtMessageFlowAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MessageFlowAssociation struct {
	MessageFlowAssociations []*TtMessageFlowAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MessageFlowAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MessageFlowAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MessageFlowAssociation instance.
func (me *XsdGoPkgHasElems_MessageFlowAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MessageFlowAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MessageFlowAssociations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_ struct {
	ChoreographyRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtCollaboration struct {
	TtRootElement

	XsdGoPkgHasElems_Artifact

	XsdGoPkgHasElems_ParticipantAssociation

	XsdGoPkgHasElems_MessageFlowAssociation

	XsdGoPkgHasElems_CorrelationKey

	XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasElems_Participant

	XsdGoPkgHasElems_MessageFlow

	XsdGoPkgHasElems_ConversationNode

	XsdGoPkgHasElems_ConversationAssociation

	XsdGoPkgHasElems_ConversationLink

	XsdGoPkgHasAttr_IsClosed_XsdtBoolean_False
}

//	If the WalkHandlers.TtCollaboration function is not nil (ie. was set by outside code), calls it with this TtCollaboration instance as the single argument. Then calls the Walk() method on 11/13 embed(s) and 0/0 field(s) belonging to this TtCollaboration instance.
func (me *TtCollaboration) Walk() (err error) {
	if fn := WalkHandlers.TtCollaboration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_MessageFlowAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CorrelationKey.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Artifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ParticipantAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ConversationAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ConversationLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Participant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MessageFlow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ConversationNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtChoreography struct {
	TtCollaboration

	XsdGoPkgHasElems_FlowElement
}

//	If the WalkHandlers.TtChoreography function is not nil (ie. was set by outside code), calls it with this TtChoreography instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TtChoreography instance.
func (me *TtChoreography) Walk() (err error) {
	if fn := WalkHandlers.TtChoreography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtCollaboration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FlowElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtGlobalChoreographyTask struct {
	TtChoreography

	XsdGoPkgHasAttr_InitiatingParticipantRef_XsdtQName_
}

//	If the WalkHandlers.TtGlobalChoreographyTask function is not nil (ie. was set by outside code), calls it with this TtGlobalChoreographyTask instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TtGlobalChoreographyTask instance.
func (me *TtGlobalChoreographyTask) Walk() (err error) {
	if fn := WalkHandlers.TtGlobalChoreographyTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtChoreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GlobalChoreographyTask struct {
	GlobalChoreographyTasks []*TtGlobalChoreographyTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalChoreographyTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GlobalChoreographyTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GlobalChoreographyTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GlobalChoreographyTask instance.
func (me *XsdGoPkgHasElems_GlobalChoreographyTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GlobalChoreographyTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GlobalChoreographyTasks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Choreography struct {
	Choreographies []*TtChoreography `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreography"`

	XsdGoPkgHasElems_GlobalChoreographyTask
}

//	If the WalkHandlers.XsdGoPkgHasElems_Choreography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Choreography instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Choreography instance.
func (me *XsdGoPkgHasElems_Choreography) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Choreography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_GlobalChoreographyTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.Choreographies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtGlobalConversation struct {
	TtCollaboration
}

//	If the WalkHandlers.TtGlobalConversation function is not nil (ie. was set by outside code), calls it with this TtGlobalConversation instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TtGlobalConversation instance.
func (me *TtGlobalConversation) Walk() (err error) {
	if fn := WalkHandlers.TtGlobalConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtCollaboration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GlobalConversation struct {
	GlobalConversations []*TtGlobalConversation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalConversation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GlobalConversation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GlobalConversation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GlobalConversation instance.
func (me *XsdGoPkgHasElems_GlobalConversation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GlobalConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GlobalConversations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Collaboration struct {
	Collaborations []*TtCollaboration `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL collaboration"`

	XsdGoPkgHasElems_Choreography

	XsdGoPkgHasElems_GlobalConversation
}

//	If the WalkHandlers.XsdGoPkgHasElems_Collaboration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Collaboration instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Collaboration instance.
func (me *XsdGoPkgHasElems_Collaboration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Collaboration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Choreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GlobalConversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.Collaborations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_ struct {
	MessagePath *TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messagePath"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_ instance.
func (me *XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MessagePath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtCorrelationPropertyRetrievalExpression struct {
	XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_

	XsdGoPkgHasAttr_MessageRef_XsdtQName_

	TtBaseElement
}

//	If the WalkHandlers.TtCorrelationPropertyRetrievalExpression function is not nil (ie. was set by outside code), calls it with this TtCorrelationPropertyRetrievalExpression instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtCorrelationPropertyRetrievalExpression instance.
func (me *TtCorrelationPropertyRetrievalExpression) Walk() (err error) {
	if fn := WalkHandlers.TtCorrelationPropertyRetrievalExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression struct {
	CorrelationPropertyRetrievalExpressions []*TtCorrelationPropertyRetrievalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyRetrievalExpression"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression instance.
func (me *XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CorrelationPropertyRetrievalExpressions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtCorrelationProperty struct {
	TtRootElement

	XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Type_XsdtQName_
}

//	If the WalkHandlers.TtCorrelationProperty function is not nil (ie. was set by outside code), calls it with this TtCorrelationProperty instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TtCorrelationProperty instance.
func (me *TtCorrelationProperty) Walk() (err error) {
	if fn := WalkHandlers.TtCorrelationProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CorrelationProperty struct {
	CorrelationProperties []*TtCorrelationProperty `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CorrelationProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CorrelationProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CorrelationProperty instance.
func (me *XsdGoPkgHasElems_CorrelationProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CorrelationProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CorrelationProperties {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtSignal struct {
	XsdGoPkgHasAttr_StructureRef_XsdtQName_

	TtRootElement

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TtSignal function is not nil (ie. was set by outside code), calls it with this TtSignal instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtSignal instance.
func (me *TtSignal) Walk() (err error) {
	if fn := WalkHandlers.TtSignal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtRootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Signal struct {
	Signals []*TtSignal `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL signal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Signal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Signal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Signal instance.
func (me *XsdGoPkgHasElems_Signal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Signal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Signals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RootElement struct {
	RootElements []*TtRootElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL rootElement"`

	XsdGoPkgHasElems_Process

	XsdGoPkgHasElems_Collaboration

	XsdGoPkgHasElems_CorrelationProperty

	XsdGoPkgHasElems_DataStore

	XsdGoPkgHasElems_GlobalScriptTask

	XsdGoPkgHasElems_GlobalUserTask

	XsdGoPkgHasElems_ItemDefinition

	XsdGoPkgHasElems_Message

	XsdGoPkgHasElems_Signal

	XsdGoPkgHasElems_Category

	XsdGoPkgHasElems_Error

	XsdGoPkgHasElems_GlobalBusinessRuleTask

	XsdGoPkgHasElems_GlobalManualTask

	XsdGoPkgHasElems_Interface

	XsdGoPkgHasElems_Resource

	XsdGoPkgHasElems_Escalation

	XsdGoPkgHasElems_EventDefinition

	XsdGoPkgHasElems_GlobalTask

	XsdGoPkgHasElems_PartnerEntity

	XsdGoPkgHasElems_EndPoint

	XsdGoPkgHasElems_PartnerRole
}

//	If the WalkHandlers.XsdGoPkgHasElems_RootElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RootElement instance as the single argument. Then calls the Walk() method on 21/21 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RootElement instance.
func (me *XsdGoPkgHasElems_RootElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RootElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Escalation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GlobalTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PartnerEntity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EndPoint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PartnerRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ItemDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Message.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Process.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Collaboration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CorrelationProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataStore.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GlobalScriptTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GlobalUserTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Signal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Resource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Error.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GlobalBusinessRuleTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GlobalManualTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Interface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.RootElements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ExporterVersion_XsdtString_ struct {
	ExporterVersion xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL exporterVersion,attr"`
}

type XsdGoPkgHasAttr_TypeLanguage_XsdtAnyURI_HttpWwwW3Org2001XMLSchema struct {
	TypeLanguage xsdt.AnyURI `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL typeLanguage,attr"`
}

//	Returns the default value for TypeLanguage -- "http://www.w3.org/2001/XMLSchema"
func (me XsdGoPkgHasAttr_TypeLanguage_XsdtAnyURI_HttpWwwW3Org2001XMLSchema) TypeLanguageDefault() xsdt.AnyURI {
	return xsdt.AnyURI("http://www.w3.org/2001/XMLSchema")
}

type XsdGoPkgHasAttr_Exporter_XsdtString_ struct {
	Exporter xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL exporter,attr"`
}

type XsdGoPkgHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL type,attr"`
}

type TtRelationshipDirection xsdt.String

//	Returns true if the value of this enumerated TtRelationshipDirection is "Forward".
func (me TtRelationshipDirection) IsForward() bool { return me.String() == "Forward" }

//	Returns true if the value of this enumerated TtRelationshipDirection is "Backward".
func (me TtRelationshipDirection) IsBackward() bool { return me.String() == "Backward" }

//	Returns true if the value of this enumerated TtRelationshipDirection is "Both".
func (me TtRelationshipDirection) IsBoth() bool { return me.String() == "Both" }

//	Since TtRelationshipDirection is just a simple String type, this merely sets the current value from the specified string.
func (me *TtRelationshipDirection) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TtRelationshipDirection is just a simple String type, this merely returns the current string value.
func (me TtRelationshipDirection) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TtRelationshipDirection's alias type xsdt.String.
func (me TtRelationshipDirection) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TtRelationshipDirection is "None".
func (me TtRelationshipDirection) IsNone() bool { return me.String() == "None" }

type XsdGoPkgHasAttr_Direction_TtRelationshipDirection_ struct {
	Direction TtRelationshipDirection `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL direction,attr"`
}

type XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_ struct {
	Targets []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL target"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtRelationship struct {
	TtBaseElement

	XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_

	XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAttr_Direction_TtRelationshipDirection_
}

//	If the WalkHandlers.TtRelationship function is not nil (ie. was set by outside code), calls it with this TtRelationship instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TtRelationship instance.
func (me *TtRelationship) Walk() (err error) {
	if fn := WalkHandlers.TtRelationship; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TtBaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Relationship struct {
	Relationships []*TtRelationship `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL relationship"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Relationship function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Relationship instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Relationship instance.
func (me *XsdGoPkgHasElems_Relationship) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Relationship; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Relationships {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDefinitions struct {
	XsdGoPkgHasAttr_ExporterVersion_XsdtString_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_TargetNamespace_XsdtAnyURI_

	XsdGoPkgHasAttr_ExpressionLanguage_XsdtAnyURI_HttpWwwW3Org1999XPath

	XsdGoPkgHasElems_Import

	XsdGoPkgHasElems_Extension

	XsdGoPkgHasElems_RootElement

	XsdGoPkgHasAttr_TypeLanguage_XsdtAnyURI_HttpWwwW3Org2001XMLSchema

	XsdGoPkgHasAttr_Exporter_XsdtString_

	bpmndi.XsdGoPkgHasElems_BPMNDiagram

	XsdGoPkgHasElems_Relationship
}

//	If the WalkHandlers.TDefinitions function is not nil (ie. was set by outside code), calls it with this TDefinitions instance as the single argument. Then calls the Walk() method on 4/12 embed(s) and 0/0 field(s) belonging to this TDefinitions instance.
func (me *TDefinitions) Walk() (err error) {
	if fn := WalkHandlers.TtDefinitions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Import.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Relationship.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Definitions struct {
	Definitions *TDefinitions `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL definitions"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Definitions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Definitions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Definitions instance.
func (me *XsdGoPkgHasElem_Definitions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Definitions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Definitions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Definitions struct {
	Definitionses []*TDefinitions `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL definitions"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Definitions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Definitions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Definitions instance.
func (me *XsdGoPkgHasElems_Definitions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Definitions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Definitionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Import struct {
	Import *TtImport `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL import"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Import function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Import instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Import instance.
func (me *XsdGoPkgHasElem_Import) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Import; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Import.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Activity struct {
	Activity *TtActivity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL activity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Activity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Activity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Activity instance.
func (me *XsdGoPkgHasElem_Activity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Activity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Activity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Activity struct {
	Activities []*TtActivity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL activity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Activity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Activity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Activity instance.
func (me *XsdGoPkgHasElems_Activity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Activity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Activities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AdHocSubProcess struct {
	AdHocSubProcess *TtAdHocSubProcess `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL adHocSubProcess"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AdHocSubProcess function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AdHocSubProcess instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AdHocSubProcess instance.
func (me *XsdGoPkgHasElem_AdHocSubProcess) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AdHocSubProcess; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AdHocSubProcess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TextAnnotation struct {
	TextAnnotation *TtTextAnnotation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL textAnnotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TextAnnotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TextAnnotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TextAnnotation instance.
func (me *XsdGoPkgHasElem_TextAnnotation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TextAnnotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextAnnotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Association struct {
	Association *TtAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL association"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Association function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Association instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Association instance.
func (me *XsdGoPkgHasElem_Association) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Association; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Association.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Group struct {
	Group *TtGroup `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL group"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Group function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Group instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Group instance.
func (me *XsdGoPkgHasElem_Group) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Group; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Group.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Artifact struct {
	Artifact *TtArtifact `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact"`

	XsdGoPkgHasElem_TextAnnotation

	XsdGoPkgHasElem_Association

	XsdGoPkgHasElem_Group
}

//	If the WalkHandlers.XsdGoPkgHasElem_Artifact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Artifact instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Artifact instance.
func (me *XsdGoPkgHasElem_Artifact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Artifact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Association.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Group.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TextAnnotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Artifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Assignment struct {
	Assignment *TtAssignment `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL assignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Assignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Assignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Assignment instance.
func (me *XsdGoPkgHasElem_Assignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Assignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Assignment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Auditing struct {
	Auditings []*TtAuditing `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Auditing function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Auditing instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Auditing instance.
func (me *XsdGoPkgHasElems_Auditing) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Auditing; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Auditings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BaseElement struct {
	BaseElement *TtBaseElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL baseElement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BaseElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BaseElement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BaseElement instance.
func (me *XsdGoPkgHasElem_BaseElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BaseElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BaseElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BaseElement struct {
	BaseElements []*TtBaseElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL baseElement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BaseElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BaseElement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BaseElement instance.
func (me *XsdGoPkgHasElems_BaseElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BaseElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BaseElements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BaseElementWithMixedContent struct {
	BaseElementWithMixedContent *TtBaseElementWithMixedContent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL baseElementWithMixedContent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BaseElementWithMixedContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BaseElementWithMixedContent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BaseElementWithMixedContent instance.
func (me *XsdGoPkgHasElem_BaseElementWithMixedContent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BaseElementWithMixedContent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BaseElementWithMixedContent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BaseElementWithMixedContent struct {
	BaseElementWithMixedContents []*TtBaseElementWithMixedContent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL baseElementWithMixedContent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BaseElementWithMixedContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BaseElementWithMixedContent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BaseElementWithMixedContent instance.
func (me *XsdGoPkgHasElems_BaseElementWithMixedContent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BaseElementWithMixedContent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BaseElementWithMixedContents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BoundaryEvent struct {
	BoundaryEvent *TtBoundaryEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL boundaryEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BoundaryEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BoundaryEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BoundaryEvent instance.
func (me *XsdGoPkgHasElem_BoundaryEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BoundaryEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BoundaryEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BusinessRuleTask struct {
	BusinessRuleTask *TtBusinessRuleTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL businessRuleTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BusinessRuleTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BusinessRuleTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BusinessRuleTask instance.
func (me *XsdGoPkgHasElem_BusinessRuleTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BusinessRuleTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BusinessRuleTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CallableElement struct {
	CallableElement *TtCallableElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL callableElement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CallableElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CallableElement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CallableElement instance.
func (me *XsdGoPkgHasElem_CallableElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CallableElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CallableElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CallableElement struct {
	CallableElements []*TtCallableElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL callableElement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CallableElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CallableElement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CallableElement instance.
func (me *XsdGoPkgHasElems_CallableElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CallableElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CallableElements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CallActivity struct {
	CallActivity *TtCallActivity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL callActivity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CallActivity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CallActivity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CallActivity instance.
func (me *XsdGoPkgHasElem_CallActivity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CallActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CallActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CallChoreography struct {
	CallChoreography *TtCallChoreography `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL callChoreography"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CallChoreography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CallChoreography instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CallChoreography instance.
func (me *XsdGoPkgHasElem_CallChoreography) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CallChoreography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CallChoreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CallConversation struct {
	CallConversation *TtCallConversation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL callConversation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CallConversation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CallConversation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CallConversation instance.
func (me *XsdGoPkgHasElem_CallConversation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CallConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CallConversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CancelEventDefinition struct {
	CancelEventDefinition *TtCancelEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL cancelEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CancelEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CancelEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CancelEventDefinition instance.
func (me *XsdGoPkgHasElem_CancelEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CancelEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CancelEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CatchEvent struct {
	CatchEvent *TtCatchEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL catchEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CatchEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CatchEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CatchEvent instance.
func (me *XsdGoPkgHasElem_CatchEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CatchEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CatchEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CatchEvent struct {
	CatchEvents []*TtCatchEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL catchEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CatchEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CatchEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CatchEvent instance.
func (me *XsdGoPkgHasElems_CatchEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CatchEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CatchEvents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Category struct {
	Category *TtCategory `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL category"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Category function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Category instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Category instance.
func (me *XsdGoPkgHasElem_Category) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Category; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CategoryValue struct {
	CategoryValue *TtCategoryValue `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CategoryValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CategoryValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CategoryValue instance.
func (me *XsdGoPkgHasElem_CategoryValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CategoryValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CategoryValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GlobalChoreographyTask struct {
	GlobalChoreographyTask *TtGlobalChoreographyTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalChoreographyTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GlobalChoreographyTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GlobalChoreographyTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GlobalChoreographyTask instance.
func (me *XsdGoPkgHasElem_GlobalChoreographyTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GlobalChoreographyTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GlobalChoreographyTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Choreography struct {
	Choreography *TtChoreography `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreography"`

	XsdGoPkgHasElem_GlobalChoreographyTask
}

//	If the WalkHandlers.XsdGoPkgHasElem_Choreography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Choreography instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Choreography instance.
func (me *XsdGoPkgHasElem_Choreography) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Choreography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_GlobalChoreographyTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Choreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChoreographyActivity struct {
	ChoreographyActivity *TtChoreographyActivity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyActivity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChoreographyActivity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChoreographyActivity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ChoreographyActivity instance.
func (me *XsdGoPkgHasElem_ChoreographyActivity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChoreographyActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ChoreographyActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChoreographyActivity struct {
	ChoreographyActivities []*TtChoreographyActivity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyActivity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChoreographyActivity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChoreographyActivity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChoreographyActivity instance.
func (me *XsdGoPkgHasElems_ChoreographyActivity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChoreographyActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ChoreographyActivities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChoreographyTask struct {
	ChoreographyTask *TtChoreographyTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChoreographyTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChoreographyTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ChoreographyTask instance.
func (me *XsdGoPkgHasElem_ChoreographyTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChoreographyTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ChoreographyTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GlobalConversation struct {
	GlobalConversation *TtGlobalConversation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalConversation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GlobalConversation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GlobalConversation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GlobalConversation instance.
func (me *XsdGoPkgHasElem_GlobalConversation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GlobalConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GlobalConversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Collaboration struct {
	Collaboration *TtCollaboration `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL collaboration"`

	XsdGoPkgHasElem_Choreography

	XsdGoPkgHasElem_GlobalConversation
}

//	If the WalkHandlers.XsdGoPkgHasElem_Collaboration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Collaboration instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Collaboration instance.
func (me *XsdGoPkgHasElem_Collaboration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Collaboration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Choreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GlobalConversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Collaboration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompensateEventDefinition struct {
	CompensateEventDefinition *TtCompensateEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL compensateEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompensateEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompensateEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompensateEventDefinition instance.
func (me *XsdGoPkgHasElem_CompensateEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompensateEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompensateEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ComplexBehaviorDefinition struct {
	ComplexBehaviorDefinition *TtComplexBehaviorDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL complexBehaviorDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ComplexBehaviorDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ComplexBehaviorDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ComplexBehaviorDefinition instance.
func (me *XsdGoPkgHasElem_ComplexBehaviorDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ComplexBehaviorDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ComplexBehaviorDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ComplexGateway struct {
	ComplexGateway *TtComplexGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL complexGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ComplexGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ComplexGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ComplexGateway instance.
func (me *XsdGoPkgHasElem_ComplexGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ComplexGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ComplexGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConditionalEventDefinition struct {
	ConditionalEventDefinition *TtConditionalEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conditionalEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConditionalEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConditionalEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConditionalEventDefinition instance.
func (me *XsdGoPkgHasElem_ConditionalEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConditionalEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConditionalEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Conversation struct {
	Conversation *TtConversation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Conversation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Conversation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Conversation instance.
func (me *XsdGoPkgHasElem_Conversation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Conversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Conversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConversationAssociation struct {
	ConversationAssociation *TtConversationAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConversationAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConversationAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConversationAssociation instance.
func (me *XsdGoPkgHasElem_ConversationAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConversationAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConversationAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConversationLink struct {
	ConversationLink *TtConversationLink `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationLink"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConversationLink function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConversationLink instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConversationLink instance.
func (me *XsdGoPkgHasElem_ConversationLink) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConversationLink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConversationLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubConversation struct {
	SubConversation *TtSubConversation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL subConversation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubConversation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubConversation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubConversation instance.
func (me *XsdGoPkgHasElem_SubConversation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubConversation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubConversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConversationNode struct {
	ConversationNode *TtConversationNode `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationNode"`

	XsdGoPkgHasElem_CallConversation

	XsdGoPkgHasElem_Conversation

	XsdGoPkgHasElem_SubConversation
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConversationNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConversationNode instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConversationNode instance.
func (me *XsdGoPkgHasElem_ConversationNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConversationNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Conversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubConversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CallConversation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.ConversationNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CorrelationKey struct {
	CorrelationKey *TtCorrelationKey `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CorrelationKey function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CorrelationKey instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CorrelationKey instance.
func (me *XsdGoPkgHasElem_CorrelationKey) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CorrelationKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CorrelationKey.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CorrelationProperty struct {
	CorrelationProperty *TtCorrelationProperty `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CorrelationProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CorrelationProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CorrelationProperty instance.
func (me *XsdGoPkgHasElem_CorrelationProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CorrelationProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CorrelationProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CorrelationPropertyBinding struct {
	CorrelationPropertyBinding *TtCorrelationPropertyBinding `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyBinding"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CorrelationPropertyBinding function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CorrelationPropertyBinding instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CorrelationPropertyBinding instance.
func (me *XsdGoPkgHasElem_CorrelationPropertyBinding) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CorrelationPropertyBinding; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CorrelationPropertyBinding.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CorrelationPropertyRetrievalExpression struct {
	CorrelationPropertyRetrievalExpression *TtCorrelationPropertyRetrievalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyRetrievalExpression"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CorrelationPropertyRetrievalExpression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CorrelationPropertyRetrievalExpression instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CorrelationPropertyRetrievalExpression instance.
func (me *XsdGoPkgHasElem_CorrelationPropertyRetrievalExpression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CorrelationPropertyRetrievalExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CorrelationPropertyRetrievalExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CorrelationSubscription struct {
	CorrelationSubscription *TtCorrelationSubscription `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationSubscription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CorrelationSubscription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CorrelationSubscription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CorrelationSubscription instance.
func (me *XsdGoPkgHasElem_CorrelationSubscription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CorrelationSubscription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CorrelationSubscription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataAssociation struct {
	DataAssociation *TtDataAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataAssociation instance.
func (me *XsdGoPkgHasElem_DataAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataAssociation struct {
	DataAssociations []*TtDataAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataAssociation instance.
func (me *XsdGoPkgHasElems_DataAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataAssociations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataInput struct {
	DataInput *TtDataInput `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInput"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataInput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataInput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataInput instance.
func (me *XsdGoPkgHasElem_DataInput) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataInput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataInput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataInputAssociation struct {
	DataInputAssociation *TtDataInputAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataInputAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataInputAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataInputAssociation instance.
func (me *XsdGoPkgHasElem_DataInputAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataInputAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataInputAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataObject struct {
	DataObject *TtDataObject `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataObject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataObject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataObject instance.
func (me *XsdGoPkgHasElem_DataObject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataObjectReference struct {
	DataObjectReference *TtDataObjectReference `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataObjectReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataObjectReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataObjectReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataObjectReference instance.
func (me *XsdGoPkgHasElem_DataObjectReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataObjectReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataObjectReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataOutput struct {
	DataOutput *TtDataOutput `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutput"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataOutput function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataOutput instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataOutput instance.
func (me *XsdGoPkgHasElem_DataOutput) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataOutput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataOutput.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataOutputAssociation struct {
	DataOutputAssociation *TtDataOutputAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataOutputAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataOutputAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataOutputAssociation instance.
func (me *XsdGoPkgHasElem_DataOutputAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataOutputAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataOutputAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataState struct {
	DataStates []*TtDataState `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataState"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataState instance.
func (me *XsdGoPkgHasElems_DataState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataStates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataStore struct {
	DataStore *TtDataStore `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataStore"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataStore function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataStore instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataStore instance.
func (me *XsdGoPkgHasElem_DataStore) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataStore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataStore.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataStoreReference struct {
	DataStoreReference *TtDataStoreReference `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataStoreReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataStoreReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataStoreReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataStoreReference instance.
func (me *XsdGoPkgHasElem_DataStoreReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataStoreReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataStoreReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Documentation struct {
	Documentation *TtDocumentation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Documentation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Documentation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Documentation instance.
func (me *XsdGoPkgHasElem_Documentation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Documentation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Documentation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EndEvent struct {
	EndEvent *TtEndEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL endEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EndEvent instance.
func (me *XsdGoPkgHasElem_EndEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EndEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EndPoint struct {
	EndPoint *TtEndPoint `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL endPoint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndPoint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndPoint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EndPoint instance.
func (me *XsdGoPkgHasElem_EndPoint) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndPoint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EndPoint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Error struct {
	Error *TtError `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL error"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Error function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Error instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Error instance.
func (me *XsdGoPkgHasElem_Error) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Error; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Error.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ErrorEventDefinition struct {
	ErrorEventDefinition *TtErrorEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL errorEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ErrorEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ErrorEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ErrorEventDefinition instance.
func (me *XsdGoPkgHasElem_ErrorEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ErrorEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ErrorEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Escalation struct {
	Escalation *TtEscalation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL escalation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Escalation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Escalation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Escalation instance.
func (me *XsdGoPkgHasElem_Escalation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Escalation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Escalation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EscalationEventDefinition struct {
	EscalationEventDefinition *TtEscalationEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL escalationEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EscalationEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EscalationEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EscalationEventDefinition instance.
func (me *XsdGoPkgHasElem_EscalationEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EscalationEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EscalationEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Event struct {
	Event *TtEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL event"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Event function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Event instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Event instance.
func (me *XsdGoPkgHasElem_Event) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Event; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Event.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EventBasedGateway struct {
	EventBasedGateway *TtEventBasedGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventBasedGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventBasedGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventBasedGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EventBasedGateway instance.
func (me *XsdGoPkgHasElem_EventBasedGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventBasedGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EventBasedGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SignalEventDefinition struct {
	SignalEventDefinition *TtSignalEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL signalEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SignalEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SignalEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SignalEventDefinition instance.
func (me *XsdGoPkgHasElem_SignalEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SignalEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignalEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TerminateEventDefinition struct {
	TerminateEventDefinition *TtTerminateEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL terminateEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TerminateEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TerminateEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TerminateEventDefinition instance.
func (me *XsdGoPkgHasElem_TerminateEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TerminateEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TerminateEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LinkEventDefinition struct {
	LinkEventDefinition *TtLinkEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL linkEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LinkEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LinkEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LinkEventDefinition instance.
func (me *XsdGoPkgHasElem_LinkEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LinkEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LinkEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MessageEventDefinition struct {
	MessageEventDefinition *TtMessageEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MessageEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MessageEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MessageEventDefinition instance.
func (me *XsdGoPkgHasElem_MessageEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MessageEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MessageEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TimerEventDefinition struct {
	TimerEventDefinition *TtTimerEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timerEventDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimerEventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimerEventDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TimerEventDefinition instance.
func (me *XsdGoPkgHasElem_TimerEventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TimerEventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimerEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EventDefinition struct {
	EventDefinition *TtEventDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition"`

	XsdGoPkgHasElem_ErrorEventDefinition

	XsdGoPkgHasElem_LinkEventDefinition

	XsdGoPkgHasElem_MessageEventDefinition

	XsdGoPkgHasElem_TimerEventDefinition

	XsdGoPkgHasElem_ConditionalEventDefinition

	XsdGoPkgHasElem_CompensateEventDefinition

	XsdGoPkgHasElem_EscalationEventDefinition

	XsdGoPkgHasElem_SignalEventDefinition

	XsdGoPkgHasElem_TerminateEventDefinition

	XsdGoPkgHasElem_CancelEventDefinition
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventDefinition instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EventDefinition instance.
func (me *XsdGoPkgHasElem_EventDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CancelEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompensateEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EscalationEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignalEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TerminateEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConditionalEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ErrorEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LinkEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MessageEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimerEventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.EventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExclusiveGateway struct {
	ExclusiveGateway *TtExclusiveGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL exclusiveGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExclusiveGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExclusiveGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExclusiveGateway instance.
func (me *XsdGoPkgHasElem_ExclusiveGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExclusiveGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExclusiveGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FormalExpression struct {
	FormalExpressions []*TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL formalExpression"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FormalExpression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FormalExpression instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FormalExpression instance.
func (me *XsdGoPkgHasElems_FormalExpression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FormalExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FormalExpressions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Expression struct {
	Expressions []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL expression"`

	XsdGoPkgHasElems_FormalExpression
}

//	If the WalkHandlers.XsdGoPkgHasElems_Expression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Expression instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Expression instance.
func (me *XsdGoPkgHasElems_Expression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Expression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FormalExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.Expressions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Extension struct {
	Extension *TtExtension `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extension"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Extension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Extension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Extension instance.
func (me *XsdGoPkgHasElem_Extension) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Extension; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExtensionElements struct {
	ExtensionElementses []*TtExtensionElements `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExtensionElements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExtensionElements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExtensionElements instance.
func (me *XsdGoPkgHasElems_ExtensionElements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExtensionElements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExtensionElementses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReceiveTask struct {
	ReceiveTask *TtReceiveTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL receiveTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReceiveTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReceiveTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReceiveTask instance.
func (me *XsdGoPkgHasElem_ReceiveTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReceiveTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReceiveTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IntermediateThrowEvent struct {
	IntermediateThrowEvent *TtIntermediateThrowEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL intermediateThrowEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IntermediateThrowEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntermediateThrowEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IntermediateThrowEvent instance.
func (me *XsdGoPkgHasElem_IntermediateThrowEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IntermediateThrowEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IntermediateThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UserTask struct {
	UserTask *TtUserTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL userTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UserTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UserTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UserTask instance.
func (me *XsdGoPkgHasElem_UserTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UserTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UserTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ScriptTask struct {
	ScriptTask *TtScriptTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL scriptTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ScriptTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ScriptTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ScriptTask instance.
func (me *XsdGoPkgHasElem_ScriptTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ScriptTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ScriptTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StartEvent struct {
	StartEvent *TtStartEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL startEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StartEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StartEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StartEvent instance.
func (me *XsdGoPkgHasElem_StartEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StartEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StartEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Task struct {
	Task *TtTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL task"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Task function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Task instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Task instance.
func (me *XsdGoPkgHasElem_Task) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Task; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InclusiveGateway struct {
	InclusiveGateway *TtInclusiveGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inclusiveGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InclusiveGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InclusiveGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InclusiveGateway instance.
func (me *XsdGoPkgHasElem_InclusiveGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InclusiveGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InclusiveGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ManualTask struct {
	ManualTask *TtManualTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL manualTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ManualTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ManualTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ManualTask instance.
func (me *XsdGoPkgHasElem_ManualTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ManualTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManualTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ParallelGateway struct {
	ParallelGateway *TtParallelGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL parallelGateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ParallelGateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ParallelGateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ParallelGateway instance.
func (me *XsdGoPkgHasElem_ParallelGateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ParallelGateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ParallelGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Transaction struct {
	Transaction *TtTransaction `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL transaction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Transaction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Transaction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Transaction instance.
func (me *XsdGoPkgHasElem_Transaction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Transaction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transaction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubChoreography struct {
	SubChoreography *TtSubChoreography `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL subChoreography"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubChoreography function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubChoreography instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubChoreography instance.
func (me *XsdGoPkgHasElem_SubChoreography) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubChoreography; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubChoreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ImplicitThrowEvent struct {
	ImplicitThrowEvent *TtImplicitThrowEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL implicitThrowEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ImplicitThrowEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ImplicitThrowEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ImplicitThrowEvent instance.
func (me *XsdGoPkgHasElem_ImplicitThrowEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ImplicitThrowEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ImplicitThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IntermediateCatchEvent struct {
	IntermediateCatchEvent *TtIntermediateCatchEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL intermediateCatchEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IntermediateCatchEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntermediateCatchEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IntermediateCatchEvent instance.
func (me *XsdGoPkgHasElem_IntermediateCatchEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IntermediateCatchEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IntermediateCatchEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SendTask struct {
	SendTask *TtSendTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sendTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SendTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SendTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SendTask instance.
func (me *XsdGoPkgHasElem_SendTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SendTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SendTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ServiceTask struct {
	ServiceTask *TtServiceTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL serviceTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ServiceTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ServiceTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ServiceTask instance.
func (me *XsdGoPkgHasElem_ServiceTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ServiceTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SequenceFlow struct {
	SequenceFlow *TtSequenceFlow `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sequenceFlow"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SequenceFlow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SequenceFlow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SequenceFlow instance.
func (me *XsdGoPkgHasElem_SequenceFlow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SequenceFlow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SequenceFlow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubProcess struct {
	SubProcess *TtSubProcess `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL subProcess"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubProcess function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubProcess instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubProcess instance.
func (me *XsdGoPkgHasElem_SubProcess) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubProcess; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubProcess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FlowElement struct {
	FlowElement *TtFlowElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowElement"`

	XsdGoPkgHasElem_SubChoreography

	XsdGoPkgHasElem_BusinessRuleTask

	XsdGoPkgHasElem_CallChoreography

	XsdGoPkgHasElem_EndEvent

	XsdGoPkgHasElem_Event

	XsdGoPkgHasElem_ImplicitThrowEvent

	XsdGoPkgHasElem_AdHocSubProcess

	XsdGoPkgHasElem_DataObject

	XsdGoPkgHasElem_IntermediateCatchEvent

	XsdGoPkgHasElem_SendTask

	XsdGoPkgHasElem_ServiceTask

	XsdGoPkgHasElem_DataStoreReference

	XsdGoPkgHasElem_EventBasedGateway

	XsdGoPkgHasElem_SequenceFlow

	XsdGoPkgHasElem_SubProcess

	XsdGoPkgHasElem_BoundaryEvent

	XsdGoPkgHasElem_CallActivity

	XsdGoPkgHasElem_ReceiveTask

	XsdGoPkgHasElem_DataObjectReference

	XsdGoPkgHasElem_ChoreographyTask

	XsdGoPkgHasElem_IntermediateThrowEvent

	XsdGoPkgHasElem_UserTask

	XsdGoPkgHasElem_ScriptTask

	XsdGoPkgHasElem_StartEvent

	XsdGoPkgHasElem_Task

	XsdGoPkgHasElem_ComplexGateway

	XsdGoPkgHasElem_ExclusiveGateway

	XsdGoPkgHasElem_InclusiveGateway

	XsdGoPkgHasElem_ManualTask

	XsdGoPkgHasElem_ParallelGateway

	XsdGoPkgHasElem_Transaction
}

//	If the WalkHandlers.XsdGoPkgHasElem_FlowElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FlowElement instance as the single argument. Then calls the Walk() method on 31/31 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FlowElement instance.
func (me *XsdGoPkgHasElem_FlowElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FlowElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CallChoreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Event.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ImplicitThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubChoreography.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BusinessRuleTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IntermediateCatchEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SendTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ServiceTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdHocSubProcess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EventBasedGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SequenceFlow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubProcess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataStoreReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CallActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BoundaryEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReceiveTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataObjectReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IntermediateThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ChoreographyTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExclusiveGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InclusiveGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ManualTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ParallelGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ScriptTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Task.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ComplexGateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Transaction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.FlowElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FlowNode struct {
	FlowNode *TtFlowNode `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowNode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FlowNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FlowNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FlowNode instance.
func (me *XsdGoPkgHasElem_FlowNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FlowNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FlowNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FlowNode struct {
	FlowNodes []*TtFlowNode `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowNode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FlowNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FlowNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FlowNode instance.
func (me *XsdGoPkgHasElems_FlowNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FlowNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FlowNodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Gateway struct {
	Gateway *TtGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL gateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Gateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Gateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Gateway instance.
func (me *XsdGoPkgHasElem_Gateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Gateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Gateway.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Gateway struct {
	Gateways []*TtGateway `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL gateway"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Gateway function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Gateway instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Gateway instance.
func (me *XsdGoPkgHasElems_Gateway) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Gateway; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Gateways {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GlobalBusinessRuleTask struct {
	GlobalBusinessRuleTask *TtGlobalBusinessRuleTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalBusinessRuleTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GlobalBusinessRuleTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GlobalBusinessRuleTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GlobalBusinessRuleTask instance.
func (me *XsdGoPkgHasElem_GlobalBusinessRuleTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GlobalBusinessRuleTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GlobalBusinessRuleTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GlobalManualTask struct {
	GlobalManualTask *TtGlobalManualTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalManualTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GlobalManualTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GlobalManualTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GlobalManualTask instance.
func (me *XsdGoPkgHasElem_GlobalManualTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GlobalManualTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GlobalManualTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GlobalScriptTask struct {
	GlobalScriptTask *TtGlobalScriptTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalScriptTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GlobalScriptTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GlobalScriptTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GlobalScriptTask instance.
func (me *XsdGoPkgHasElem_GlobalScriptTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GlobalScriptTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GlobalScriptTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GlobalTask struct {
	GlobalTask *TtGlobalTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GlobalTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GlobalTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GlobalTask instance.
func (me *XsdGoPkgHasElem_GlobalTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GlobalTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GlobalTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GlobalUserTask struct {
	GlobalUserTask *TtGlobalUserTask `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL globalUserTask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GlobalUserTask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GlobalUserTask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GlobalUserTask instance.
func (me *XsdGoPkgHasElem_GlobalUserTask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GlobalUserTask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GlobalUserTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HumanPerformer struct {
	HumanPerformer *TtHumanPerformer `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL humanPerformer"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HumanPerformer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HumanPerformer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HumanPerformer instance.
func (me *XsdGoPkgHasElem_HumanPerformer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HumanPerformer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HumanPerformer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Interface struct {
	Interface *TtInterface `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL interface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Interface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Interface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Interface instance.
func (me *XsdGoPkgHasElem_Interface) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Interface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Interface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IoBinding struct {
	IoBinding *TtInputOutputBinding `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioBinding"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IoBinding function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IoBinding instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IoBinding instance.
func (me *XsdGoPkgHasElem_IoBinding) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IoBinding; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IoBinding.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IoSpecification struct {
	IoSpecifications []*TtInputOutputSpecification `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IoSpecification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IoSpecification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IoSpecification instance.
func (me *XsdGoPkgHasElems_IoSpecification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IoSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IoSpecifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ItemDefinition struct {
	ItemDefinition *TtItemDefinition `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL itemDefinition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ItemDefinition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ItemDefinition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ItemDefinition instance.
func (me *XsdGoPkgHasElem_ItemDefinition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ItemDefinition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ItemDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Lane struct {
	Lane *TtLane `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL lane"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lane function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lane instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lane instance.
func (me *XsdGoPkgHasElem_Lane) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Lane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Lane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LaneSet struct {
	LaneSet *TtLaneSet `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL laneSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LaneSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LaneSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LaneSet instance.
func (me *XsdGoPkgHasElem_LaneSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LaneSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LaneSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MultiInstanceLoopCharacteristics struct {
	MultiInstanceLoopCharacteristicses []*TtMultiInstanceLoopCharacteristics `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL multiInstanceLoopCharacteristics"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MultiInstanceLoopCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MultiInstanceLoopCharacteristics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MultiInstanceLoopCharacteristics instance.
func (me *XsdGoPkgHasElems_MultiInstanceLoopCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MultiInstanceLoopCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MultiInstanceLoopCharacteristicses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StandardLoopCharacteristics struct {
	StandardLoopCharacteristicses []*TtStandardLoopCharacteristics `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL standardLoopCharacteristics"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StandardLoopCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StandardLoopCharacteristics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StandardLoopCharacteristics instance.
func (me *XsdGoPkgHasElems_StandardLoopCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StandardLoopCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StandardLoopCharacteristicses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LoopCharacteristics struct {
	LoopCharacteristicses []*TtLoopCharacteristics `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics"`

	XsdGoPkgHasElems_MultiInstanceLoopCharacteristics

	XsdGoPkgHasElems_StandardLoopCharacteristics
}

//	If the WalkHandlers.XsdGoPkgHasElems_LoopCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LoopCharacteristics instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LoopCharacteristics instance.
func (me *XsdGoPkgHasElems_LoopCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LoopCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_StandardLoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MultiInstanceLoopCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.LoopCharacteristicses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Message struct {
	Message *TtMessage `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL message"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Message function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Message instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Message instance.
func (me *XsdGoPkgHasElem_Message) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Message; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Message.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MessageFlow struct {
	MessageFlow *TtMessageFlow `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlow"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MessageFlow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MessageFlow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MessageFlow instance.
func (me *XsdGoPkgHasElem_MessageFlow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MessageFlow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MessageFlow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MessageFlowAssociation struct {
	MessageFlowAssociation *TtMessageFlowAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MessageFlowAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MessageFlowAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MessageFlowAssociation instance.
func (me *XsdGoPkgHasElem_MessageFlowAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MessageFlowAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MessageFlowAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Monitoring struct {
	Monitorings []*TtMonitoring `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Monitoring function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Monitoring instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Monitoring instance.
func (me *XsdGoPkgHasElems_Monitoring) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Monitoring; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Monitorings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Operation struct {
	Operation *TtOperation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL operation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Operation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Operation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Operation instance.
func (me *XsdGoPkgHasElem_Operation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Operation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Operation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Participant struct {
	Participant *TtParticipant `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participant"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Participant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Participant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Participant instance.
func (me *XsdGoPkgHasElem_Participant) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Participant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Participant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ParticipantAssociation struct {
	ParticipantAssociation *TtParticipantAssociation `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantAssociation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ParticipantAssociation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ParticipantAssociation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ParticipantAssociation instance.
func (me *XsdGoPkgHasElem_ParticipantAssociation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ParticipantAssociation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ParticipantAssociation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ParticipantMultiplicity struct {
	ParticipantMultiplicities []*TtParticipantMultiplicity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantMultiplicity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ParticipantMultiplicity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ParticipantMultiplicity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ParticipantMultiplicity instance.
func (me *XsdGoPkgHasElems_ParticipantMultiplicity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ParticipantMultiplicity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ParticipantMultiplicities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PartnerEntity struct {
	PartnerEntity *TtPartnerEntity `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL partnerEntity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PartnerEntity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PartnerEntity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PartnerEntity instance.
func (me *XsdGoPkgHasElem_PartnerEntity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PartnerEntity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PartnerEntity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PartnerRole struct {
	PartnerRole *TtPartnerRole `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL partnerRole"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PartnerRole function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PartnerRole instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PartnerRole instance.
func (me *XsdGoPkgHasElem_PartnerRole) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PartnerRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PartnerRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PotentialOwner struct {
	PotentialOwner *TtPotentialOwner `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL potentialOwner"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PotentialOwner function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PotentialOwner instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PotentialOwner instance.
func (me *XsdGoPkgHasElem_PotentialOwner) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PotentialOwner; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PotentialOwner.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Performer struct {
	Performer *TtPerformer `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL performer"`

	XsdGoPkgHasElem_HumanPerformer

	XsdGoPkgHasElem_PotentialOwner
}

//	If the WalkHandlers.XsdGoPkgHasElem_Performer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Performer instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Performer instance.
func (me *XsdGoPkgHasElem_Performer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Performer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HumanPerformer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PotentialOwner.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Performer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Process struct {
	Process *TtProcess `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL process"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Process function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Process instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Process instance.
func (me *XsdGoPkgHasElem_Process) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Process; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Process.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Property struct {
	Property *TtProperty `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Property function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Property instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Property instance.
func (me *XsdGoPkgHasElem_Property) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Property; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Property.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Relationship struct {
	Relationship *TtRelationship `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL relationship"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Relationship function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Relationship instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Relationship instance.
func (me *XsdGoPkgHasElem_Relationship) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Relationship; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Relationship.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Rendering struct {
	Rendering *TtRendering `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL rendering"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Rendering function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Rendering instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Rendering instance.
func (me *XsdGoPkgHasElem_Rendering) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Rendering; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rendering.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Resource struct {
	Resource *TtResource `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resource"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Resource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Resource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Resource instance.
func (me *XsdGoPkgHasElem_Resource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Resource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Resource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResourceAssignmentExpression struct {
	ResourceAssignmentExpressions []*TtResourceAssignmentExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceAssignmentExpression"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResourceAssignmentExpression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResourceAssignmentExpression instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResourceAssignmentExpression instance.
func (me *XsdGoPkgHasElems_ResourceAssignmentExpression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResourceAssignmentExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ResourceAssignmentExpressions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResourceParameter struct {
	ResourceParameter *TtResourceParameter `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceParameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResourceParameter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResourceParameter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResourceParameter instance.
func (me *XsdGoPkgHasElem_ResourceParameter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResourceParameter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ResourceParameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResourceParameterBinding struct {
	ResourceParameterBinding *TtResourceParameterBinding `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceParameterBinding"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResourceParameterBinding function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResourceParameterBinding instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResourceParameterBinding instance.
func (me *XsdGoPkgHasElem_ResourceParameterBinding) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResourceParameterBinding; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ResourceParameterBinding.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResourceRole struct {
	ResourceRole *TtResourceRole `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole"`

	XsdGoPkgHasElem_Performer
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResourceRole function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResourceRole instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResourceRole instance.
func (me *XsdGoPkgHasElem_ResourceRole) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResourceRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Performer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.ResourceRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Signal struct {
	Signal *TtSignal `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL signal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Signal function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Signal instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Signal instance.
func (me *XsdGoPkgHasElem_Signal) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Signal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Signal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RootElement struct {
	RootElement *TtRootElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL rootElement"`

	XsdGoPkgHasElem_Process

	XsdGoPkgHasElem_Error

	XsdGoPkgHasElem_EventDefinition

	XsdGoPkgHasElem_GlobalManualTask

	XsdGoPkgHasElem_Message

	XsdGoPkgHasElem_PartnerEntity

	XsdGoPkgHasElem_PartnerRole

	XsdGoPkgHasElem_Signal

	XsdGoPkgHasElem_CorrelationProperty

	XsdGoPkgHasElem_GlobalBusinessRuleTask

	XsdGoPkgHasElem_GlobalUserTask

	XsdGoPkgHasElem_Interface

	XsdGoPkgHasElem_Resource

	XsdGoPkgHasElem_Escalation

	XsdGoPkgHasElem_GlobalTask

	XsdGoPkgHasElem_DataStore

	XsdGoPkgHasElem_EndPoint

	XsdGoPkgHasElem_GlobalScriptTask

	XsdGoPkgHasElem_ItemDefinition

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Collaboration
}

//	If the WalkHandlers.XsdGoPkgHasElem_RootElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RootElement instance as the single argument. Then calls the Walk() method on 21/21 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RootElement instance.
func (me *XsdGoPkgHasElem_RootElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RootElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Escalation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GlobalTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GlobalUserTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Interface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Resource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ItemDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Collaboration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DataStore.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndPoint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GlobalScriptTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Error.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EventDefinition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Process.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PartnerRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Signal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CorrelationProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GlobalBusinessRuleTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GlobalManualTask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Message.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PartnerEntity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.RootElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Script struct {
	Scripts []*TtScript `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL script"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Script function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Script instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Script instance.
func (me *XsdGoPkgHasElems_Script) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Script; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Scripts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Text struct {
	Texts []*TtText `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL text"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Text function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Text instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Text instance.
func (me *XsdGoPkgHasElems_Text) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Text; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Texts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ThrowEvent struct {
	ThrowEvent *TtThrowEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL throwEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ThrowEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ThrowEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ThrowEvent instance.
func (me *XsdGoPkgHasElem_ThrowEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ThrowEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ThrowEvent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ThrowEvent struct {
	ThrowEvents []*TtThrowEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL throwEvent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ThrowEvent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ThrowEvent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ThrowEvent instance.
func (me *XsdGoPkgHasElems_ThrowEvent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ThrowEvent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ThrowEvents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_ struct {
	SupportedInterfaceRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supportedInterfaceRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_ struct {
	InnerParticipantRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL innerParticipantRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_ struct {
	DataPaths []*TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataPath"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_ instance.
func (me *XsdGoPkgHasElems_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataPaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_ struct {
	InputDataItems []*TtDataInput `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputDataItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_ instance.
func (me *XsdGoPkgHasElems_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InputDataItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttRelationshipschema_Source_XsdtQName_ struct {
	Source xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL source"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttRelationshipschema_Source_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttRelationshipschema_Source_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttRelationshipschema_Source_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttRelationshipschema_Source_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttRelationshipschema_Source_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ParticipantRefsequenceextensioncomplexContenttPartnerRoleschema_ParticipantRef_XsdtQName_ struct {
	ParticipantRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ParticipantRefsequenceextensioncomplexContenttPartnerRoleschema_ParticipantRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ParticipantRefsequenceextensioncomplexContenttPartnerRoleschema_ParticipantRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ParticipantRefsequenceextensioncomplexContenttPartnerRoleschema_ParticipantRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_ParticipantRefsequenceextensioncomplexContenttPartnerRoleschema_ParticipantRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ParticipantRefsequenceextensioncomplexContenttPartnerRoleschema_ParticipantRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTTransactionMethodUnion xsdt.Token

//	TtTransactionMethod is an XSD union-type of several types. This is a simple type conversion to XsdtAnyURI, but keep in mind the actual value may or may not be a valid XsdtAnyURI value.
func (me TtTransactionMethod) ToXsdtAnyURI() xsdt.AnyURI { return xsdt.AnyURI(me) }

//	TtTransactionMethod is an XSD union-type of several types. This is a simple type conversion to TxsdTTransactionMethodUnion, but keep in mind the actual value may or may not be a valid TxsdTTransactionMethodUnion value.
func (me TtTransactionMethod) ToTxsdTTransactionMethodUnion() TxsdTTransactionMethodUnion {
	return TxsdTTransactionMethodUnion(me)
}

//	Since TxsdTTransactionMethodUnion is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTTransactionMethodUnion) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TxsdTTransactionMethodUnion is just a simple String type, this merely returns the current string value.
func (me TxsdTTransactionMethodUnion) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTTransactionMethodUnion's alias type xsdt.Token.
func (me TxsdTTransactionMethodUnion) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTTransactionMethodUnion is "##Compensate".
func (me TxsdTTransactionMethodUnion) IsCompensate() bool { return me.String() == "##Compensate" }

//	Returns true if the value of this enumerated TxsdTTransactionMethodUnion is "##Image".
func (me TxsdTTransactionMethodUnion) IsImage() bool { return me.String() == "##Image" }

//	Returns true if the value of this enumerated TxsdTTransactionMethodUnion is "##Store".
func (me TxsdTTransactionMethodUnion) IsStore() bool { return me.String() == "##Store" }

type XsdGoPkgHasElems_CompletionConditionsequenceextensioncomplexContenttAdHocSubProcessschema_CompletionCondition_TtExpression_ struct {
	CompletionConditions []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL completionCondition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompletionConditionsequenceextensioncomplexContenttAdHocSubProcessschema_CompletionCondition_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompletionConditionsequenceextensioncomplexContenttAdHocSubProcessschema_CompletionCondition_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompletionConditionsequenceextensioncomplexContenttAdHocSubProcessschema_CompletionCondition_TtExpression_ instance.
func (me *XsdGoPkgHasElems_CompletionConditionsequenceextensioncomplexContenttAdHocSubProcessschema_CompletionCondition_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompletionConditionsequenceextensioncomplexContenttAdHocSubProcessschema_CompletionCondition_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompletionConditions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_ struct {
	DataInputRefs xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_ struct {
	InMessageRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inMessageRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_ struct {
	WhileExecutingOutputRefs xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL whileExecutingOutputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_ struct {
	ResourceRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTImplementationUnion xsdt.Token

//	TtImplementation is an XSD union-type of several types. This is a simple type conversion to TxsdTImplementationUnion, but keep in mind the actual value may or may not be a valid TxsdTImplementationUnion value.
func (me TtImplementation) ToTxsdTImplementationUnion() TxsdTImplementationUnion {
	return TxsdTImplementationUnion(me)
}

//	Since TxsdTImplementationUnion is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTImplementationUnion) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TxsdTImplementationUnion is just a simple String type, this merely returns the current string value.
func (me TxsdTImplementationUnion) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTImplementationUnion's alias type xsdt.Token.
func (me TxsdTImplementationUnion) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTImplementationUnion is "##unspecified".
func (me TxsdTImplementationUnion) IsUnspecified() bool { return me.String() == "##unspecified" }

//	Returns true if the value of this enumerated TxsdTImplementationUnion is "##WebService".
func (me TxsdTImplementationUnion) IsWebService() bool { return me.String() == "##WebService" }

//	TtImplementation is an XSD union-type of several types. This is a simple type conversion to XsdtAnyURI, but keep in mind the actual value may or may not be a valid XsdtAnyURI value.
func (me TtImplementation) ToXsdtAnyURI() xsdt.AnyURI { return xsdt.AnyURI(me) }

type XsdGoPkgHasElem_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_ struct {
	OptionalInputRefs xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL optionalInputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_ struct {
	Froms []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL from"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_ instance.
func (me *XsdGoPkgHasElems_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Froms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_ struct {
	TimeDurations []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timeDuration"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_ instance.
func (me *XsdGoPkgHasElems_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TimeDurations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_ struct {
	Incoming xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_ struct {
	EndPointRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL endPointRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_ struct {
	Transformations []*TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL transformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_ instance.
func (me *XsdGoPkgHasElems_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transformations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_ struct {
	OptionalOutputRefs xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL optionalOutputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_ struct {
	Conditions []*TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL condition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_ instance.
func (me *XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conditions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_ struct {
	WhileExecutingInputRefs xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL whileExecutingInputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_ struct {
	CorrelationPropertyRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_ struct {
	ChildLaneSets []*TtLaneSet `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL childLaneSet"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_ instance.
func (me *XsdGoPkgHasElems_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ChildLaneSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_ struct {
	OperationRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL operationRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_ struct {
	LoopConditions []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCondition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_ instance.
func (me *XsdGoPkgHasElems_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LoopConditions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MessageFlowRefsequenceextensioncomplexContenttConversationNodeschema_MessageFlowRef_XsdtQName_ struct {
	MessageFlowRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MessageFlowRefsequenceextensioncomplexContenttConversationNodeschema_MessageFlowRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MessageFlowRefsequenceextensioncomplexContenttConversationNodeschema_MessageFlowRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MessageFlowRefsequenceextensioncomplexContenttConversationNodeschema_MessageFlowRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_MessageFlowRefsequenceextensioncomplexContenttConversationNodeschema_MessageFlowRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MessageFlowRefsequenceextensioncomplexContenttConversationNodeschema_MessageFlowRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_ struct {
	InputSetRefs xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSetRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_ struct {
	OuterParticipantRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outerParticipantRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_ struct {
	Outgoing xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_ struct {
	FlowNodeRef xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowNodeRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_ struct {
	TimeCycles []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timeCycle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_ instance.
func (me *XsdGoPkgHasElems_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TimeCycles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_ struct {
	MessagePaths []*TtFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messagePath"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_ instance.
func (me *XsdGoPkgHasElems_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MessagePaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_ struct {
	ConditionExpressions []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conditionExpression"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_ instance.
func (me *XsdGoPkgHasElems_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConditionExpressions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_ struct {
	Tos []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL to"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_ instance.
func (me *XsdGoPkgHasElems_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_ struct {
	Conditions []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL condition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_ instance.
func (me *XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conditions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_ struct {
	LoopCardinalities []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCardinality"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_ instance.
func (me *XsdGoPkgHasElems_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LoopCardinalities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_ struct {
	TargetRefs []xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL targetRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_ instance.
func (me *XsdGoPkgHasElems_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_ struct {
	OutputDataItems []*TtDataOutput `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputDataItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_ instance.
func (me *XsdGoPkgHasElems_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OutputDataItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_ struct {
	Supports xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supports"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EventDefinitionRefsequenceextensioncomplexContenttThrowEventschema_EventDefinitionRef_XsdtQName_ struct {
	EventDefinitionRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventDefinitionRefsequenceextensioncomplexContenttThrowEventschema_EventDefinitionRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventDefinitionRefsequenceextensioncomplexContenttThrowEventschema_EventDefinitionRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EventDefinitionRefsequenceextensioncomplexContenttThrowEventschema_EventDefinitionRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_EventDefinitionRefsequenceextensioncomplexContenttThrowEventschema_EventDefinitionRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventDefinitionRefsequenceextensioncomplexContenttThrowEventschema_EventDefinitionRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_ struct {
	LoopDataOutputRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopDataOutputRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_ struct {
	ActivationConditions []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL activationCondition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_ instance.
func (me *XsdGoPkgHasElems_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ActivationConditions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_ struct {
	SourceRef xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sourceRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_ struct {
	OutputSetRefs xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSetRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_ struct {
	OutMessageRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outMessageRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_ struct {
	CategoryValueRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_ struct {
	ChoreographyRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_ struct {
	LoopDataInputRefs []xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopDataInputRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_ struct {
	InterfaceRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL interfaceRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_ struct {
	Events []*TtImplicitThrowEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL event"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_ instance.
func (me *XsdGoPkgHasElems_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Events {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_ struct {
	PartitionElements []*TtBaseElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL partitionElement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_ instance.
func (me *XsdGoPkgHasElems_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PartitionElements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_ struct {
	ErrorRef xsdt.QName `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL errorRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_ struct {
	DataOutputRefs xsdt.Idref `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputRefs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_ instance.
func (me *XsdGoPkgHasElem_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_ struct {
	TimeDates []*TtExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timeDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_ instance.
func (me *XsdGoPkgHasElems_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TimeDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 514 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 514 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_GlobalChoreographyTask                                                                                                      func(*XsdGoPkgHasElem_GlobalChoreographyTask, bool) error
	XsdGoPkgHasElem_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_                               func(*XsdGoPkgHasElem_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_                                      func(*XsdGoPkgHasElems_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_ResourceParameterBinding                                                                                                    func(*XsdGoPkgHasElem_ResourceParameterBinding, bool) error
	XsdGoPkgHasElems_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_             func(*XsdGoPkgHasElems_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_, bool) error
	XsdGoPkgHasElem_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_                               func(*XsdGoPkgHasElem_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_, bool) error
	TtTimerEventDefinition                                                                                                                      func(*TtTimerEventDefinition, bool) error
	XsdGoPkgHasElem_AdHocSubProcess                                                                                                             func(*XsdGoPkgHasElem_AdHocSubProcess, bool) error
	XsdGoPkgHasElem_TextAnnotation                                                                                                              func(*XsdGoPkgHasElem_TextAnnotation, bool) error
	TtCatchEvent                                                                                                                                func(*TtCatchEvent, bool) error
	XsdGoPkgHasElems_DataObject                                                                                                                 func(*XsdGoPkgHasElems_DataObject, bool) error
	XsdGoPkgHasElem_Import                                                                                                                      func(*XsdGoPkgHasElem_Import, bool) error
	XsdGoPkgHasElem_ComplexBehaviorDefinition                                                                                                   func(*XsdGoPkgHasElem_ComplexBehaviorDefinition, bool) error
	XsdGoPkgHasElem_PartnerEntity                                                                                                               func(*XsdGoPkgHasElem_PartnerEntity, bool) error
	TtAssociation                                                                                                                               func(*TtAssociation, bool) error
	TtDataObjectReference                                                                                                                       func(*TtDataObjectReference, bool) error
	XsdGoPkgHasElems_Choreography                                                                                                               func(*XsdGoPkgHasElems_Choreography, bool) error
	XsdGoPkgHasElems_Signal                                                                                                                     func(*XsdGoPkgHasElems_Signal, bool) error
	XsdGoPkgHasElem_Transaction                                                                                                                 func(*XsdGoPkgHasElem_Transaction, bool) error
	TtTask                                                                                                                                      func(*TtTask, bool) error
	TtIntermediateCatchEvent                                                                                                                    func(*TtIntermediateCatchEvent, bool) error
	XsdGoPkgHasElems_InputSet                                                                                                                   func(*XsdGoPkgHasElems_InputSet, bool) error
	TtPerformer                                                                                                                                 func(*TtPerformer, bool) error
	XsdGoPkgHasElem_CallableElement                                                                                                             func(*XsdGoPkgHasElem_CallableElement, bool) error
	XsdGoPkgHasElem_EndPoint                                                                                                                    func(*XsdGoPkgHasElem_EndPoint, bool) error
	XsdGoPkgHasElem_Task                                                                                                                        func(*XsdGoPkgHasElem_Task, bool) error
	XsdGoPkgHasElem_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_                                                   func(*XsdGoPkgHasElem_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_, bool) error
	TtManualTask                                                                                                                                func(*TtManualTask, bool) error
	XsdGoPkgHasElem_ChoreographyActivity                                                                                                        func(*XsdGoPkgHasElem_ChoreographyActivity, bool) error
	XsdGoPkgHasElem_DataStore                                                                                                                   func(*XsdGoPkgHasElem_DataStore, bool) error
	XsdGoPkgHasElems_MultiInstanceLoopCharacteristics                                                                                           func(*XsdGoPkgHasElems_MultiInstanceLoopCharacteristics, bool) error
	TtTextAnnotation                                                                                                                            func(*TtTextAnnotation, bool) error
	XsdGoPkgHasElems_MessageFlow                                                                                                                func(*XsdGoPkgHasElems_MessageFlow, bool) error
	XsdGoPkgHasElems_Gateway                                                                                                                    func(*XsdGoPkgHasElems_Gateway, bool) error
	TtDataStore                                                                                                                                 func(*TtDataStore, bool) error
	XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_          func(*XsdGoPkgHasElem_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_CallActivity                                                                                                               func(*XsdGoPkgHasElems_CallActivity, bool) error
	XsdGoPkgHasElems_ConversationNode                                                                                                           func(*XsdGoPkgHasElems_ConversationNode, bool) error
	XsdGoPkgHasElems_CatchEvent                                                                                                                 func(*XsdGoPkgHasElems_CatchEvent, bool) error
	XsdGoPkgHasElem_ComplexGateway                                                                                                              func(*XsdGoPkgHasElem_ComplexGateway, bool) error
	XsdGoPkgHasElems_Category                                                                                                                   func(*XsdGoPkgHasElems_Category, bool) error
	XsdGoPkgHasElem_PotentialOwner                                                                                                              func(*XsdGoPkgHasElem_PotentialOwner, bool) error
	XsdGoPkgHasElems_SignalEventDefinition                                                                                                      func(*XsdGoPkgHasElems_SignalEventDefinition, bool) error
	TtRelationship                                                                                                                              func(*TtRelationship, bool) error
	XsdGoPkgHasElem_ConversationNode                                                                                                            func(*XsdGoPkgHasElem_ConversationNode, bool) error
	XsdGoPkgHasElem_Rendering                                                                                                                   func(*XsdGoPkgHasElem_Rendering, bool) error
	TtImplicitThrowEvent                                                                                                                        func(*TtImplicitThrowEvent, bool) error
	XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_                                   func(*XsdGoPkgHasElem_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_, bool) error
	XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_                                                 func(*XsdGoPkgHasElems_TargetsequenceextensioncomplexContenttRelationshipschema_Target_XsdtQName_, bool) error
	XsdGoPkgHasElems_ChoreographyActivity                                                                                                       func(*XsdGoPkgHasElems_ChoreographyActivity, bool) error
	XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_                                       func(*XsdGoPkgHasElems_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElem_Script                                                                                                                      func(*XsdGoPkgHasElem_Script, bool) error
	XsdGoPkgHasElems_Message                                                                                                                    func(*XsdGoPkgHasElems_Message, bool) error
	TtThrowEvent                                                                                                                                func(*TtThrowEvent, bool) error
	XsdGoPkgHasElem_DataObject                                                                                                                  func(*XsdGoPkgHasElem_DataObject, bool) error
	TtErrorEventDefinition                                                                                                                      func(*TtErrorEventDefinition, bool) error
	XsdGoPkgHasElems_PartnerRole                                                                                                                func(*XsdGoPkgHasElems_PartnerRole, bool) error
	TtStartEvent                                                                                                                                func(*TtStartEvent, bool) error
	XsdGoPkgHasElems_Collaboration                                                                                                              func(*XsdGoPkgHasElems_Collaboration, bool) error
	XsdGoPkgHasElem_Choreography                                                                                                                func(*XsdGoPkgHasElem_Choreography, bool) error
	TtExtension                                                                                                                                 func(*TtExtension, bool) error
	XsdGoPkgHasElems_ExclusiveGateway                                                                                                           func(*XsdGoPkgHasElems_ExclusiveGateway, bool) error
	XsdGoPkgHasElem_IntermediateThrowEvent                                                                                                      func(*XsdGoPkgHasElem_IntermediateThrowEvent, bool) error
	XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_                                          func(*XsdGoPkgHasElems_SourcesequenceextensioncomplexContenttLinkEventDefinitionschema_Source_XsdtQName_, bool) error
	TtCorrelationPropertyBinding                                                                                                                func(*TtCorrelationPropertyBinding, bool) error
	XsdGoPkgHasElems_Participant                                                                                                                func(*XsdGoPkgHasElems_Participant, bool) error
	XsdGoPkgHasElem_EscalationEventDefinition                                                                                                   func(*XsdGoPkgHasElem_EscalationEventDefinition, bool) error
	XsdGoPkgHasElem_ThrowEvent                                                                                                                  func(*XsdGoPkgHasElem_ThrowEvent, bool) error
	XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_                                       func(*XsdGoPkgHasElems_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElems_TextAnnotation                                                                                                             func(*XsdGoPkgHasElems_TextAnnotation, bool) error
	XsdGoPkgHasElems_Artifact                                                                                                                   func(*XsdGoPkgHasElems_Artifact, bool) error
	XsdGoPkgHasElem_GlobalConversation                                                                                                          func(*XsdGoPkgHasElem_GlobalConversation, bool) error
	XsdGoPkgHasElem_IoBinding                                                                                                                   func(*XsdGoPkgHasElem_IoBinding, bool) error
	XsdGoPkgHasElem_Performer                                                                                                                   func(*XsdGoPkgHasElem_Performer, bool) error
	XsdGoPkgHasElem_IoSpecification                                                                                                             func(*XsdGoPkgHasElem_IoSpecification, bool) error
	TtFormalExpression                                                                                                                          func(*TtFormalExpression, bool) error
	XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_                                       func(*XsdGoPkgHasElem_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_Interface                                                                                                                  func(*XsdGoPkgHasElems_Interface, bool) error
	XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_                                                     func(*XsdGoPkgHasElem_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_, bool) error
	XsdGoPkgHasElems_AdHocSubProcess                                                                                                            func(*XsdGoPkgHasElems_AdHocSubProcess, bool) error
	TtCallConversation                                                                                                                          func(*TtCallConversation, bool) error
	XsdGoPkgHasElems_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_             func(*XsdGoPkgHasElems_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_                func(*XsdGoPkgHasElems_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_SubChoreography                                                                                                             func(*XsdGoPkgHasElem_SubChoreography, bool) error
	XsdGoPkgHasElem_Artifact                                                                                                                    func(*XsdGoPkgHasElem_Artifact, bool) error
	XsdGoPkgHasElem_GlobalBusinessRuleTask                                                                                                      func(*XsdGoPkgHasElem_GlobalBusinessRuleTask, bool) error
	TtLane                                                                                                                                      func(*TtLane, bool) error
	XsdGoPkgHasElem_Event                                                                                                                       func(*XsdGoPkgHasElem_Event, bool) error
	XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_                                    func(*XsdGoPkgHasElems_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElems_CorrelationPropertyBinding                                                                                                 func(*XsdGoPkgHasElems_CorrelationPropertyBinding, bool) error
	TtSignal                                                                                                                                    func(*TtSignal, bool) error
	XsdGoPkgHasElem_Message                                                                                                                     func(*XsdGoPkgHasElem_Message, bool) error
	TtParticipantAssociation                                                                                                                    func(*TtParticipantAssociation, bool) error
	XsdGoPkgHasElem_MultiInstanceLoopCharacteristics                                                                                            func(*XsdGoPkgHasElem_MultiInstanceLoopCharacteristics, bool) error
	XsdGoPkgHasElems_CorrelationSubscription                                                                                                    func(*XsdGoPkgHasElems_CorrelationSubscription, bool) error
	XsdGoPkgHasElems_CorrelationProperty                                                                                                        func(*XsdGoPkgHasElems_CorrelationProperty, bool) error
	XsdGoPkgHasElem_ConversationAssociation                                                                                                     func(*XsdGoPkgHasElem_ConversationAssociation, bool) error
	TtMessage                                                                                                                                   func(*TtMessage, bool) error
	XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_           func(*XsdGoPkgHasElem_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_, bool) error
	XsdGoPkgHasElems_Conversation                                                                                                               func(*XsdGoPkgHasElems_Conversation, bool) error
	XsdGoPkgHasElem_SubProcess                                                                                                                  func(*XsdGoPkgHasElem_SubProcess, bool) error
	TtGroup                                                                                                                                     func(*TtGroup, bool) error
	XsdGoPkgHasElems_IoBinding                                                                                                                  func(*XsdGoPkgHasElems_IoBinding, bool) error
	XsdGoPkgHasElem_GlobalScriptTask                                                                                                            func(*XsdGoPkgHasElem_GlobalScriptTask, bool) error
	XsdGoPkgHasElem_Property                                                                                                                    func(*XsdGoPkgHasElem_Property, bool) error
	TtFlowNode                                                                                                                                  func(*TtFlowNode, bool) error
	TtReceiveTask                                                                                                                               func(*TtReceiveTask, bool) error
	XsdGoPkgHasElem_Error                                                                                                                       func(*XsdGoPkgHasElem_Error, bool) error
	XsdGoPkgHasElem_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_                                     func(*XsdGoPkgHasElem_DataOutputRefssequenceextensioncomplexContenttOutputSetschema_DataOutputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_                                                 func(*XsdGoPkgHasElems_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_, bool) error
	XsdGoPkgHasElems_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_                     func(*XsdGoPkgHasElems_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_, bool) error
	XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_              func(*XsdGoPkgHasElem_InnerParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_InnerParticipantRef_XsdtQName_, bool) error
	TtGateway                                                                                                                                   func(*TtGateway, bool) error
	XsdGoPkgHasElems_LinkEventDefinition                                                                                                        func(*XsdGoPkgHasElems_LinkEventDefinition, bool) error
	XsdGoPkgHasElem_Auditing                                                                                                                    func(*XsdGoPkgHasElem_Auditing, bool) error
	XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_                                  func(*XsdGoPkgHasElem_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_, bool) error
	XsdGoPkgHasElems_BaseElementWithMixedContent                                                                                                func(*XsdGoPkgHasElems_BaseElementWithMixedContent, bool) error
	TtResourceAssignmentExpression                                                                                                              func(*TtResourceAssignmentExpression, bool) error
	XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_ func(*XsdGoPkgHasElem_CompletionConditionsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_CompletionCondition_TtExpression_, bool) error
	XsdGoPkgHasElems_InclusiveGateway                                                                                                           func(*XsdGoPkgHasElems_InclusiveGateway, bool) error
	TtMessageFlow                                                                                                                               func(*TtMessageFlow, bool) error
	TtCorrelationKey                                                                                                                            func(*TtCorrelationKey, bool) error
	XsdGoPkgHasElems_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_                    func(*XsdGoPkgHasElems_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_, bool) error
	XsdGoPkgHasElem_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_                                         func(*XsdGoPkgHasElem_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_Activity                                                                                                                   func(*XsdGoPkgHasElems_Activity, bool) error
	XsdGoPkgHasElems_ConversationLink                                                                                                           func(*XsdGoPkgHasElems_ConversationLink, bool) error
	TtExpression                                                                                                                                func(*TtExpression, bool) error
	TtPotentialOwner                                                                                                                            func(*TtPotentialOwner, bool) error
	TtFlowElement                                                                                                                               func(*TtFlowElement, bool) error
	TtAssignment                                                                                                                                func(*TtAssignment, bool) error
	TtMultiInstanceLoopCharacteristics                                                                                                          func(*TtMultiInstanceLoopCharacteristics, bool) error
	TtGlobalChoreographyTask                                                                                                                    func(*TtGlobalChoreographyTask, bool) error
	XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_     func(*XsdGoPkgHasElem_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_, bool) error
	TtOutputSet                                                                                                                                 func(*TtOutputSet, bool) error
	XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_                               func(*XsdGoPkgHasElems_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElems_ConditionalEventDefinition                                                                                                 func(*XsdGoPkgHasElems_ConditionalEventDefinition, bool) error
	XsdGoPkgHasElems_SequenceFlow                                                                                                               func(*XsdGoPkgHasElems_SequenceFlow, bool) error
	XsdGoPkgHasElem_DataOutputAssociation                                                                                                       func(*XsdGoPkgHasElem_DataOutputAssociation, bool) error
	XsdGoPkgHasElem_EndEvent                                                                                                                    func(*XsdGoPkgHasElem_EndEvent, bool) error
	TtBaseElement                                                                                                                               func(*TtBaseElement, bool) error
	XsdGoPkgHasElem_MessageEventDefinition                                                                                                      func(*XsdGoPkgHasElem_MessageEventDefinition, bool) error
	XsdGoPkgHasElem_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_                             func(*XsdGoPkgHasElem_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElems_MessageEventDefinition                                                                                                     func(*XsdGoPkgHasElems_MessageEventDefinition, bool) error
	XsdGoPkgHasElems_ScriptTask                                                                                                                 func(*XsdGoPkgHasElems_ScriptTask, bool) error
	XsdGoPkgHasElem_Resource                                                                                                                    func(*XsdGoPkgHasElem_Resource, bool) error
	XsdGoPkgHasElems_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_                                 func(*XsdGoPkgHasElems_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_                           func(*XsdGoPkgHasElems_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_EscalationEventDefinition                                                                                                  func(*XsdGoPkgHasElems_EscalationEventDefinition, bool) error
	TtSubChoreography                                                                                                                           func(*TtSubChoreography, bool) error
	XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_              func(*XsdGoPkgHasElem_InputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_InputDataItem_TtDataInput_, bool) error
	XsdGoPkgHasElem_BoundaryEvent                                                                                                               func(*XsdGoPkgHasElem_BoundaryEvent, bool) error
	XsdGoPkgHasElems_Group                                                                                                                      func(*XsdGoPkgHasElems_Group, bool) error
	XsdGoPkgHasElems_ServiceTask                                                                                                                func(*XsdGoPkgHasElems_ServiceTask, bool) error
	XsdGoPkgHasElem_CallActivity                                                                                                                func(*XsdGoPkgHasElem_CallActivity, bool) error
	XsdGoPkgHasElem_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_                                         func(*XsdGoPkgHasElem_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_, bool) error
	XsdGoPkgHasElems_DataInputAssociation                                                                                                       func(*XsdGoPkgHasElems_DataInputAssociation, bool) error
	TtBusinessRuleTask                                                                                                                          func(*TtBusinessRuleTask, bool) error
	XsdGoPkgHasElems_SendTask                                                                                                                   func(*XsdGoPkgHasElems_SendTask, bool) error
	TtSignalEventDefinition                                                                                                                     func(*TtSignalEventDefinition, bool) error
	XsdGoPkgHasElem_ManualTask                                                                                                                  func(*XsdGoPkgHasElem_ManualTask, bool) error
	XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_                                  func(*XsdGoPkgHasElem_ResourceRefsequencechoiceextensioncomplexContenttResourceRoleschema_ResourceRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_DataObjectReference                                                                                                        func(*XsdGoPkgHasElems_DataObjectReference, bool) error
	XsdGoPkgHasElem_ExclusiveGateway                                                                                                            func(*XsdGoPkgHasElem_ExclusiveGateway, bool) error
	XsdGoPkgHasElem_HumanPerformer                                                                                                              func(*XsdGoPkgHasElem_HumanPerformer, bool) error
	XsdGoPkgHasElem_Operation                                                                                                                   func(*XsdGoPkgHasElem_Operation, bool) error
	XsdGoPkgHasElem_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_                 func(*XsdGoPkgHasElem_SupportedInterfaceRefsequenceextensioncomplexContenttCallableElementschema_SupportedInterfaceRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_             func(*XsdGoPkgHasElems_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_, bool) error
	TtEvent                                                                                                                                     func(*TtEvent, bool) error
	XsdGoPkgHasElems_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_                                    func(*XsdGoPkgHasElems_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_, bool) error
	XsdGoPkgHasElems_ParticipantMultiplicity                                                                                                    func(*XsdGoPkgHasElems_ParticipantMultiplicity, bool) error
	XsdGoPkgHasElems_EndEvent                                                                                                                   func(*XsdGoPkgHasElems_EndEvent, bool) error
	XsdGoPkgHasElem_CorrelationKey                                                                                                              func(*XsdGoPkgHasElem_CorrelationKey, bool) error
	XsdGoPkgHasElem_MessageFlow                                                                                                                 func(*XsdGoPkgHasElem_MessageFlow, bool) error
	XsdGoPkgHasElems_Transaction                                                                                                                func(*XsdGoPkgHasElems_Transaction, bool) error
	TtProperty                                                                                                                                  func(*TtProperty, bool) error
	XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_                                                 func(*XsdGoPkgHasElems_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_, bool) error
	TtTransaction                                                                                                                               func(*TtTransaction, bool) error
	XsdGoPkgHasElems_CallConversation                                                                                                           func(*XsdGoPkgHasElems_CallConversation, bool) error
	XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_                   func(*XsdGoPkgHasElems_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_, bool) error
	TtConditionalEventDefinition                                                                                                                func(*TtConditionalEventDefinition, bool) error
	XsdGoPkgHasElem_StandardLoopCharacteristics                                                                                                 func(*XsdGoPkgHasElem_StandardLoopCharacteristics, bool) error
	XsdGoPkgHasElem_CorrelationPropertyRetrievalExpression                                                                                      func(*XsdGoPkgHasElem_CorrelationPropertyRetrievalExpression, bool) error
	XsdGoPkgHasElems_IoSpecification                                                                                                            func(*XsdGoPkgHasElems_IoSpecification, bool) error
	XsdGoPkgHasElems_Monitoring                                                                                                                 func(*XsdGoPkgHasElems_Monitoring, bool) error
	XsdGoPkgHasElems_ErrorEventDefinition                                                                                                       func(*XsdGoPkgHasElems_ErrorEventDefinition, bool) error
	XsdGoPkgHasElems_ComplexGateway                                                                                                             func(*XsdGoPkgHasElems_ComplexGateway, bool) error
	XsdGoPkgHasElem_Category                                                                                                                    func(*XsdGoPkgHasElem_Category, bool) error
	XsdGoPkgHasElem_Documentation                                                                                                               func(*XsdGoPkgHasElem_Documentation, bool) error
	XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_                     func(*XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_, bool) error
	XsdGoPkgHasElem_Monitoring                                                                                                                  func(*XsdGoPkgHasElem_Monitoring, bool) error
	XsdGoPkgHasElem_Definitions                                                                                                                 func(*XsdGoPkgHasElem_Definitions, bool) error
	XsdGoPkgHasElems_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_                            func(*XsdGoPkgHasElems_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_, bool) error
	XsdGoPkgHasElem_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_                                                 func(*XsdGoPkgHasElem_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_Event                                                                                                                      func(*XsdGoPkgHasElems_Event, bool) error
	XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_                             func(*XsdGoPkgHasElem_TimeDurationchoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDuration_TtExpression_, bool) error
	XsdGoPkgHasElem_InputSet                                                                                                                    func(*XsdGoPkgHasElem_InputSet, bool) error
	XsdGoPkgHasElem_Activity                                                                                                                    func(*XsdGoPkgHasElem_Activity, bool) error
	XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_                            func(*XsdGoPkgHasElems_OptionalOutputRefssequenceextensioncomplexContenttOutputSetschema_OptionalOutputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElems_EventBasedGateway                                                                                                          func(*XsdGoPkgHasElems_EventBasedGateway, bool) error
	TtBoundaryEvent                                                                                                                             func(*TtBoundaryEvent, bool) error
	TtConversationLink                                                                                                                          func(*TtConversationLink, bool) error
	XsdGoPkgHasElem_Group                                                                                                                       func(*XsdGoPkgHasElem_Group, bool) error
	XsdGoPkgHasElems_HumanPerformer                                                                                                             func(*XsdGoPkgHasElems_HumanPerformer, bool) error
	XsdGoPkgHasElems_Lane                                                                                                                       func(*XsdGoPkgHasElems_Lane, bool) error
	XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_                             func(*XsdGoPkgHasElems_MessageFlowRefsequenceextensioncomplexContenttChoreographyTaskschema_MessageFlowRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_BusinessRuleTask                                                                                                           func(*XsdGoPkgHasElems_BusinessRuleTask, bool) error
	TtConversation                                                                                                                              func(*TtConversation, bool) error
	TtParticipant                                                                                                                               func(*TtParticipant, bool) error
	TtChoreography                                                                                                                              func(*TtChoreography, bool) error
	TtInputOutputSpecification                                                                                                                  func(*TtInputOutputSpecification, bool) error
	XsdGoPkgHasElem_MessageFlowRefsequenceextensioncomplexContenttConversationNodeschema_MessageFlowRef_XsdtQName_                              func(*XsdGoPkgHasElem_MessageFlowRefsequenceextensioncomplexContenttConversationNodeschema_MessageFlowRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_CatchEvent                                                                                                                  func(*XsdGoPkgHasElem_CatchEvent, bool) error
	TtDataInput                                                                                                                                 func(*TtDataInput, bool) error
	XsdGoPkgHasElems_CategoryValue                                                                                                              func(*XsdGoPkgHasElems_CategoryValue, bool) error
	TtIntermediateThrowEvent                                                                                                                    func(*TtIntermediateThrowEvent, bool) error
	XsdGoPkgHasElems_IntermediateThrowEvent                                                                                                     func(*XsdGoPkgHasElems_IntermediateThrowEvent, bool) error
	XsdGoPkgHasElems_BoundaryEvent                                                                                                              func(*XsdGoPkgHasElems_BoundaryEvent, bool) error
	XsdGoPkgHasElem_ExtensionElements                                                                                                           func(*XsdGoPkgHasElem_ExtensionElements, bool) error
	TtDataStoreReference                                                                                                                        func(*TtDataStoreReference, bool) error
	XsdGoPkgHasElems_DataStoreReference                                                                                                         func(*XsdGoPkgHasElems_DataStoreReference, bool) error
	XsdGoPkgHasElem_ConversationLink                                                                                                            func(*XsdGoPkgHasElem_ConversationLink, bool) error
	XsdGoPkgHasElems_DataState                                                                                                                  func(*XsdGoPkgHasElems_DataState, bool) error
	XsdGoPkgHasElem_SequenceFlow                                                                                                                func(*XsdGoPkgHasElem_SequenceFlow, bool) error
	XsdGoPkgHasElem_LaneSet                                                                                                                     func(*XsdGoPkgHasElem_LaneSet, bool) error
	TtGlobalUserTask                                                                                                                            func(*TtGlobalUserTask, bool) error
	TtHumanPerformer                                                                                                                            func(*TtHumanPerformer, bool) error
	XsdGoPkgHasElems_Definitions                                                                                                                func(*XsdGoPkgHasElems_Definitions, bool) error
	XsdGoPkgHasElem_Participant                                                                                                                 func(*XsdGoPkgHasElem_Participant, bool) error
	TtInputOutputBinding                                                                                                                        func(*TtInputOutputBinding, bool) error
	TtUserTask                                                                                                                                  func(*TtUserTask, bool) error
	TtCorrelationSubscription                                                                                                                   func(*TtCorrelationSubscription, bool) error
	TtCorrelationPropertyRetrievalExpression                                                                                                    func(*TtCorrelationPropertyRetrievalExpression, bool) error
	XsdGoPkgHasElem_CorrelationProperty                                                                                                         func(*XsdGoPkgHasElem_CorrelationProperty, bool) error
	XsdGoPkgHasElems_Text                                                                                                                       func(*XsdGoPkgHasElems_Text, bool) error
	XsdGoPkgHasElem_OutputSet                                                                                                                   func(*XsdGoPkgHasElem_OutputSet, bool) error
	XsdGoPkgHasElem_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_                                func(*XsdGoPkgHasElem_OptionalInputRefssequenceextensioncomplexContenttInputSetschema_OptionalInputRefs_XsdtIdref_, bool) error
	TtGlobalBusinessRuleTask                                                                                                                    func(*TtGlobalBusinessRuleTask, bool) error
	XsdGoPkgHasElem_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_                                                  func(*XsdGoPkgHasElem_IncomingsequenceextensioncomplexContenttFlowNodeschema_Incoming_XsdtQName_, bool) error
	XsdGoPkgHasElems_OutputSet                                                                                                                  func(*XsdGoPkgHasElems_OutputSet, bool) error
	XsdGoPkgHasElems_Association                                                                                                                func(*XsdGoPkgHasElems_Association, bool) error
	TtEventBasedGateway                                                                                                                         func(*TtEventBasedGateway, bool) error
	XsdGoPkgHasElems_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_                                        func(*XsdGoPkgHasElems_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_, bool) error
	TtItemDefinition                                                                                                                            func(*TtItemDefinition, bool) error
	XsdGoPkgHasElems_PartnerEntity                                                                                                              func(*XsdGoPkgHasElems_PartnerEntity, bool) error
	TtLoopCharacteristics                                                                                                                       func(*TtLoopCharacteristics, bool) error
	TtExclusiveGateway                                                                                                                          func(*TtExclusiveGateway, bool) error
	TtEndEvent                                                                                                                                  func(*TtEndEvent, bool) error
	XsdGoPkgHasElem_DataObjectReference                                                                                                         func(*XsdGoPkgHasElem_DataObjectReference, bool) error
	XsdGoPkgHasElems_Script                                                                                                                     func(*XsdGoPkgHasElems_Script, bool) error
	TtResourceParameterBinding                                                                                                                  func(*TtResourceParameterBinding, bool) error
	XsdGoPkgHasElem_CancelEventDefinition                                                                                                       func(*XsdGoPkgHasElem_CancelEventDefinition, bool) error
	XsdGoPkgHasElems_MessageFlowAssociation                                                                                                     func(*XsdGoPkgHasElems_MessageFlowAssociation, bool) error
	TtDataObject                                                                                                                                func(*TtDataObject, bool) error
	XsdGoPkgHasElem_SubConversation                                                                                                             func(*XsdGoPkgHasElem_SubConversation, bool) error
	XsdGoPkgHasElem_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_                func(*XsdGoPkgHasElem_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_Expression                                                                                                                  func(*XsdGoPkgHasElem_Expression, bool) error
	XsdGoPkgHasElem_DataAssociation                                                                                                             func(*XsdGoPkgHasElem_DataAssociation, bool) error
	XsdGoPkgHasElems_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_                      func(*XsdGoPkgHasElems_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_, bool) error
	XsdGoPkgHasElems_GlobalTask                                                                                                                 func(*XsdGoPkgHasElems_GlobalTask, bool) error
	XsdGoPkgHasElem_DataStoreReference                                                                                                          func(*XsdGoPkgHasElem_DataStoreReference, bool) error
	XsdGoPkgHasElem_GlobalUserTask                                                                                                              func(*XsdGoPkgHasElem_GlobalUserTask, bool) error
	TtEndPoint                                                                                                                                  func(*TtEndPoint, bool) error
	XsdGoPkgHasElems_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_       func(*XsdGoPkgHasElems_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_ResourceParameter                                                                                                           func(*XsdGoPkgHasElem_ResourceParameter, bool) error
	XsdGoPkgHasElems_Error                                                                                                                      func(*XsdGoPkgHasElems_Error, bool) error
	XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_                                     func(*XsdGoPkgHasElem_TimeDatechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeDate_TtExpression_, bool) error
	XsdGoPkgHasElems_EndPoint                                                                                                                   func(*XsdGoPkgHasElems_EndPoint, bool) error
	XsdGoPkgHasElems_IntermediateCatchEvent                                                                                                     func(*XsdGoPkgHasElems_IntermediateCatchEvent, bool) error
	XsdGoPkgHasElems_DataAssociation                                                                                                            func(*XsdGoPkgHasElems_DataAssociation, bool) error
	TtExtensionElements                                                                                                                         func(*TtExtensionElements, bool) error
	XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_                                                func(*XsdGoPkgHasElems_ErrorRefsequenceextensioncomplexContenttOperationschema_ErrorRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_CallConversation                                                                                                            func(*XsdGoPkgHasElem_CallConversation, bool) error
	XsdGoPkgHasElem_Relationship                                                                                                                func(*XsdGoPkgHasElem_Relationship, bool) error
	TtImport                                                                                                                                    func(*TtImport, bool) error
	XsdGoPkgHasElems_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_                                             func(*XsdGoPkgHasElems_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_, bool) error
	XsdGoPkgHasElem_PartnerRole                                                                                                                 func(*XsdGoPkgHasElem_PartnerRole, bool) error
	XsdGoPkgHasElem_Escalation                                                                                                                  func(*XsdGoPkgHasElem_Escalation, bool) error
	XsdGoPkgHasElem_ImplicitThrowEvent                                                                                                          func(*XsdGoPkgHasElem_ImplicitThrowEvent, bool) error
	XsdGoPkgHasElem_ItemDefinition                                                                                                              func(*XsdGoPkgHasElem_ItemDefinition, bool) error
	XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_                      func(*XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Condition_TtFormalExpression_, bool) error
	XsdGoPkgHasElem_Collaboration                                                                                                               func(*XsdGoPkgHasElem_Collaboration, bool) error
	XsdGoPkgHasElem_ParticipantAssociation                                                                                                      func(*XsdGoPkgHasElem_ParticipantAssociation, bool) error
	XsdGoPkgHasElems_SubProcess                                                                                                                 func(*XsdGoPkgHasElems_SubProcess, bool) error
	TtEventDefinition                                                                                                                           func(*TtEventDefinition, bool) error
	XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_                            func(*XsdGoPkgHasElem_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_, bool) error
	TtSequenceFlow                                                                                                                              func(*TtSequenceFlow, bool) error
	TtDefinitions                                                                                                                               func(*TDefinitions, bool) error
	XsdGoPkgHasElem_Association                                                                                                                 func(*XsdGoPkgHasElem_Association, bool) error
	XsdGoPkgHasElem_DataOutput                                                                                                                  func(*XsdGoPkgHasElem_DataOutput, bool) error
	TtAuditing                                                                                                                                  func(*TtAuditing, bool) error
	XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_                                func(*XsdGoPkgHasElems_ParticipantRefsequenceextensioncomplexContenttPartnerEntityschema_ParticipantRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_GlobalChoreographyTask                                                                                                     func(*XsdGoPkgHasElems_GlobalChoreographyTask, bool) error
	XsdGoPkgHasElem_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_                                       func(*XsdGoPkgHasElem_InterfaceRefsequenceextensioncomplexContenttParticipantschema_InterfaceRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_DataInput                                                                                                                  func(*XsdGoPkgHasElems_DataInput, bool) error
	XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_                                           func(*XsdGoPkgHasElem_TargetsequenceextensioncomplexContenttLinkEventDefinitionschema_Target_XsdtQName_, bool) error
	XsdGoPkgHasElems_LaneSet                                                                                                                    func(*XsdGoPkgHasElems_LaneSet, bool) error
	XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_                                                         func(*XsdGoPkgHasElem_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_, bool) error
	XsdGoPkgHasElems_GlobalConversation                                                                                                         func(*XsdGoPkgHasElems_GlobalConversation, bool) error
	XsdGoPkgHasElems_Escalation                                                                                                                 func(*XsdGoPkgHasElems_Escalation, bool) error
	XsdGoPkgHasElems_EventDefinition                                                                                                            func(*XsdGoPkgHasElems_EventDefinition, bool) error
	TtComplexBehaviorDefinition                                                                                                                 func(*TtComplexBehaviorDefinition, bool) error
	XsdGoPkgHasElem_TerminateEventDefinition                                                                                                    func(*XsdGoPkgHasElem_TerminateEventDefinition, bool) error
	XsdGoPkgHasElem_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_                                        func(*XsdGoPkgHasElem_OutputSetRefssequenceextensioncomplexContenttInputSetschema_OutputSetRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElems_GlobalBusinessRuleTask                                                                                                     func(*XsdGoPkgHasElems_GlobalBusinessRuleTask, bool) error
	TtCategory                                                                                                                                  func(*TtCategory, bool) error
	TtMessageEventDefinition                                                                                                                    func(*TtMessageEventDefinition, bool) error
	XsdGoPkgHasElem_FlowNode                                                                                                                    func(*XsdGoPkgHasElem_FlowNode, bool) error
	XsdGoPkgHasElems_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_                           func(*XsdGoPkgHasElems_EventsequenceextensioncomplexContenttComplexBehaviorDefinitionschema_Event_TtImplicitThrowEvent_, bool) error
	XsdGoPkgHasElems_ResourceParameterBinding                                                                                                   func(*XsdGoPkgHasElems_ResourceParameterBinding, bool) error
	TtEscalationEventDefinition                                                                                                                 func(*TtEscalationEventDefinition, bool) error
	XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_                                        func(*XsdGoPkgHasElems_SourceRefsequenceextensioncomplexContenttDataAssociationschema_SourceRef_XsdtIdref_, bool) error
	TtStandardLoopCharacteristics                                                                                                               func(*TtStandardLoopCharacteristics, bool) error
	TtComplexGateway                                                                                                                            func(*TtComplexGateway, bool) error
	TtCorrelationProperty                                                                                                                       func(*TtCorrelationProperty, bool) error
	XsdGoPkgHasElem_BaseElementWithMixedContent                                                                                                 func(*XsdGoPkgHasElem_BaseElementWithMixedContent, bool) error
	XsdGoPkgHasElem_BusinessRuleTask                                                                                                            func(*XsdGoPkgHasElem_BusinessRuleTask, bool) error
	TtDataState                                                                                                                                 func(*TtDataState, bool) error
	XsdGoPkgHasElems_LoopCharacteristics                                                                                                        func(*XsdGoPkgHasElems_LoopCharacteristics, bool) error
	XsdGoPkgHasElems_FlowNode                                                                                                                   func(*XsdGoPkgHasElems_FlowNode, bool) error
	XsdGoPkgHasElems_RootElement                                                                                                                func(*XsdGoPkgHasElems_RootElement, bool) error
	XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_              func(*XsdGoPkgHasElem_OuterParticipantRefsequenceextensioncomplexContenttParticipantAssociationschema_OuterParticipantRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_                                                  func(*XsdGoPkgHasElems_SupportssequenceextensioncomplexContenttProcessschema_Supports_XsdtQName_, bool) error
	TtDataInputAssociation                                                                                                                      func(*TtDataInputAssociation, bool) error
	XsdGoPkgHasElem_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_                    func(*XsdGoPkgHasElem_WhileExecutingInputRefssequenceextensioncomplexContenttInputSetschema_WhileExecutingInputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElems_CancelEventDefinition                                                                                                      func(*XsdGoPkgHasElems_CancelEventDefinition, bool) error
	XsdGoPkgHasElems_Process                                                                                                                    func(*XsdGoPkgHasElems_Process, bool) error
	TtSubConversation                                                                                                                           func(*TtSubConversation, bool) error
	XsdGoPkgHasElem_UserTask                                                                                                                    func(*XsdGoPkgHasElem_UserTask, bool) error
	XsdGoPkgHasElem_Process                                                                                                                     func(*XsdGoPkgHasElem_Process, bool) error
	XsdGoPkgHasElem_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_                                         func(*XsdGoPkgHasElem_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_         func(*XsdGoPkgHasElem_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_, bool) error
	XsdGoPkgHasElems_ManualTask                                                                                                                 func(*XsdGoPkgHasElems_ManualTask, bool) error
	TtProcess                                                                                                                                   func(*TtProcess, bool) error
	XsdGoPkgHasElem_TimerEventDefinition                                                                                                        func(*XsdGoPkgHasElem_TimerEventDefinition, bool) error
	TtScriptTask                                                                                                                                func(*TtScriptTask, bool) error
	TtCallChoreography                                                                                                                          func(*TtCallChoreography, bool) error
	XsdGoPkgHasElems_Assignment                                                                                                                 func(*XsdGoPkgHasElems_Assignment, bool) error
	XsdGoPkgHasElems_DataOutputAssociation                                                                                                      func(*XsdGoPkgHasElems_DataOutputAssociation, bool) error
	TtCancelEventDefinition                                                                                                                     func(*TtCancelEventDefinition, bool) error
	TtResource                                                                                                                                  func(*TtResource, bool) error
	TtPartnerEntity                                                                                                                             func(*TtPartnerEntity, bool) error
	TtChoreographyActivity                                                                                                                      func(*TtChoreographyActivity, bool) error
	XsdGoPkgHasElems_CallableElement                                                                                                            func(*XsdGoPkgHasElems_CallableElement, bool) error
	XsdGoPkgHasElem_ParallelGateway                                                                                                             func(*XsdGoPkgHasElem_ParallelGateway, bool) error
	XsdGoPkgHasElem_Gateway                                                                                                                     func(*XsdGoPkgHasElem_Gateway, bool) error
	XsdGoPkgHasElem_ResourceAssignmentExpression                                                                                                func(*XsdGoPkgHasElem_ResourceAssignmentExpression, bool) error
	TtPartnerRole                                                                                                                               func(*TtPartnerRole, bool) error
	XsdGoPkgHasElems_UserTask                                                                                                                   func(*XsdGoPkgHasElems_UserTask, bool) error
	XsdGoPkgHasElem_EventDefinition                                                                                                             func(*XsdGoPkgHasElem_EventDefinition, bool) error
	XsdGoPkgHasElems_TimerEventDefinition                                                                                                       func(*XsdGoPkgHasElems_TimerEventDefinition, bool) error
	XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_               func(*XsdGoPkgHasElems_CorrelationPropertyRefsequenceextensioncomplexContenttCorrelationKeyschema_CorrelationPropertyRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_Interface                                                                                                                   func(*XsdGoPkgHasElem_Interface, bool) error
	XsdGoPkgHasElems_ThrowEvent                                                                                                                 func(*XsdGoPkgHasElems_ThrowEvent, bool) error
	XsdGoPkgHasElems_Rendering                                                                                                                  func(*XsdGoPkgHasElems_Rendering, bool) error
	TtResourceParameter                                                                                                                         func(*TtResourceParameter, bool) error
	TtCompensateEventDefinition                                                                                                                 func(*TtCompensateEventDefinition, bool) error
	TtArtifact                                                                                                                                  func(*TtArtifact, bool) error
	XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_                              func(*XsdGoPkgHasElems_CategoryValueRefsequenceextensioncomplexContenttFlowElementschema_CategoryValueRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_                      func(*XsdGoPkgHasElem_TransformationsequenceextensioncomplexContenttDataAssociationschema_Transformation_TtFormalExpression_, bool) error
	XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_        func(*XsdGoPkgHasElem_LoopDataOutputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataOutputRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_StartEvent                                                                                                                 func(*XsdGoPkgHasElems_StartEvent, bool) error
	TtDataOutput                                                                                                                                func(*TtDataOutput, bool) error
	TtMessageFlowAssociation                                                                                                                    func(*TtMessageFlowAssociation, bool) error
	XsdGoPkgHasElem_BaseElement                                                                                                                 func(*XsdGoPkgHasElem_BaseElement, bool) error
	XsdGoPkgHasElem_InclusiveGateway                                                                                                            func(*XsdGoPkgHasElem_InclusiveGateway, bool) error
	XsdGoPkgHasElem_ParticipantMultiplicity                                                                                                     func(*XsdGoPkgHasElem_ParticipantMultiplicity, bool) error
	XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_                              func(*XsdGoPkgHasElems_ChoreographyRefsequenceextensioncomplexContenttCollaborationschema_ChoreographyRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_Relationship                                                                                                               func(*XsdGoPkgHasElems_Relationship, bool) error
	XsdGoPkgHasElems_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_                                  func(*XsdGoPkgHasElems_TimeCyclechoiceextensioncomplexContenttTimerEventDefinitionschema_TimeCycle_TtExpression_, bool) error
	XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_                                              func(*XsdGoPkgHasElem_ChildLaneSetsequenceextensioncomplexContenttLaneschema_ChildLaneSet_TtLaneSet_, bool) error
	XsdGoPkgHasElems_SubChoreography                                                                                                            func(*XsdGoPkgHasElems_SubChoreography, bool) error
	XsdGoPkgHasElems_ConversationAssociation                                                                                                    func(*XsdGoPkgHasElems_ConversationAssociation, bool) error
	XsdGoPkgHasElems_FormalExpression                                                                                                           func(*XsdGoPkgHasElems_FormalExpression, bool) error
	XsdGoPkgHasElems_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_                  func(*XsdGoPkgHasElems_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_, bool) error
	TtLinkEventDefinition                                                                                                                       func(*TtLinkEventDefinition, bool) error
	XsdGoPkgHasElem_LoopCharacteristics                                                                                                         func(*XsdGoPkgHasElem_LoopCharacteristics, bool) error
	TtParallelGateway                                                                                                                           func(*TtParallelGateway, bool) error
	TtConversationNode                                                                                                                          func(*TtConversationNode, bool) error
	XsdGoPkgHasElem_CorrelationPropertyBinding                                                                                                  func(*XsdGoPkgHasElem_CorrelationPropertyBinding, bool) error
	XsdGoPkgHasElem_ErrorEventDefinition                                                                                                        func(*XsdGoPkgHasElem_ErrorEventDefinition, bool) error
	XsdGoPkgHasElems_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_                                                        func(*XsdGoPkgHasElems_TosequenceextensioncomplexContenttAssignmentschema_To_TtExpression_, bool) error
	XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_                           func(*XsdGoPkgHasElem_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_, bool) error
	XsdGoPkgHasElems_ParallelGateway                                                                                                            func(*XsdGoPkgHasElems_ParallelGateway, bool) error
	XsdGoPkgHasElem_Assignment                                                                                                                  func(*XsdGoPkgHasElem_Assignment, bool) error
	XsdGoPkgHasElems_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_          func(*XsdGoPkgHasElems_OutputDataItemsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_OutputDataItem_TtDataOutput_, bool) error
	XsdGoPkgHasElems_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_                                      func(*XsdGoPkgHasElems_OutMessageRefsequenceextensioncomplexContenttOperationschema_OutMessageRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_CompensateEventDefinition                                                                                                  func(*XsdGoPkgHasElems_CompensateEventDefinition, bool) error
	TtGlobalScriptTask                                                                                                                          func(*TtGlobalScriptTask, bool) error
	XsdGoPkgHasElem_IntermediateCatchEvent                                                                                                      func(*XsdGoPkgHasElem_IntermediateCatchEvent, bool) error
	XsdGoPkgHasElems_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_                                        func(*XsdGoPkgHasElems_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_, bool) error
	TtResourceRole                                                                                                                              func(*TtResourceRole, bool) error
	XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_                                         func(*XsdGoPkgHasElem_TargetRefsequenceextensioncomplexContenttDataAssociationschema_TargetRef_XsdtIdref_, bool) error
	TtDocumentation                                                                                                                             func(*TtDocumentation, bool) error
	XsdGoPkgHasElems_Operation                                                                                                                  func(*XsdGoPkgHasElems_Operation, bool) error
	XsdGoPkgHasElems_TerminateEventDefinition                                                                                                   func(*XsdGoPkgHasElems_TerminateEventDefinition, bool) error
	XsdGoPkgHasElem_Signal                                                                                                                      func(*XsdGoPkgHasElem_Signal, bool) error
	XsdGoPkgHasCdata                                                                                                                            func(*XsdGoPkgHasCdata, bool) error
	TtActivity                                                                                                                                  func(*TtActivity, bool) error
	TtParticipantMultiplicity                                                                                                                   func(*TtParticipantMultiplicity, bool) error
	XsdGoPkgHasElem_DataInputAssociation                                                                                                        func(*XsdGoPkgHasElem_DataInputAssociation, bool) error
	TtDataAssociation                                                                                                                           func(*TtDataAssociation, bool) error
	XsdGoPkgHasElems_CallChoreography                                                                                                           func(*XsdGoPkgHasElems_CallChoreography, bool) error
	XsdGoPkgHasElem_Conversation                                                                                                                func(*XsdGoPkgHasElem_Conversation, bool) error
	XsdGoPkgHasElem_Extension                                                                                                                   func(*XsdGoPkgHasElem_Extension, bool) error
	XsdGoPkgHasElem_ResourceRole                                                                                                                func(*XsdGoPkgHasElem_ResourceRole, bool) error
	XsdGoPkgHasElem_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_                                        func(*XsdGoPkgHasElem_DataInputRefssequenceextensioncomplexContenttInputSetschema_DataInputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElem_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_                                                func(*XsdGoPkgHasElem_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_, bool) error
	TtInterface                                                                                                                                 func(*TtInterface, bool) error
	XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_                           func(*XsdGoPkgHasElems_EventDefinitionRefsequenceextensioncomplexContenttCatchEventschema_EventDefinitionRef_XsdtQName_, bool) error
	TtCollaboration                                                                                                                             func(*TtCollaboration, bool) error
	XsdGoPkgHasElem_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_                 func(*XsdGoPkgHasElem_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElems_Resource                                                                                                                   func(*XsdGoPkgHasElems_Resource, bool) error
	TtInclusiveGateway                                                                                                                          func(*TtInclusiveGateway, bool) error
	XsdGoPkgHasElem_CorrelationSubscription                                                                                                     func(*XsdGoPkgHasElem_CorrelationSubscription, bool) error
	XsdGoPkgHasElem_StartEvent                                                                                                                  func(*XsdGoPkgHasElem_StartEvent, bool) error
	XsdGoPkgHasElems_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_                                                    func(*XsdGoPkgHasElems_FromsequenceextensioncomplexContenttAssignmentschema_From_TtExpression_, bool) error
	XsdGoPkgHasElems_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_        func(*XsdGoPkgHasElems_LoopCardinalitysequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopCardinality_TtExpression_, bool) error
	TtBaseElementWithMixedContent                                                                                                               func(*TtBaseElementWithMixedContent, bool) error
	TtText                                                                                                                                      func(*TtText, bool) error
	XsdGoPkgHasElem_LinkEventDefinition                                                                                                         func(*XsdGoPkgHasElem_LinkEventDefinition, bool) error
	XsdGoPkgHasElem_ReceiveTask                                                                                                                 func(*XsdGoPkgHasElem_ReceiveTask, bool) error
	XsdGoPkgHasElem_ScriptTask                                                                                                                  func(*XsdGoPkgHasElem_ScriptTask, bool) error
	XsdGoPkgHasElem_FlowElement                                                                                                                 func(*XsdGoPkgHasElem_FlowElement, bool) error
	XsdGoPkgHasElems_CompletionConditionsequenceextensioncomplexContenttAdHocSubProcessschema_CompletionCondition_TtExpression_                 func(*XsdGoPkgHasElems_CompletionConditionsequenceextensioncomplexContenttAdHocSubProcessschema_CompletionCondition_TtExpression_, bool) error
	XsdGoPkgHasElems_Extension                                                                                                                  func(*XsdGoPkgHasElems_Extension, bool) error
	XsdGoPkgHasElems_ResourceRole                                                                                                               func(*XsdGoPkgHasElems_ResourceRole, bool) error
	XsdGoPkgHasElems_DataOutput                                                                                                                 func(*XsdGoPkgHasElems_DataOutput, bool) error
	XsdGoPkgHasElem_ParticipantRefsequenceextensioncomplexContenttPartnerRoleschema_ParticipantRef_XsdtQName_                                   func(*XsdGoPkgHasElem_ParticipantRefsequenceextensioncomplexContenttPartnerRoleschema_ParticipantRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_                                                  func(*XsdGoPkgHasElem_OutgoingsequenceextensioncomplexContenttFlowNodeschema_Outgoing_XsdtQName_, bool) error
	XsdGoPkgHasElems_ChoreographyTask                                                                                                           func(*XsdGoPkgHasElems_ChoreographyTask, bool) error
	XsdGoPkgHasElems_SubConversation                                                                                                            func(*XsdGoPkgHasElems_SubConversation, bool) error
	TtCategoryValue                                                                                                                             func(*TtCategoryValue, bool) error
	XsdGoPkgHasElem_ConditionalEventDefinition                                                                                                  func(*XsdGoPkgHasElem_ConditionalEventDefinition, bool) error
	XsdGoPkgHasElem_RootElement                                                                                                                 func(*XsdGoPkgHasElem_RootElement, bool) error
	XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_                          func(*XsdGoPkgHasElems_ConditionsequenceextensioncomplexContenttConditionalEventDefinitionschema_Condition_TtExpression_, bool) error
	XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_                            func(*XsdGoPkgHasElem_OperationRefsequenceextensioncomplexContenttMessageEventDefinitionschema_OperationRef_XsdtQName_, bool) error
	TtMonitoring                                                                                                                                func(*TtMonitoring, bool) error
	XsdGoPkgHasElem_CategoryValue                                                                                                               func(*XsdGoPkgHasElem_CategoryValue, bool) error
	XsdGoPkgHasElems_ExtensionElements                                                                                                          func(*XsdGoPkgHasElems_ExtensionElements, bool) error
	XsdGoPkgHasElem_EventDefinitionRefsequenceextensioncomplexContenttThrowEventschema_EventDefinitionRef_XsdtQName_                            func(*XsdGoPkgHasElem_EventDefinitionRefsequenceextensioncomplexContenttThrowEventschema_EventDefinitionRef_XsdtQName_, bool) error
	TtRendering                                                                                                                                 func(*TtRendering, bool) error
	XsdGoPkgHasElems_Task                                                                                                                       func(*XsdGoPkgHasElems_Task, bool) error
	XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_                                        func(*XsdGoPkgHasElems_EndPointRefsequenceextensioncomplexContenttParticipantschema_EndPointRef_XsdtQName_, bool) error
	XsdGoPkgHasElem_CompensateEventDefinition                                                                                                   func(*XsdGoPkgHasElem_CompensateEventDefinition, bool) error
	XsdGoPkgHasElem_SignalEventDefinition                                                                                                       func(*XsdGoPkgHasElem_SignalEventDefinition, bool) error
	XsdGoPkgHasElems_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_    func(*XsdGoPkgHasElems_MessagePathsequenceextensioncomplexContenttCorrelationPropertyRetrievalExpressionschema_MessagePath_TtFormalExpression_, bool) error
	XsdGoPkgHasElems_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_                                 func(*XsdGoPkgHasElems_PartitionElementsequenceextensioncomplexContenttLaneschema_PartitionElement_TtBaseElement_, bool) error
	XsdGoPkgHasElems_PotentialOwner                                                                                                             func(*XsdGoPkgHasElems_PotentialOwner, bool) error
	TtError                                                                                                                                     func(*TtError, bool) error
	TtEscalation                                                                                                                                func(*TtEscalation, bool) error
	XsdGoPkgHasElems_ResourceParameter                                                                                                          func(*XsdGoPkgHasElems_ResourceParameter, bool) error
	XsdGoPkgHasElems_ComplexBehaviorDefinition                                                                                                  func(*XsdGoPkgHasElems_ComplexBehaviorDefinition, bool) error
	XsdGoPkgHasElem_SendTask                                                                                                                    func(*XsdGoPkgHasElem_SendTask, bool) error
	XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_                                        func(*XsdGoPkgHasElems_InputSetRefssequenceextensioncomplexContenttOutputSetschema_InputSetRefs_XsdtIdref_, bool) error
	TtOperation                                                                                                                                 func(*TtOperation, bool) error
	XsdGoPkgHasElems_DataStore                                                                                                                  func(*XsdGoPkgHasElems_DataStore, bool) error
	XsdGoPkgHasElems_GlobalScriptTask                                                                                                           func(*XsdGoPkgHasElems_GlobalScriptTask, bool) error
	XsdGoPkgHasElems_Property                                                                                                                   func(*XsdGoPkgHasElems_Property, bool) error
	XsdGoPkgHasElems_ReceiveTask                                                                                                                func(*XsdGoPkgHasElems_ReceiveTask, bool) error
	XsdGoPkgHasElem_CallChoreography                                                                                                            func(*XsdGoPkgHasElem_CallChoreography, bool) error
	TtInputSet                                                                                                                                  func(*TtInputSet, bool) error
	XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_                     func(*XsdGoPkgHasElem_ConditionExpressionsequenceextensioncomplexContenttSequenceFlowschema_ConditionExpression_TtExpression_, bool) error
	XsdGoPkgHasElems_Expression                                                                                                                 func(*XsdGoPkgHasElems_Expression, bool) error
	XsdGoPkgHasElems_StandardLoopCharacteristics                                                                                                func(*XsdGoPkgHasElems_StandardLoopCharacteristics, bool) error
	XsdGoPkgHasElems_GlobalUserTask                                                                                                             func(*XsdGoPkgHasElems_GlobalUserTask, bool) error
	XsdGoPkgHasElems_CorrelationKey                                                                                                             func(*XsdGoPkgHasElems_CorrelationKey, bool) error
	TtAdHocSubProcess                                                                                                                           func(*TtAdHocSubProcess, bool) error
	XsdGoPkgHasElem_DataInput                                                                                                                   func(*XsdGoPkgHasElem_DataInput, bool) error
	XsdGoPkgHasElems_Import                                                                                                                     func(*XsdGoPkgHasElems_Import, bool) error
	XsdGoPkgHasElems_ItemDefinition                                                                                                             func(*XsdGoPkgHasElems_ItemDefinition, bool) error
	XsdGoPkgHasElem_EventBasedGateway                                                                                                           func(*XsdGoPkgHasElem_EventBasedGateway, bool) error
	XsdGoPkgHasElem_ServiceTask                                                                                                                 func(*XsdGoPkgHasElem_ServiceTask, bool) error
	XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_                                         func(*XsdGoPkgHasElem_InMessageRefsequenceextensioncomplexContenttOperationschema_InMessageRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_Auditing                                                                                                                   func(*XsdGoPkgHasElems_Auditing, bool) error
	TtScript                                                                                                                                    func(*TtScript, bool) error
	XsdGoPkgHasElems_ImplicitThrowEvent                                                                                                         func(*XsdGoPkgHasElems_ImplicitThrowEvent, bool) error
	TtServiceTask                                                                                                                               func(*TtServiceTask, bool) error
	XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_                                               func(*XsdGoPkgHasElems_FlowNodeRefsequenceextensioncomplexContenttLaneschema_FlowNodeRef_XsdtIdref_, bool) error
	TtDataOutputAssociation                                                                                                                     func(*TtDataOutputAssociation, bool) error
	XsdGoPkgHasElem_Lane                                                                                                                        func(*XsdGoPkgHasElem_Lane, bool) error
	XsdGoPkgHasElems_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_         func(*XsdGoPkgHasElems_LoopDataInputRefsequenceextensioncomplexContenttMultiInstanceLoopCharacteristicsschema_LoopDataInputRef_XsdtQName_, bool) error
	XsdGoPkgHasElems_GlobalManualTask                                                                                                           func(*XsdGoPkgHasElems_GlobalManualTask, bool) error
	TtRootElement                                                                                                                               func(*TtRootElement, bool) error
	XsdGoPkgHasElem_FormalExpression                                                                                                            func(*XsdGoPkgHasElem_FormalExpression, bool) error
	TtLaneSet                                                                                                                                   func(*TtLaneSet, bool) error
	XsdGoPkgHasElems_Documentation                                                                                                              func(*XsdGoPkgHasElems_Documentation, bool) error
	XsdGoPkgHasElems_FlowElement                                                                                                                func(*XsdGoPkgHasElems_FlowElement, bool) error
	TtTerminateEventDefinition                                                                                                                  func(*TtTerminateEventDefinition, bool) error
	XsdGoPkgHasElem_DataState                                                                                                                   func(*XsdGoPkgHasElem_DataState, bool) error
	TtGlobalTask                                                                                                                                func(*TtGlobalTask, bool) error
	TtCallActivity                                                                                                                              func(*TtCallActivity, bool) error
	TtConversationAssociation                                                                                                                   func(*TtConversationAssociation, bool) error
	XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_                func(*XsdGoPkgHasElems_WhileExecutingOutputRefssequenceextensioncomplexContenttOutputSetschema_WhileExecutingOutputRefs_XsdtIdref_, bool) error
	XsdGoPkgHasElem_ChoreographyTask                                                                                                            func(*XsdGoPkgHasElem_ChoreographyTask, bool) error
	XsdGoPkgHasElems_ResourceAssignmentExpression                                                                                               func(*XsdGoPkgHasElems_ResourceAssignmentExpression, bool) error
	XsdGoPkgHasElems_Performer                                                                                                                  func(*XsdGoPkgHasElems_Performer, bool) error
	XsdGoPkgHasElem_Text                                                                                                                        func(*XsdGoPkgHasElem_Text, bool) error
	XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_                  func(*XsdGoPkgHasElem_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_, bool) error
	TtSubProcess                                                                                                                                func(*TtSubProcess, bool) error
	TtSendTask                                                                                                                                  func(*TtSendTask, bool) error
	XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_                       func(*XsdGoPkgHasElem_DataPathsequenceextensioncomplexContenttCorrelationPropertyBindingschema_DataPath_TtFormalExpression_, bool) error
	TtGlobalConversation                                                                                                                        func(*TtGlobalConversation, bool) error
	XsdGoPkgHasElem_GlobalManualTask                                                                                                            func(*XsdGoPkgHasElem_GlobalManualTask, bool) error
	TtGlobalManualTask                                                                                                                          func(*TtGlobalManualTask, bool) error
	XsdGoPkgHasElems_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_                 func(*XsdGoPkgHasElems_LoopConditionsequenceextensioncomplexContenttStandardLoopCharacteristicsschema_LoopCondition_TtExpression_, bool) error
	XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression                                                                                     func(*XsdGoPkgHasElems_CorrelationPropertyRetrievalExpression, bool) error
	XsdGoPkgHasElem_GlobalTask                                                                                                                  func(*XsdGoPkgHasElem_GlobalTask, bool) error
	TtCallableElement                                                                                                                           func(*TtCallableElement, bool) error
	XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_                   func(*XsdGoPkgHasElem_ActivationConditionsequenceextensioncomplexContenttComplexGatewayschema_ActivationCondition_TtExpression_, bool) error
	TtChoreographyTask                                                                                                                          func(*TtChoreographyTask, bool) error
	XsdGoPkgHasElems_BaseElement                                                                                                                func(*XsdGoPkgHasElems_BaseElement, bool) error
	XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttRelationshipschema_Source_XsdtQName_                                                  func(*XsdGoPkgHasElem_SourcesequenceextensioncomplexContenttRelationshipschema_Source_XsdtQName_, bool) error
	XsdGoPkgHasElems_ParticipantAssociation                                                                                                     func(*XsdGoPkgHasElems_ParticipantAssociation, bool) error
	XsdGoPkgHasElem_MessageFlowAssociation                                                                                                      func(*XsdGoPkgHasElem_MessageFlowAssociation, bool) error
}
