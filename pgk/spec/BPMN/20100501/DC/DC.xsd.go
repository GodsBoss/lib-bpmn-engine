//	Auto-generated by the "go-xsd" package located at:
//		github.com/UNO-SOFT/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.omg.org/spec/BPMN/20100501/DC.xsd
package DC

import (
	xsdt "github.com/nitram509/golib-bpmn-model/pgk/xsdtypes"
)

type XsdGoPkgHasAttr_IsBold_XsdtBoolean_ struct {
	IsBold xsdt.Boolean `xml:"http://www.omg.org/spec/DD/20100524/DC isBold,attr"`
}

type XsdGoPkgHasAttr_IsItalic_XsdtBoolean_ struct {
	IsItalic xsdt.Boolean `xml:"http://www.omg.org/spec/DD/20100524/DC isItalic,attr"`
}

type XsdGoPkgHasAttr_IsUnderline_XsdtBoolean_ struct {
	IsUnderline xsdt.Boolean `xml:"http://www.omg.org/spec/DD/20100524/DC isUnderline,attr"`
}

type XsdGoPkgHasAttr_IsStrikeThrough_XsdtBoolean_ struct {
	IsStrikeThrough xsdt.Boolean `xml:"http://www.omg.org/spec/DD/20100524/DC isStrikeThrough,attr"`
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"http://www.omg.org/spec/DD/20100524/DC name,attr"`
}

type XsdGoPkgHasAttr_Size_XsdtDouble_ struct {
	Size xsdt.Double `xml:"http://www.omg.org/spec/DD/20100524/DC size,attr"`
}

type TFont struct {
	XsdGoPkgHasAttr_IsUnderline_XsdtBoolean_

	XsdGoPkgHasAttr_IsStrikeThrough_XsdtBoolean_

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Size_XsdtDouble_

	XsdGoPkgHasAttr_IsBold_XsdtBoolean_

	XsdGoPkgHasAttr_IsItalic_XsdtBoolean_
}

//	If the WalkHandlers.TFont function is not nil (ie. was set by outside code), calls it with this TFont instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TFont instance.
func (me *TFont) Walk() (err error) {
	if fn := WalkHandlers.TFont; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Font struct {
	Font *TFont `xml:"http://www.omg.org/spec/DD/20100524/DC Font"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Font function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Font instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Font instance.
func (me *XsdGoPkgHasElem_Font) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Font; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Font.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Font struct {
	Fonts []*TFont `xml:"http://www.omg.org/spec/DD/20100524/DC Font"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Font function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Font instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Font instance.
func (me *XsdGoPkgHasElems_Font) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Font; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Fonts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_X_XsdtDouble_ struct {
	X xsdt.Double `xml:"http://www.omg.org/spec/DD/20100524/DC x,attr"`
}

type XsdGoPkgHasAttr_Y_XsdtDouble_ struct {
	Y xsdt.Double `xml:"http://www.omg.org/spec/DD/20100524/DC y,attr"`
}

type TPoint struct {
	XsdGoPkgHasAttr_X_XsdtDouble_

	XsdGoPkgHasAttr_Y_XsdtDouble_
}

//	If the WalkHandlers.TPoint function is not nil (ie. was set by outside code), calls it with this TPoint instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TPoint instance.
func (me *TPoint) Walk() (err error) {
	if fn := WalkHandlers.TPoint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Point struct {
	Point *TPoint `xml:"http://www.omg.org/spec/DD/20100524/DC Point"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Point function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Point instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Point instance.
func (me *XsdGoPkgHasElem_Point) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Point; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Point.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Point struct {
	Points []*TPoint `xml:"http://www.omg.org/spec/DD/20100524/DC Point"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Point function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Point instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Point instance.
func (me *XsdGoPkgHasElems_Point) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Point; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Points {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Height_XsdtDouble_ struct {
	Height xsdt.Double `xml:"http://www.omg.org/spec/DD/20100524/DC height,attr"`
}

type XsdGoPkgHasAttr_Width_XsdtDouble_ struct {
	Width xsdt.Double `xml:"http://www.omg.org/spec/DD/20100524/DC width,attr"`
}

type TBounds struct {
	XsdGoPkgHasAttr_Width_XsdtDouble_

	XsdGoPkgHasAttr_Height_XsdtDouble_

	XsdGoPkgHasAttr_X_XsdtDouble_

	XsdGoPkgHasAttr_Y_XsdtDouble_
}

//	If the WalkHandlers.TBounds function is not nil (ie. was set by outside code), calls it with this TBounds instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TBounds instance.
func (me *TBounds) Walk() (err error) {
	if fn := WalkHandlers.TBounds; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Bounds struct {
	Boundses []*TBounds `xml:"http://www.omg.org/spec/DD/20100524/DC Bounds"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Bounds function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Bounds instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Bounds instance.
func (me *XsdGoPkgHasElems_Bounds) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Bounds; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Boundses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Bounds struct {
	Bounds *TBounds `xml:"http://www.omg.org/spec/DD/20100524/DC Bounds"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Bounds function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Bounds instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Bounds instance.
func (me *XsdGoPkgHasElem_Bounds) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Bounds; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Bounds.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 10 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 10 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TFont                   func(*TFont, bool) error
	TBounds                 func(*TBounds, bool) error
	XsdGoPkgHasElems_Bounds func(*XsdGoPkgHasElems_Bounds, bool) error
	XsdGoPkgHasElem_Bounds  func(*XsdGoPkgHasElem_Bounds, bool) error
	XsdGoPkgHasElem_Font    func(*XsdGoPkgHasElem_Font, bool) error
	XsdGoPkgHasElems_Font   func(*XsdGoPkgHasElems_Font, bool) error
	TPoint                  func(*TPoint, bool) error
	XsdGoPkgHasElem_Point   func(*XsdGoPkgHasElem_Point, bool) error
	XsdGoPkgHasElems_Point  func(*XsdGoPkgHasElems_Point, bool) error
	XsdGoPkgHasCdata        func(*XsdGoPkgHasCdata, bool) error
}
