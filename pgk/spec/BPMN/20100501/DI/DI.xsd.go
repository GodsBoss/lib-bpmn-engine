//	Auto-generated by the "go-xsd" package located at:
//		github.com/UNO-SOFT/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.omg.org/spec/BPMN/20100501/DI.xsd
package DI

import (
	dc "github.com/nitram509/golib-bpmn-model/pgk/spec/BPMN/20100501/DC"
	xsdt "github.com/nitram509/golib-bpmn-model/pgk/xsdtypes"
)

type TxsdDiagramElementSequenceExtension struct {
}

//	If the WalkHandlers.TxsdDiagramElementSequenceExtension function is not nil (ie. was set by outside code), calls it with this TxsdDiagramElementSequenceExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TxsdDiagramElementSequenceExtension instance.
func (me *TxsdDiagramElementSequenceExtension) Walk() (err error) {
	if fn := WalkHandlers.TxsdDiagramElementSequenceExtension; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_ struct {
	Extension *TxsdDiagramElementSequenceExtension `xml:"http://www.omg.org/spec/DD/20100524/DI extension"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_ instance.
func (me *XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"http://www.omg.org/spec/DD/20100524/DI id,attr"`
}

type TDiagramElement struct {
	XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TDiagramElement function is not nil (ie. was set by outside code), calls it with this TDiagramElement instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TDiagramElement instance.
func (me *TDiagramElement) Walk() (err error) {
	if fn := WalkHandlers.TDiagramElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DiagramElement struct {
	DiagramElement *TDiagramElement `xml:"http://www.omg.org/spec/DD/20100524/DI DiagramElement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DiagramElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DiagramElement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DiagramElement instance.
func (me *XsdGoPkgHasElem_DiagramElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DiagramElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DiagramElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DiagramElement struct {
	DiagramElements []*TDiagramElement `xml:"http://www.omg.org/spec/DD/20100524/DI DiagramElement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DiagramElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DiagramElement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DiagramElement instance.
func (me *XsdGoPkgHasElems_DiagramElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DiagramElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DiagramElements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Documentation_XsdtString_ struct {
	Documentation xsdt.String `xml:"http://www.omg.org/spec/DD/20100524/DI documentation,attr"`
}

type XsdGoPkgHasAttr_Resolution_XsdtDouble_ struct {
	Resolution xsdt.Double `xml:"http://www.omg.org/spec/DD/20100524/DI resolution,attr"`
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"http://www.omg.org/spec/DD/20100524/DI name,attr"`
}

type TDiagram struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Documentation_XsdtString_

	XsdGoPkgHasAttr_Resolution_XsdtDouble_
}

//	If the WalkHandlers.TDiagram function is not nil (ie. was set by outside code), calls it with this TDiagram instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TDiagram instance.
func (me *TDiagram) Walk() (err error) {
	if fn := WalkHandlers.TDiagram; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Diagram struct {
	Diagram *TDiagram `xml:"http://www.omg.org/spec/DD/20100524/DI Diagram"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Diagram function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Diagram instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Diagram instance.
func (me *XsdGoPkgHasElem_Diagram) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Diagram; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Diagram.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Diagram struct {
	Diagrams []*TDiagram `xml:"http://www.omg.org/spec/DD/20100524/DI Diagram"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Diagram function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Diagram instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Diagram instance.
func (me *XsdGoPkgHasElems_Diagram) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Diagram; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Diagrams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TStyle struct {
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TStyle function is not nil (ie. was set by outside code), calls it with this TStyle instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TStyle instance.
func (me *TStyle) Walk() (err error) {
	if fn := WalkHandlers.TStyle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Style struct {
	Style *TStyle `xml:"http://www.omg.org/spec/DD/20100524/DI Style"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Style function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Style instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Style instance.
func (me *XsdGoPkgHasElem_Style) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Style; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Style.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Style struct {
	Styles []*TStyle `xml:"http://www.omg.org/spec/DD/20100524/DI Style"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Style function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Style instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Style instance.
func (me *XsdGoPkgHasElems_Style) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Style; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Styles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNode struct {
	TDiagramElement
}

//	If the WalkHandlers.TNode function is not nil (ie. was set by outside code), calls it with this TNode instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TNode instance.
func (me *TNode) Walk() (err error) {
	if fn := WalkHandlers.TNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TDiagramElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Node struct {
	Node *TNode `xml:"http://www.omg.org/spec/DD/20100524/DI Node"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Node instance.
func (me *XsdGoPkgHasElem_Node) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Node; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Node.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Node struct {
	Nodes []*TNode `xml:"http://www.omg.org/spec/DD/20100524/DI Node"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Node instance.
func (me *XsdGoPkgHasElems_Node) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Node; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Nodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_ struct {
	Waypoints []dc.TPoint `xml:"http://www.omg.org/spec/DD/20100524/DI waypoint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_ instance.
func (me *XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEdge struct {
	TDiagramElement

	XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_
}

//	If the WalkHandlers.TEdge function is not nil (ie. was set by outside code), calls it with this TEdge instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TEdge instance.
func (me *TEdge) Walk() (err error) {
	if fn := WalkHandlers.TEdge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TDiagramElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Edge struct {
	Edge *TEdge `xml:"http://www.omg.org/spec/DD/20100524/DI Edge"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Edge function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Edge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Edge instance.
func (me *XsdGoPkgHasElem_Edge) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Edge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Edge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Edge struct {
	Edges []*TEdge `xml:"http://www.omg.org/spec/DD/20100524/DI Edge"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Edge function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Edge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Edge instance.
func (me *XsdGoPkgHasElems_Edge) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Edge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Edges {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TShape struct {
	TNode

	dc.XsdGoPkgHasElem_Bounds
}

//	If the WalkHandlers.TShape function is not nil (ie. was set by outside code), calls it with this TShape instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TShape instance.
func (me *TShape) Walk() (err error) {
	if fn := WalkHandlers.TShape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Shape struct {
	Shapes []*TShape `xml:"http://www.omg.org/spec/DD/20100524/DI Shape"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Shape function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Shape instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Shape instance.
func (me *XsdGoPkgHasElems_Shape) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Shape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shapes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Shape struct {
	Shape *TShape `xml:"http://www.omg.org/spec/DD/20100524/DI Shape"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Shape function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Shape instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Shape instance.
func (me *XsdGoPkgHasElem_Shape) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Shape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Shape.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPlane struct {
	TNode

	XsdGoPkgHasElems_DiagramElement
}

//	If the WalkHandlers.TPlane function is not nil (ie. was set by outside code), calls it with this TPlane instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPlane instance.
func (me *TPlane) Walk() (err error) {
	if fn := WalkHandlers.TPlane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DiagramElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Plane struct {
	Plane *TPlane `xml:"http://www.omg.org/spec/DD/20100524/DI Plane"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Plane function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Plane instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Plane instance.
func (me *XsdGoPkgHasElem_Plane) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Plane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Plane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Plane struct {
	Planes []*TPlane `xml:"http://www.omg.org/spec/DD/20100524/DI Plane"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Plane function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Plane instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Plane instance.
func (me *XsdGoPkgHasElems_Plane) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Plane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Planes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLabeledEdge struct {
	TEdge
}

//	If the WalkHandlers.TLabeledEdge function is not nil (ie. was set by outside code), calls it with this TLabeledEdge instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TLabeledEdge instance.
func (me *TLabeledEdge) Walk() (err error) {
	if fn := WalkHandlers.TLabeledEdge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEdge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LabeledEdge struct {
	LabeledEdge *TLabeledEdge `xml:"http://www.omg.org/spec/DD/20100524/DI LabeledEdge"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LabeledEdge function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LabeledEdge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LabeledEdge instance.
func (me *XsdGoPkgHasElem_LabeledEdge) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LabeledEdge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LabeledEdge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LabeledEdge struct {
	LabeledEdges []*TLabeledEdge `xml:"http://www.omg.org/spec/DD/20100524/DI LabeledEdge"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LabeledEdge function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LabeledEdge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LabeledEdge instance.
func (me *XsdGoPkgHasElems_LabeledEdge) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LabeledEdge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LabeledEdges {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLabel struct {
	TNode

	dc.XsdGoPkgHasElem_Bounds
}

//	If the WalkHandlers.TLabel function is not nil (ie. was set by outside code), calls it with this TLabel instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TLabel instance.
func (me *TLabel) Walk() (err error) {
	if fn := WalkHandlers.TLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Label struct {
	Label *TLabel `xml:"http://www.omg.org/spec/DD/20100524/DI Label"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Label function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Label instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Label instance.
func (me *XsdGoPkgHasElem_Label) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Label; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Label struct {
	Labels []*TLabel `xml:"http://www.omg.org/spec/DD/20100524/DI Label"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Label function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Label instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Label instance.
func (me *XsdGoPkgHasElems_Label) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Label; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Labels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLabeledShape struct {
	TShape
}

//	If the WalkHandlers.TLabeledShape function is not nil (ie. was set by outside code), calls it with this TLabeledShape instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TLabeledShape instance.
func (me *TLabeledShape) Walk() (err error) {
	if fn := WalkHandlers.TLabeledShape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TShape.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LabeledShape struct {
	LabeledShape *TLabeledShape `xml:"http://www.omg.org/spec/DD/20100524/DI LabeledShape"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LabeledShape function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LabeledShape instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LabeledShape instance.
func (me *XsdGoPkgHasElem_LabeledShape) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LabeledShape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LabeledShape.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LabeledShape struct {
	LabeledShapes []*TLabeledShape `xml:"http://www.omg.org/spec/DD/20100524/DI LabeledShape"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LabeledShape function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LabeledShape instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LabeledShape instance.
func (me *XsdGoPkgHasElems_LabeledShape) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LabeledShape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LabeledShapes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_ struct {
	Extensions []*TxsdDiagramElementSequenceExtension `xml:"http://www.omg.org/spec/DD/20100524/DI extension"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_ instance.
func (me *XsdGoPkgHasElems_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extensions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_ struct {
	Waypoint dc.TPoint `xml:"http://www.omg.org/spec/DD/20100524/DI waypoint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_ instance.
func (me *XsdGoPkgHasElem_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 36 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 36 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElems_Edge                                                                                 func(*XsdGoPkgHasElems_Edge, bool) error
	XsdGoPkgHasElem_Plane                                                                                 func(*XsdGoPkgHasElem_Plane, bool) error
	TLabeledEdge                                                                                          func(*TLabeledEdge, bool) error
	XsdGoPkgHasElems_LabeledEdge                                                                          func(*XsdGoPkgHasElems_LabeledEdge, bool) error
	TStyle                                                                                                func(*TStyle, bool) error
	XsdGoPkgHasElem_Edge                                                                                  func(*XsdGoPkgHasElem_Edge, bool) error
	TShape                                                                                                func(*TShape, bool) error
	XsdGoPkgHasElems_Label                                                                                func(*XsdGoPkgHasElems_Label, bool) error
	TxsdDiagramElementSequenceExtension                                                                   func(*TxsdDiagramElementSequenceExtension, bool) error
	TDiagramElement                                                                                       func(*TDiagramElement, bool) error
	TDiagram                                                                                              func(*TDiagram, bool) error
	XsdGoPkgHasElem_Diagram                                                                               func(*XsdGoPkgHasElem_Diagram, bool) error
	XsdGoPkgHasElems_Diagram                                                                              func(*XsdGoPkgHasElems_Diagram, bool) error
	XsdGoPkgHasElem_Shape                                                                                 func(*XsdGoPkgHasElem_Shape, bool) error
	XsdGoPkgHasElem_Style                                                                                 func(*XsdGoPkgHasElem_Style, bool) error
	XsdGoPkgHasElems_Shape                                                                                func(*XsdGoPkgHasElems_Shape, bool) error
	XsdGoPkgHasElems_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_ func(*XsdGoPkgHasElems_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_, bool) error
	XsdGoPkgHasCdata                                                                                      func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_                  func(*XsdGoPkgHasElem_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_, bool) error
	XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_  func(*XsdGoPkgHasElem_ExtensionsequenceDiagramElementschema_Extension_TxsdDiagramElementSequenceExtension_, bool) error
	XsdGoPkgHasElems_DiagramElement                                                                       func(*XsdGoPkgHasElems_DiagramElement, bool) error
	TEdge                                                                                                 func(*TEdge, bool) error
	XsdGoPkgHasElems_Plane                                                                                func(*XsdGoPkgHasElems_Plane, bool) error
	XsdGoPkgHasElem_LabeledEdge                                                                           func(*XsdGoPkgHasElem_LabeledEdge, bool) error
	XsdGoPkgHasElems_LabeledShape                                                                         func(*XsdGoPkgHasElems_LabeledShape, bool) error
	XsdGoPkgHasElem_DiagramElement                                                                        func(*XsdGoPkgHasElem_DiagramElement, bool) error
	XsdGoPkgHasElem_Node                                                                                  func(*XsdGoPkgHasElem_Node, bool) error
	XsdGoPkgHasElems_Node                                                                                 func(*XsdGoPkgHasElems_Node, bool) error
	XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_                 func(*XsdGoPkgHasElems_WaypointsequenceextensioncomplexContentEdgeschema_Waypoint_DcTPoint_, bool) error
	TPlane                                                                                                func(*TPlane, bool) error
	TLabel                                                                                                func(*TLabel, bool) error
	TLabeledShape                                                                                         func(*TLabeledShape, bool) error
	XsdGoPkgHasElems_Style                                                                                func(*XsdGoPkgHasElems_Style, bool) error
	TNode                                                                                                 func(*TNode, bool) error
	XsdGoPkgHasElem_Label                                                                                 func(*XsdGoPkgHasElem_Label, bool) error
	XsdGoPkgHasElem_LabeledShape                                                                          func(*XsdGoPkgHasElem_LabeledShape, bool) error
}
